<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="prs.mngCon.actualConApprove">

    <!--
    ==================================================================   
      # 설명    : typeAlias 선언
      #    기능    : SETTING
      #    TABLE    : 
    ==================================================================
    -->
    <typeAlias alias="hashMap"             type="java.util.HashMap" />
     
     
     <!--
    ==================================================================   
      # 설명    : 직원개인업무성과 실적확인 목록 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getActualList" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.YEAR
             , #findMon# AS MON
             , A.EVAL_MEMB_EMPN
             , A.EVAL_MEMB_EMPN_SEQ
             , A.KOR_NM
             , A.DEPT_CD
             , A.DEPT_FULL_NM
             , A.CAST_TC
             , A.POS_TC
             , A.CAST_TC_NM 
             , A.POS_TC_NM 
             , A.EVAL_YN
             , A.EVAL_GRP_ID
             , A.MANAGER_USER_ID
             , A.MANAGER_USER_NM
             , A.PLAN_STATUS_ID
             , A.PLAN_STATUS_NM
             , A.PLAN_YN
             , A.ACT_STATUS_ID
             , F_CODE_NM('217', A.ACT_STATUS_ID , A.YEAR) ACT_STATUS_NM 
         FROM (
            SELECT A.YEAR
                 , #findMon# AS MON
                 , A.EVAL_MEMB_EMPN
                 , A.EVAL_MEMB_EMPN_SEQ
                 , A.KOR_NM
                 , A.DEPT_CD
                 , F_DEPT_FULL_NM(A.YEAR, A.DEPT_CD, 'BSC_INSA_DEPT') AS DEPT_FULL_NM
                 , A.CAST_TC
                 , A.POS_TC
                 , F_CODE_NM('170', A.CAST_TC , A.YEAR) CAST_TC_NM 
                 , F_CODE_NM('171', A.POS_TC , A.YEAR) POS_TC_NM 
                 , A.EVAL_YN
                 , A.EVAL_GRP_ID
                 , A.FROM_DT
                 , A.TO_DT
                 , B1.ASSESSOR_EMPN AS MANAGER_USER_ID
             	 , C1.KOR_NM       AS MANAGER_USER_NM
                 , A.PLAN_STATUS_ID
                 , CASE WHEN A.PLAN_STATUS_ID IS NULL THEN '미입력' ELSE  F_CODE_NM('217', A.PLAN_STATUS_ID , A.YEAR)  END PLAN_STATUS_NM
                 , A.PLAN_YN
                 , NVL((
                    SELECT MAX(S2.ACT_STATUS_ID) 
                    FROM CON_MNG_TARGET S1 
                    LEFT OUTER JOIN CON_MNG_ACTUAL S2
                        ON S1.YEAR = S2.YEAR
                        AND S2.MON = #findMon#    
                        AND S1.EVAL_MEMB_EMPN = S2.EVAL_MEMB_EMPN
                        AND S1.EVAL_MEMB_EMPN_SEQ = S2.EVAL_MEMB_EMPN_SEQ
                        AND S1.TARGET_ID = S2.TARGET_ID
                    WHERE A.YEAR = S1.YEAR
                    AND A.EVAL_MEMB_EMPN = S1.EVAL_MEMB_EMPN
                    AND A.EVAL_MEMB_EMPN_SEQ = S1.EVAL_MEMB_EMPN_SEQ
                    ),'06') AS ACT_STATUS_ID
                 , (
                    SELECT MAX(S2.RETURN_REASON) 
                    FROM CON_MNG_TARGET S1 
                    LEFT OUTER JOIN CON_MNG_ACTUAL S2
                        ON S1.YEAR = S2.YEAR
                        AND S2.MON = #findMon#    
                        AND S1.EVAL_MEMB_EMPN = S2.EVAL_MEMB_EMPN
                        AND S1.EVAL_MEMB_EMPN_SEQ = S2.EVAL_MEMB_EMPN_SEQ
                        AND S1.TARGET_ID = S2.TARGET_ID
                    WHERE A.YEAR = S1.YEAR
                    AND A.EVAL_MEMB_EMPN = S1.EVAL_MEMB_EMPN
                    AND A.EVAL_MEMB_EMPN_SEQ = S1.EVAL_MEMB_EMPN_SEQ
                    ) AS RETURN_REASON
            FROM V_CON_MNG_MEMBER A
             LEFT OUTER JOIN (
        SELECT A.YEAR
                     , A.DEPT_CD
                     <![CDATA[
                     , (SELECT EMPN FROM BSC_INSA WHERE YEAR = A.YEAR AND ROWNUM = '1' 
                     AND DEPT_CD = A.DEPT_CD AND POS_TC IN ('12', '21', '22', '2C', '31', '32', '34', '39') 
                     AND EMPN IN (SELECT EMPN FROM BSC_INSA_PCMT WHERE YEAR = #findYear#
                     AND END_PCMT_DATE = #findYear# ||'1231' and pcmt_tc <> '34')) ASSESSOR_EMPN
                     ]]>
                  FROM BSC_INSA_DEPT A
                 WHERE A.DEPT_CD IN (SELECT DEPT_CD
                                       FROM BSC_INSA_DEPT
                                      WHERE YEAR = #findYear#
                                 START WITH DEPT_CD = '0000'
                           CONNECT BY PRIOR YEAR = YEAR
                                        AND PRIOR DEPT_CD = UP_DEPT_CD)
                   AND A.DEPT_CD > '1090'
                   AND A.DEPT_CD IN (
                                        SELECT A.DEPT_CD
                                          FROM BSC_INSA_DEPT A
                                          LEFT OUTER JOIN BSC_INSA_DEPT B
                                            ON A.YEAR = B.YEAR AND A.USE_YN = B.USE_YN AND A.DEPT_CD = B.UP_DEPT_CD
                                         WHERE A.YEAR = #findYear#
                                           AND A.DEPT_CD > '1090'
                                         GROUP BY A.DEPT_CD
                                        HAVING COUNT(B.DEPT_CD) = 0
                                   )
                   AND A.YEAR = #findYear#
              ORDER BY A.DEPT_CD
              ) B1 ON A.YEAR = B1.YEAR  and A.DEPT_CD = B1.DEPT_CD
               LEFT OUTER JOIN BSC_INSA C1 ON B1.YEAR = C1.YEAR AND B1.ASSESSOR_EMPN = C1.EMPN
        ) A
        WHERE A.YEAR= #findYear#
          AND A.EVAL_YN ='Y'
          <!-- AND A.PLAN_YN ='Y'  -->
        <isNotEqual prepend="AND" property="findDeptCd" compareValue="0000">
            A.DEPT_CD IN (
                SELECT DEPT_CD
                FROM BSC_INSA_DEPT
                WHERE YEAR = #findYear#
                START WITH DEPT_CD = #findDeptCd#
                CONNECT BY PRIOR YEAR = YEAR
                AND PRIOR DEPT_CD = UP_DEPT_CD
            )
        </isNotEqual>
        <isNotEqual prepend="AND" property="isAdmin" compareValue="Y">
            A.MANAGER_USER_ID = #loginUserId#
        </isNotEqual>
        <isNotEmpty prepend="AND" property="findActStatusId" >
            A.ACT_STATUS_ID = #findActStatusId#
        </isNotEmpty>
        ORDER BY A.KOR_NM, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ
    </select>
    
     

    <!--
    ==================================================================   
      # 설명    : 직원개인업무성과 실적확인 상세목록 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getList" parameterClass="hashMap" resultClass="hashMap">
    	SELECT   A.YEAR
                , A.DIRECTION_CD
                , F_CODE_NM('218', A.DIRECTION_CD , A.YEAR) DIRECTION_NM 
                , A.TARGET_ID
                , A.TARGET_NM
                , A.METRIC_NM
                , A.TARGET_VALUE
                , A.TARGET_BASIS
        		, A.WEIGHT
                , A.UNIT
                , F_CODE_NM('013', A.UNIT , A.YEAR) UNIT_NM 
                , B.Q1_ACTUAL_VALUE
                , B.Q2_ACTUAL_VALUE
                , B.Q3_ACTUAL_VALUE
                , B.Q4_ACTUAL_VALUE
                , A.CONTENT
                , B.VALUE, ROUND(B.SCORE, 3) SCORE, B.EVAL_GRADE, B.ACT_STATUS_ID, B.CONTENT
        FROM CON_MNG_TARGET A
        LEFT OUTER JOIN CON_MNG_ACTUAL B
            ON A.YEAR = B.YEAR
            AND B.MON = #findMon#    
            AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN
            AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ
            AND A.TARGET_ID = B.TARGET_ID
        WHERE A.YEAR = #findYear#
        AND A.EVAL_MEMB_EMPN = #evalMembEmpn#    
        AND A.EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
        ORDER BY A.DIRECTION_CD, A.TARGET_ID
    </select>
    
     <!--
    ==================================================================   
      # 설명    : 반려사유조회
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getReturnList" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.YEAR
            , A.EVAL_MEMB_EMPN
            , A.EVAL_MEMB_EMPN_SEQ
            , MAX(A.RETURN_REASON) AS RETURN_REASON
            , MAX(A.ACT_STATUS_ID) AS ACT_STATUS_ID
        FROM CON_MNG_ACTUAL A
        WHERE A.YEAR              = #findYear#
        AND A.MON                 = #findMon#
        AND A.EVAL_MEMB_EMPN      = #evalMembEmpn#
        AND A.EVAL_MEMB_EMPN_SEQ  = #evalMembEmpnSeq#
        GROUP BY A.YEAR, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ
    </select>
    
    
     <!--
    ==================================================================   
      # 설명    : 직원개인업무성과 실적 상태 수정
      #    기능    : UPDATE
      #    TABLE    : 
    ==================================================================
    -->    
    <update id="updateStatusData" parameterClass="hashMap">
        UPDATE CON_MNG_ACTUAL 
           SET    ACT_STATUS_ID     = #actStatusId#
                , RETURN_REASON     = #returnCause#
                , MODIFY_ID         = #loginUserId#
                , MODIFY_DT         = SYSDATE
           WHERE YEAR               = #year# 
             AND MON                = #mon#
             AND EVAL_MEMB_EMPN     = #evalMembEmpn#
             AND EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
    </update>
    
    <!--
	==================================================================
	  # 설명	: 의견 수정
	  #	기능	: UPDATE
	  #	TABLE	:
	==================================================================
	-->
	<insert id="updateConEvalEmpGrade" parameterClass="hashMap">
		MERGE INTO CON_EMP_EVAL_GRADE TT1
		 USING (
		          SELECT YEAR
	                   , EMPN
	                   , SUM(FINAL_SCORE) AS FINAL_SCORE 
	                   , DEPT_CD
	                   , ASSESSOR_EMPN
	                   , EVAL_GRP_ID
	                   , EVAL_ITEM_ID
				    FROM (
				         SELECT T1.YEAR
			                  , T1.MON
			                  , T1.EVAL_MEMB_EMPN  AS EMPN 
			                  , T1.EVAL_MEMB_EMPN_SEQ
			                  , T1.TARGET_ID 
			                  , T1.SCORE
			                  , T2.WEIGHT
			                  , (T1.SCORE * WEIGHT /100) AS FINAL_SCORE
			                  , T3.DEPT_CD
			                  , T4.ASSESSOR_EMPN
			                  , T5.EVAL_GRP_ID
			                  , (SELECT MIN(EVAL_ITEM_ID)
			                       FROM CON_EVAL_ITEM 
			                      WHERE T1.YEAR = YEAR 
			                        AND EVAL_GBN = '02') AS EVAL_ITEM_ID
			               FROM CON_MNG_ACTUAL T1 
			              INNER JOIN CON_MNG_TARGET T2
			                 ON T1.YEAR = T2.YEAR
			                AND T1.EVAL_MEMB_EMPN = T2.EVAL_MEMB_EMPN
			                AND T1.EVAL_MEMB_EMPN_SEQ = T2.EVAL_MEMB_EMPN_SEQ
			                AND T1.TARGET_ID = T2.TARGET_ID 
			              INNER JOIN CON_EMP_MEMBER T3 
			                 ON T1.YEAR = T3.YEAR
			                AND T1.EVAL_MEMB_EMPN = T3.EMPN
			              INNER JOIN CON_EMP_EVAL_ASSESSOR T4
			                 ON T3.YEAR = T4.YEAR
			                AND T3.DEPT_CD = T4.DEPT_CD 
			              INNER JOIN CON_EMP_DEPT_EVAL_GRP T5
			                 ON T3.YEAR = T5.YEAR
			                AND T3.DEPT_CD = T5.DEPT_CD
			              WHERE T1.EVAL_MEMB_EMPN = #evalMembEmpn#
			                AND T1.EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
			          ) GROUP BY YEAR
		                       , EMPN
		                       , DEPT_CD
		                       , ASSESSOR_EMPN
		                       , EVAL_GRP_ID) TT2
				   ON (TT1.YEAR = TT2.YEAR AND TT1.EVAL_GRP_ID = TT2.EVAL_GRP_ID AND TT1.EMPN = TT2.EMPN AND TT1.EVAL_ITEM_ID = TT2.EVAL_ITEM_ID AND TT1.ASSESSOR_EMPN = TT2.ASSESSOR_EMPN)
				 WHEN MATCHED THEN
				       UPDATE SET TT1.SCORE = TT2.FINAL_SCORE
				 WHEN NOT MATCHED THEN
				       INSERT (YEAR, EVAL_GRP_ID, EMPN, EVAL_ITEM_ID, ASSESSOR_EMPN, GRADE, CREATE_DT, SCORE)
				       VALUES (TT2.YEAR, TT2.EVAL_GRP_ID, TT2.EMPN, TT2.EVAL_ITEM_ID, TT2.ASSESSOR_EMPN, NULL, SYSDATE, TT2.FINAL_SCORE)
	</insert>
	
</sqlMap>


