<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="bsc.dept.intEvalResult">

	<!--
	==================================================================
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: BSC_MANAGEMENT
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />


	<!--
	==================================================================
	  # 설명	: 내부평가결과 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPT_FINAL_SCORE
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
	   SELECT A.YEAR
	   		, A.SC_DEPT_ID
	   		, A.SC_DEPT_NM
	   		, A.MEAS_SCORE
	   		, A.UNMEAS_SCORE
	   		, A.SCORE
	   		, A.WEIGHT
	   		, A.WEIGHT_SCORE
	   		, A.ADJUST
	   		, A.GOV_SCORE
	   		, A.GOV_WEIGHT
	   		, A.GOV_WEIGHT_SCORE
	   		, A.FINAL_SCORE
	   		, A.GRADE
	     FROM BSC_DEPT_FINAL_SCORE A
	        , BSC_SC_DEPT B
	    WHERE A.YEAR = #findYear#
	      AND A.YEAR = B.YEAR
	      AND A.SC_DEPT_ID = B.SC_DEPT_ID
	      AND B.SC_DEPT_GRP_ID = #findScDeptGrpId#
		ORDER BY A.FINAL_SCORE DESC
	</select>

<!--
	==================================================================
	  # 설명	: 평가그룹 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_CODE
	==================================================================
	-->
	<select id="getScDeptGrp" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.CODE_ID
			 , A.CODE_NM
		 FROM BSC_CODE A
		WHERE A.CODE_GRP_ID  = '204'
		  AND A.YEAR = #findYear#
		  AND A.DELETE_DT IS NULL
		ORDER BY A.SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 내부평가결과 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_DEPT_FINAL_SCORE
	==================================================================
	-->
	<delete id="deleteData" parameterClass="hashMap">
		DELETE FROM BSC_DEPT_FINAL_SCORE
		 WHERE YEAR = #year#
	</delete>

	<!--
	==================================================================
	  # 설명	: 내부평가결과 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_DEPT_FINAL_SCORE
	==================================================================
	-->
	<update id="updateData" parameterClass="hashMap">
		UPDATE BSC_DEPT_FINAL_SCORE SET
		       WEIGHT = #weight#
		     , WEIGHT_SCORE = SCORE * #weight# /100
		     , GOV_SCORE = #govScore#
		     , GOV_WEIGHT = #govWeight#
		     , GOV_WEIGHT_SCORE = #govScore# * #govWeight# /100
		     , ADJUST = #adjust#
		     , FINAL_SCORE = ROUND(CASE WHEN NVL(SCORE * #weight# /100, 0) + NVL(#adjust#, 0) + NVL(#govScore# * #govWeight# /100, 0) > 100 
		     		 			  THEN 100 
		     		 			  ELSE NVL(SCORE * #weight# /100, 0) + NVL(#adjust#, 0) + NVL(#govScore# * #govWeight# /100, 0) END, 3)
		     , GRADE = #grade#
		 WHERE YEAR = #year#
		   AND SC_DEPT_ID = #scDeptId#
	</update>

	<!--
	==================================================================
	  # 설명	: 내부평가결과 저장
	  #	기능	: INSERT
	  #	TABLE	: BSC_DEPT_FINAL_SCORE
	==================================================================
	-->
	<insert id="insertUseData" parameterClass="hashMap">
		INSERT INTO BSC_DEPT_FINAL_SCORE (
		      	 YEAR
				, SC_DEPT_ID
				, SC_DEPT_NM
				, SCORE
				, ADJUST
				, GOV_SCORE
				, FINAL_SCORE
				, CREATE_DT
			 ) VALUES (
			  #year#
			, #scDeptId#
			, #scDeptNm#
			, #score#
			, #adjust#
			, #govScore#
			, #score# + #adjust#
			, SYSDATE
			 )
	</insert>

	<!--
	==================================================================
	  # 설명	: 내부평가점수 가져오기
	  #	기능	: INSERT
	  #	TABLE	: BSC_DEPT_FINAL_SCORE
	==================================================================
	-->
	<insert id="getBscScore" parameterClass="hashMap">
		INSERT INTO BSC_DEPT_FINAL_SCORE (YEAR, SC_DEPT_ID, SC_DEPT_NM, MEAS_SCORE, UNMEAS_SCORE, SCORE, FINAL_SCORE, CREATE_DT)
        SELECT YEAR, SC_DEPT_ID, SC_DEPT_NM, MEAS_SCORE, UNMEAS_SCORE, ROUND(MEAS_SCORE + UNMEAS_SCORE, 3), ROUND(MEAS_SCORE + UNMEAS_SCORE, 3), SYSDATE
          FROM (
                SELECT A.YEAR, A.SC_DEPT_ID, B.SC_DEPT_NM
                     , SUM(CASE WHEN A.TYPE_ID = '01' THEN
                                     TO_CHAR(ROUND(A.WEIGHT_SCORE, 3)) * C.DEGREE_WEIGHT
                                ELSE 0 END) MEAS_SCORE
                     , SUM(CASE WHEN A.TYPE_ID = '02' THEN
                                     TO_CHAR(ROUND(A.WEIGHT_SCORE, 3)) * C.DEGREE_WEIGHT
                                ELSE 0 END) UNMEAS_SCORE
                  FROM BSC_METRICSCORE A
                     , BSC_SC_DEPT B
                     , ( SELECT T1.YEAR
                              , T1.METRIC_ID
                              , CASE WHEN T1.DEGREE_YN = 'Y' THEN T2.WEIGHT
                                     ELSE 1
                                 END 
                                 DEGREE_WEIGHT
                           FROM BSC_METRIC T1 
                           LEFT OUTER JOIN BSC_LEVEL_EVAL_TOTAL T2
                             ON T1.YEAR = T2.YEAR
                            AND T1.METRIC_ID = T2.METRIC_ID
                          WHERE T1.YEAR = #year#
                            AND T1.DELETE_DT IS NULL ) C
                 WHERE A.YEAR = #year#
                   AND A.MON = '12'
                   AND A.ANAL_CYCLE = 'Y'
                   AND A.YEAR = B.YEAR
                   AND A.SC_DEPT_ID = B.SC_DEPT_ID
<![CDATA[
                   AND B.LEVEL_ID < 3
]]>
				   AND A.YEAR = C.YEAR (+)
				   AND A.METRIC_ID = C.METRIC_ID (+)
                 GROUP BY A.YEAR, A.SC_DEPT_ID, B.SC_DEPT_NM
               )
         UNION ALL
        SELECT YEAR, SC_DEPT_ID, SC_DEPT_NM, MEAS_SCORE, UNMEAS_SCORE, ROUND(MEAS_SCORE + UNMEAS_SCORE, 3), ROUND(MEAS_SCORE + UNMEAS_SCORE, 3), SYSDATE
          FROM (
                SELECT A.YEAR, A.SC_DEPT_ID, A.SC_DEPT_NM
                     , NVL(DECODE(B.MEAS_SCORE, NULL, A.MEAS_SCORE, A.MEAS_SCORE * C.ETC2 / 100 + B.MEAS_SCORE * C.ETC1 / 100), 0) MEAS_SCORE 
                     , NVL(DECODE(B.UNMEAS_SCORE, NULL, A.UNMEAS_SCORE, A.UNMEAS_SCORE * C.ETC2 / 100 + B.UNMEAS_SCORE * C.ETC1 / 100), 0) UNMEAS_SCORE
                  FROM (
                        SELECT A.YEAR, A.SC_DEPT_ID, B.SC_DEPT_NM, B.UP_SC_DEPT_ID
                             , SUM(CASE WHEN A.TYPE_ID = '01' THEN
                                             TO_CHAR(ROUND(A.WEIGHT_SCORE, 3)) * C.DEGREE_WEIGHT
                                        ELSE 0 END) MEAS_SCORE
                             , SUM(CASE WHEN A.TYPE_ID = '02' THEN
                                             TO_CHAR(ROUND(A.WEIGHT_SCORE, 3)) * C.DEGREE_WEIGHT
                                        ELSE 0 END) UNMEAS_SCORE
                          FROM BSC_METRICSCORE A
                             , BSC_SC_DEPT B
                             , ( SELECT T1.YEAR
                                      , T1.METRIC_ID
                                      , CASE WHEN T1.DEGREE_YN = 'Y' THEN T2.WEIGHT
                                        ELSE 1
                                        END 
                                        DEGREE_WEIGHT
                                   FROM BSC_METRIC T1 
                                   LEFT OUTER JOIN BSC_LEVEL_EVAL_TOTAL T2
                                     ON T1.YEAR = T2.YEAR
                                    AND T1.METRIC_ID = T2.METRIC_ID
                                  WHERE T1.YEAR = #year#
                                    AND T1.DELETE_DT IS NULL ) C
                         WHERE A.YEAR = #year#
                           AND A.MON = '12'
                           AND A.ANAL_CYCLE = 'Y'
                           AND A.YEAR = B.YEAR
                           AND A.SC_DEPT_ID = B.SC_DEPT_ID
                           AND B.LEVEL_ID = 3
				           AND A.YEAR = C.YEAR (+)
				           AND A.METRIC_ID = C.METRIC_ID (+)
                         GROUP BY A.YEAR, A.SC_DEPT_ID, B.SC_DEPT_NM, B.UP_SC_DEPT_ID
                       ) A
                  LEFT OUTER JOIN (
                        SELECT A.YEAR, A.SC_DEPT_ID, B.SC_DEPT_NM
                             , SUM(CASE WHEN A.TYPE_ID = '01' THEN
                                             TO_CHAR(ROUND(A.WEIGHT_SCORE, 3)) * C.DEGREE_WEIGHT
                                        ELSE 0 END)  / SUM(A.WEIGHT) * 100 MEAS_SCORE
                             , SUM(CASE WHEN A.TYPE_ID = '02' THEN
                                             TO_CHAR(ROUND(A.WEIGHT_SCORE, 3)) * C.DEGREE_WEIGHT
                                        ELSE 0 END)  / SUM(A.WEIGHT) * 100 UNMEAS_SCORE
                          FROM BSC_METRICSCORE A
                             , BSC_SC_DEPT B
                             , ( SELECT T1.YEAR
                                      , T1.METRIC_ID
                                      , CASE WHEN T1.DEGREE_YN = 'Y' THEN T2.WEIGHT
                                        ELSE 1
                                        END 
                                        DEGREE_WEIGHT
                                   FROM BSC_METRIC T1 
                                   LEFT OUTER JOIN BSC_LEVEL_EVAL_TOTAL T2
                                     ON T1.YEAR = T2.YEAR
                                    AND T1.METRIC_ID = T2.METRIC_ID
                                  WHERE T1.YEAR = #year#
                                    AND T1.DELETE_DT IS NULL 
                                    AND T1.DOWN_SCORE_YN IS NULL ) C
                         WHERE A.YEAR = #year#
                           AND A.MON = '12'
                           AND A.ANAL_CYCLE = 'Y'
                           AND A.YEAR = B.YEAR
                           AND A.SC_DEPT_ID = B.SC_DEPT_ID
                           AND B.LEVEL_ID = 2
				           AND A.YEAR = C.YEAR (+)
				           AND A.METRIC_ID = C.METRIC_ID 
                         GROUP BY A.YEAR, A.SC_DEPT_ID, B.SC_DEPT_NM
                       ) B
                    ON A.YEAR = B.YEAR AND A.UP_SC_DEPT_ID = B.SC_DEPT_ID
                     , (SELECT ETC1, ETC2 FROM BSC_CODE WHERE CODE_GRP_ID = '204' AND CODE_ID = '3' AND YEAR = #year#) C
               )     
	</insert>

	<!--
	==================================================================
	  # 설명	: 정평점수 가져오기
	  #	기능	: INSERT
	  #	TABLE	: BSC_DEPT_FINAL_SCORE
	==================================================================
	-->
	<insert id="getGovScore" parameterClass="hashMap">
		MERGE INTO BSC_DEPT_FINAL_SCORE A
		USING (
		        SELECT A.YEAR, A.SC_DEPT_ID, A.SCORE, NVL(B.RATE, 0) RATE
		          FROM (
		                SELECT A.YEAR, A.SC_DEPT_ID, ROUND((SUM(B.SCORE * C.WEIGHT / 100) * 100) / SUM(C.WEIGHT), 5) SCORE
		                  FROM BSC_DEPT_GOV_WEIGHT A
		                     , BSC_DEPT_GOV_STD B
		                     , GOV_METRIC C
		                 WHERE A.YEAR = #year#
		                   AND A.WEIGHT > 0
		                   AND A.YEAR = B.YEAR
		                   AND A.GOV_METRIC_ID = B.GOV_METRIC_ID
		                   AND A.YEAR = C.YEAR
		                   AND A.GOV_METRIC_ID = C.GOV_METRIC_ID
		                 GROUP BY A.YEAR, A.SC_DEPT_ID
		               ) A
		          LEFT OUTER JOIN BSC_DEPT_GOV_RATE B
		            ON A.YEAR = B.YEAR AND A.SC_DEPT_ID = B.SC_DEPT_ID
		      ) B
		   ON (A.YEAR = B.YEAR AND A.SC_DEPT_ID = B.SC_DEPT_ID)
		 WHEN MATCHED THEN
		      UPDATE SET A.SCORE = ROUND((NVL(A.MEAS_SCORE, 0) + NVL(A.UNMEAS_SCORE, 0)) * (100 - B.RATE) / 100, 5)
		               , A.GOV_SCORE = ROUND(B.SCORE * B.RATE / 100, 5)
		               , A.FINAL_SCORE = (CASE WHEN ROUND((NVL(A.MEAS_SCORE, 0) + NVL(A.UNMEAS_SCORE, 0)) * (100 - B.RATE) / 100, 5) + ROUND(B.SCORE * B.RATE / 100, 5) + NVL(A.ADJUST, 0) > 100 THEN 100
		                                       ELSE ROUND((NVL(A.MEAS_SCORE, 0) + NVL(A.UNMEAS_SCORE, 0)) * (100 - B.RATE) / 100, 5) + ROUND(B.SCORE * B.RATE / 100, 5) + NVL(A.ADJUST, 0)
		                                       END)
	</insert>
	
	<!--
	==================================================================
	  # 설명	: 내부평가결과 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPT_FINAL_SCORE
	==================================================================
	-->
	<select id="getListExcel" parameterClass="hashMap" resultClass="hashMap">
	   SELECT A.YEAR
	   	    , (SELECT AA.CODE_NM FROM BSC_CODE AA WHERE AA.CODE_GRP_ID = '003' AND AA.YEAR = A.YEAR AND AA.CODE_ID = B.SC_DEPT_GRP_ID) SC_DEPT_GRP_NM
	   	    , (SELECT AA.SORT_ORDER FROM BSC_CODE AA WHERE AA.CODE_GRP_ID = '003' AND AA.YEAR = A.YEAR AND AA.CODE_ID = B.SC_DEPT_GRP_ID) SORT_ORDER2
	   		, A.SC_DEPT_ID
	   		, A.SC_DEPT_NM
	   		, A.MEAS_SCORE
	   		, A.UNMEAS_SCORE
	   		, A.SCORE
	   		, A.WEIGHT
	   		, A.WEIGHT_SCORE
	   		, A.ADJUST
	   		, A.GOV_SCORE
	   		, A.GOV_WEIGHT
	   		, A.GOV_WEIGHT_SCORE
	   		, A.FINAL_SCORE
	   		, A.GRADE
	     FROM BSC_DEPT_FINAL_SCORE A
	        , BSC_SC_DEPT B
	    WHERE A.YEAR = #findYear#
	      AND A.YEAR = B.YEAR
	      AND A.SC_DEPT_ID = B.SC_DEPT_ID
	      AND B.SC_DEPT_GRP_ID IS NOT NULL
	      AND B.DELETE_DT IS NULL
		ORDER BY SORT_ORDER2, B.SORT_ORDER
	</select>
	
	<!--
    ==================================================================   
      # 설명    : 업무성과점수 업로드 수정
      #    기능    : UPDATE
      #    TABLE    : 
    ==================================================================
    -->    
    <update id="updateData2" parameterClass="hashMap">
		  UPDATE BSC_DEPT_FINAL_SCORE
           SET WEIGHT = #weight#
             , WEIGHT_SCORE = (SCORE * #weight#)/100
             , GOV_SCORE = #govScore#
             , GOV_WEIGHT = #govWeight#
             , GOV_WEIGHT_SCORE =  (#govScore# * #govWeight#)/100
			 , FINAL_SCORE = ROUND(CASE WHEN NVL(SCORE * #weight# /100, 0) + NVL(#adjust#, 0) + NVL(#govScore# * #govWeight# /100, 0) > 100 
		     		 			  THEN 100 
		     		 			  ELSE NVL(SCORE * #weight# /100, 0) + NVL(#adjust#, 0) + NVL(#govScore# * #govWeight# /100, 0) END,3)
        WHERE YEAR = #findYear#
          AND SC_DEPT_ID = #scDeptId#
	</update>
</sqlMap>
