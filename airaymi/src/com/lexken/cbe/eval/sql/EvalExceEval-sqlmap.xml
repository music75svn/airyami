<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="cbe.eval.evalExceEval">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: CBE_EVAL_RESULT
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />
	 

	<!--
	==================================================================   
	  # 설명	: 종합평가 예외평가 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: CBE_EVAL_RESULT
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		 SELECT A.EVAL_MEMB_USER_ID,
                A.NAME AS EVAL_MEMB_USER_NM,
                A.SC_DEPT_ID,
                SC.SC_DEPT_NM,
                A.JIKGUB_ID,
                A.JIKGUB_NM,
                A.POS_ID,
                A.POS_NM,
                A.EXCE_EVAL_REASON,
                DECODE(C.FRS_DEPT_SCORE,NULL,C.FRS_DEPT_GRADE,C.FRS_DEPT_SCORE) FRS_DEPT_RESULT,
                DECODE(C.SEC_DEPT_SCORE,NULL,C.SEC_DEPT_GRADE,C.SEC_DEPT_SCORE) SEC_DEPT_RESULT,
                DECODE(C.TEAM_SCORE,NULL,C.TEAM_GRADE,C.TEAM_SCORE) TEAM_RESULT,
                C.PRS_GRADE,
                C.CONBI_EVAL_GRADE_ID,
                C.CONBI_EVAL_GRADE,
                C.CONBI_EVAL_FIX_GRADE_ID,
                C.CONBI_EVAL_FIX_GRADE
           FROM CBE_EVAL_MASTER A
                LEFT OUTER JOIN BSC_SC_DEPT SC
                ON A.YEAR = SC.YEAR
               AND A.SC_DEPT_ID = SC.SC_DEPT_ID
               AND SC.DELETE_DT IS NULL
                LEFT OUTER JOIN CBE_EVAL_RESULT C
                ON A.YEAR = C.YEAR
                AND A.EVAL_DEGREE_ID = C.EVAL_DEGREE_ID
                AND A.EVAL_MEMB_USER_ID = C.EVAL_MEMB_USER_ID
          WHERE A.YEAR = #findYear#
	            AND A.EVAL_DEGREE_ID = #findEvalDegreeId#
	            AND A.EVAL_METHOD_GBN = '20' 
	            <isNotEmpty prepend="AND" property="findName">
		        A.NAME LIKE '%'||#findName#||'%'
		        </isNotEmpty>
		        <isNotEmpty prepend="AND" property="findScDeptNm">
		        SC.SC_DEPT_NM LIKE '%'||#findScDeptNm#||'%'
		        </isNotEmpty>
          ORDER BY SC.SORT_ORDER, A.NAME
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 종합평가 예외평가 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: CBE_EVAL_RESULT
	==================================================================
	-->
	<select id="getExcelList" parameterClass="hashMap" resultClass="hashMap">
		 SELECT A.EVAL_MEMB_USER_ID,
                A.NAME AS EVAL_MEMB_USER_NM,
                A.SC_DEPT_ID,
                SC.SC_DEPT_NM,
                A.JIKGUB_ID,
                A.JIKGUB_NM,
                A.POS_ID,
                A.POS_NM,
                A.EXCE_EVAL_REASON,
                DECODE(C.FRS_DEPT_SCORE,NULL,C.FRS_DEPT_GRADE,C.FRS_DEPT_SCORE) FRS_DEPT_RESULT,
                DECODE(C.SEC_DEPT_SCORE,NULL,C.SEC_DEPT_GRADE,C.SEC_DEPT_SCORE) SEC_DEPT_RESULT,
                DECODE(C.TEAM_SCORE,NULL,C.TEAM_GRADE,C.TEAM_SCORE) TEAM_RESULT,
                C.PRS_GRADE,
                C.CONBI_EVAL_GRADE_ID,
                C.CONBI_EVAL_GRADE,
                C.CONBI_EVAL_FIX_GRADE_ID,
                C.CONBI_EVAL_FIX_GRADE
           FROM CBE_EVAL_MASTER A
                LEFT OUTER JOIN BSC_SC_DEPT SC
                ON A.YEAR = SC.YEAR
               AND A.SC_DEPT_ID = SC.SC_DEPT_ID
               AND SC.DELETE_DT IS NULL
                LEFT OUTER JOIN CBE_EVAL_RESULT C
                ON A.YEAR = C.YEAR
                AND A.EVAL_DEGREE_ID = C.EVAL_DEGREE_ID
                AND A.EVAL_MEMB_USER_ID = C.EVAL_MEMB_USER_ID
          WHERE A.YEAR = #findYear#
	            AND A.EVAL_DEGREE_ID = #evalDegreeId#
	            AND A.EVAL_METHOD_GBN = '20' 
          ORDER BY SC.SORT_ORDER, A.NAME
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가차수 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getDegreeList" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR,
               EVAL_DEGREE_ID,
               EVAL_DEGREE_NM
          FROM BSC_ECM_EVAL_DEGREE
         WHERE YEAR=#findYear#
    </select>
    
    
    <!--
	==================================================================   
	  # 설명	: 평가등급 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getEvalGradeList" parameterClass="hashMap" resultClass="hashMap">
		SELECT C.GRADE_ITEM_ID, C.GRADE_ITEM_NM
		  FROM 
		    (SELECT YEAR, EVAL_METHOD_ID
		      FROM CBE_EVAL_CONVERT_METHOD
		     WHERE 1=1
		       AND YEAR = #findYear#
		       AND EVAL_GBN_ID = '03'
		    ) A   
		    LEFT OUTER JOIN BSC_ECM_GRADE_DISTRI_EVAL_ITEM C
		    ON A.YEAR = C.YEAR
		    AND A.EVAL_METHOD_ID = C.EVAL_METHOD_ID
		 ORDER BY C.SORT_ORDER
    </select>
	
	<!--
	==================================================================   
	  # 설명	: 종합평가 예외평가 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: CBE_EVAL_RESULT
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR                  
			 , EVAL_DEGREE_ID        
			 , EVAL_MEMB_USER_ID     
			 , EVAL_MEMB_USER_NM     
			 , EVAL_METHOD_GBN       
			 , FRS_DEPT_SCORE        
			 , FRS_DEPT_CONVERT_SCORE
			 , FRS_DEPT_WT_REFL_CONVERT_SCORE
			 , FRS_DEPT_GRADE_ITEM_ID
			 , FRS_DEPT_GRADE        
			 , SEC_DEPT_SCORE        
			 , SEC_DEPT_CONVERT_SCORE
			 , SEC_DEPT_WT_REFL_CONVERT_SCORE
			 , SEC_DEPT_GRADE_ITEM_ID
			 , SEC_DEPT_GRADE        
			 , TEAM_SCORE            
			 , TEAM_CONVERT_SCORE    
			 , TEAM_WT_REFL_CONVERT_SCORE
			 , TEAM_GRADE_ITEM_ID    
			 , TEAM_GRADE            
			 , PRS_GRADE_ITEM_ID     
			 , PRS_GRADE             
			 , PRS_CONVERT_SCORE     
			 , PRS_WT_REFL_CONVERT_SCORE
			 , CONBI_EVAL_SCORE      
			 , CONBI_EVAL_RANK       
			 , CONBI_EVAL_GRADE_ID   
			 , CONBI_EVAL_GRADE      
			 , CONBI_EVAL_FIX_GRADE_ID
			 , CONBI_EVAL_FIX_GRADE  
		  FROM CBE_EVAL_RESULT 
		 WHERE 1 = 1 
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND EVAL_MEMB_USER_ID = #evalMembUserId#	      
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 종합평가 예외평가 등록
	  #	기능	: INSERT
	  #	TABLE	: CBE_EVAL_RESULT
	==================================================================
	-->	
	<insert id="insertData" parameterClass="hashMap">
		<selectKey resultClass="java.lang.String" keyProperty="SEQ" >
			SELECT F_PGM_SERI('CBE_EVAL_RESULT','','','','','') SEQ FROM DUAL
		</selectKey>
		INSERT INTO CBE_EVAL_RESULT ( 
			   YEAR
			 , EVAL_DEGREE_ID
			 , EVAL_MEMB_USER_ID
			 , EVAL_MEMB_USER_NM
			 , EVAL_METHOD_GBN
			 , FRS_DEPT_SCORE
			 , FRS_DEPT_CONVERT_SCORE
			 , FRS_DEPT_WT_REFL_CONVERT_SCORE
			 , FRS_DEPT_GRADE_ITEM_ID
			 , FRS_DEPT_GRADE
			 , SEC_DEPT_SCORE
			 , SEC_DEPT_CONVERT_SCORE
			 , SEC_DEPT_WT_REFL_CONVERT_SCORE
			 , SEC_DEPT_GRADE_ITEM_ID
			 , SEC_DEPT_GRADE
			 , TEAM_SCORE
			 , TEAM_CONVERT_SCORE
			 , TEAM_WT_REFL_CONVERT_SCORE
			 , TEAM_GRADE_ITEM_ID
			 , TEAM_GRADE
			 , PRS_GRADE_ITEM_ID
			 , PRS_GRADE
			 , PRS_CONVERT_SCORE
			 , PRS_WT_REFL_CONVERT_SCORE
			 , CONBI_EVAL_SCORE
			 , CONBI_EVAL_RANK
			 , CONBI_EVAL_GRADE_ID
			 , CONBI_EVAL_GRADE
			 , CONBI_EVAL_FIX_GRADE_ID
			 , CONBI_EVAL_FIX_GRADE
			 , CREATE_DT
			 ) VALUES ( 
			   #year#
			 , #SEQ#
			 , #evalMembUserId#
			 , #evalMembUserNm#
			 , #evalMethodGbn#
			 , #frsDeptScore#
			 , #frsDeptConvertScore#
			 , #frsDeptWtReflConvertScore#
			 , #frsDeptGradeItemId#
			 , #frsDeptGrade#
			 , #secDeptScore#
			 , #secDeptConvertScore#
			 , #secDeptWtReflConvertScore#
			 , #secDeptGradeItemId#
			 , #secDeptGrade#
			 , #teamScore#
			 , #teamConvertScore#
			 , #teamWtReflConvertScore#
			 , #teamGradeItemId#
			 , #teamGrade#
			 , #prsGradeItemId#
			 , #prsGrade#
			 , #prsConvertScore#
			 , #prsWtReflConvertScore#
			 , #conbiEvalScore#
			 , #conbiEvalRank#
			 , #conbiEvalGradeId#
			 , #conbiEvalGrade#
			 , #conbiEvalFixGradeId#
			 , #conbiEvalFixGrade#
			 , SYSDATE
			 )
	</insert>	
	
	<!--
	==================================================================   
	  # 설명	: 종합평가 예외평가 수정
	  #	기능	: UPDATE
	  #	TABLE	: CBE_EVAL_RESULT
	==================================================================
	-->	
	<update id="updateData_bak" parameterClass="hashMap">
		UPDATE CBE_EVAL_RESULT 
		   SET CONBI_EVAL_GRADE_ID       = #conbiEvalGrade# 
			 , CONBI_EVAL_FIX_GRADE_ID   = #conbiEvalGrade# 
			 , MODIFY_DT              = SYSDATE 
		 WHERE 1 = 1 
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND EVAL_MEMB_USER_ID = #evalMembUserId#		
	</update>	
	
	<update id="updateData" parameterClass="hashMap">
		MERGE INTO CBE_EVAL_RESULT CER
		     USING (SELECT #year# AS YEAR, #evalDegreeId# AS EVAL_DEGREE_ID, #evalMembUserId# AS EVAL_MEMB_USER_ID
		                 , #conbiEvalGrade#  AS CONBI_EVAL_GRADE_ID
		                 , #conbiEvalGradeNm# AS CONBI_EVAL_GRADE
		                 , #conbiEvalGrade#  AS CONBI_EVAL_FIX_GRADE_ID
		                 , #conbiEvalGradeNm# AS CONBI_EVAL_FIX_GRADE
		              FROM DUAL
		           ) ICER
		        ON (CER.YEAR = ICER.YEAR
		       AND CER.EVAL_DEGREE_ID = ICER.EVAL_DEGREE_ID
		       AND CER.EVAL_MEMB_USER_ID = ICER.EVAL_MEMB_USER_ID)
		WHEN MATCHED THEN  
		    UPDATE SET CER.CONBI_EVAL_GRADE_ID = ICER.CONBI_EVAL_GRADE_ID
		             , CER.CONBI_EVAL_GRADE = ICER.CONBI_EVAL_GRADE
		             , CER.CONBI_EVAL_FIX_GRADE_ID = ICER.CONBI_EVAL_FIX_GRADE_ID
		             , CER.CONBI_EVAL_FIX_GRADE = ICER.CONBI_EVAL_FIX_GRADE
		WHEN NOT MATCHED THEN 
		    INSERT (CER.YEAR, CER.EVAL_DEGREE_ID, CER.EVAL_MEMB_USER_ID
		                 , CER.CONBI_EVAL_GRADE_ID, CER.CONBI_EVAL_GRADE, CER.CONBI_EVAL_FIX_GRADE_ID, CER.CONBI_EVAL_FIX_GRADE)
		    VALUES (ICER.YEAR, ICER.EVAL_DEGREE_ID, ICER.EVAL_MEMB_USER_ID
		                 , ICER.CONBI_EVAL_GRADE_ID, ICER.CONBI_EVAL_GRADE, ICER.CONBI_EVAL_FIX_GRADE_ID, ICER.CONBI_EVAL_FIX_GRADE)
	</update>	
	

	<!--
	==================================================================   
	  # 설명	: 종합평가 예외평가 삭제
	  #	기능	: UPDATE
	  #	TABLE	: CBE_EVAL_RESULT
	==================================================================
	-->	
	<update id="deleteData" parameterClass="hashMap">
		DELETE FROM CBE_EVAL_RESULT 
		 WHERE 1 = 1 
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND EVAL_MEMB_USER_ID = #evalMembUserId#
	</update>
	
	
</sqlMap>


