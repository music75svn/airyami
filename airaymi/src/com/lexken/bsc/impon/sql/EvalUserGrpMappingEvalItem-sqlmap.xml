<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="bsc.impon.evalUserGrpMappingEvalItem">

	<!--
	==================================================================
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />


	<!--
	==================================================================
	  # 설명	: 평가단별 지표/항목 매핑 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_IPE_EVAL_USER_GRP_ITEM
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR
             , EVAL_DEGREE_ID, EVAL_DEGREE_NM
             , EVAL_USER_GRP_ID, EVAL_USER_GRP_NM
             , METRIC_GRP_ID, METRIC_GRP_NM
             , NVL(SEQ, 1) AS SEQ
             , MAPPING_YN
             , ITEM_GBN
             , CASE WHEN ITEM_GBN = '01' THEN METRIC_ID ELSE ITEM_ID END AS EVAL_ITEM_ID
             , CASE WHEN ITEM_GBN = '01' THEN METRIC_NM ELSE ITEM_NM END AS EVAL_ITEM_NM
             , EVAL_METHOD_ID, EVAL_METHOD_NM
             , EVAL_METHOD_GBN_ID, EVAL_METHOD_GBN_NM
             , OLD_DEGREE_REFL_ID, OLD_DEGREE_REFL_NM
             , COUNT(METRIC_GRP_ID) OVER(PARTITION BY YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID ) AS EUG_ROWSPAN_CNT
             , ROW_NUMBER() OVER(PARTITION BY YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID
                                   ORDER BY UG_SORT_ORDER NULLS LAST, EVAL_USER_GRP_ID
                                           , IS_MAPPING_YN NULLS LAST, METRIC_GRP_ID
                                         , SEQ) AS EUG_ROWSPAN_IDX
             , CASE WHEN COUNT(SEQ) OVER(PARTITION BY YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID, METRIC_GRP_ID ) = 0 THEN 1
             	    ELSE COUNT(SEQ) OVER(PARTITION BY YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID, METRIC_GRP_ID )
               END AS MG_ROWSPAN_CNT
             , ROW_NUMBER() OVER(PARTITION BY YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID, METRIC_GRP_ID
                                   ORDER BY UG_SORT_ORDER NULLS LAST, EVAL_USER_GRP_ID
                                           , IS_MAPPING_YN NULLS LAST, METRIC_GRP_ID
                                         , SEQ) AS MG_ROWSPAN_IDX
          FROM
            (SELECT MT.YEAR
                 , MT.EVAL_DEGREE_ID, ED2.EVAL_DEGREE_NM
                 , MT.EVAL_USER_GRP_ID
                 , MT.EVAL_USER_GRP_NM AS EVAL_USER_GRP_NM
                 , MT.METRIC_GRP_ID
                 , MT.METRIC_GRP_NM AS METRIC_GRP_NM
                 , I.SEQ
                 , CASE WHEN I.SEQ IS NULL THEN 'N' ELSE 'Y' END AS MAPPING_YN
                 , I.ITEM_GBN
                 , I.METRIC_ID
                 , CASE WHEN M.METRIC_NM IS NULL THEN ''
                        ELSE '[' || SD.SC_DEPT_NM || '] '
                   END || M.METRIC_NM AS METRIC_NM
                 , I.ITEM_ID
                 , SI.ITEM_NM AS ITEM_NM
                 , UM.EVAL_METHOD_ID
                 , EG.EVAL_METHOD_NM AS EVAL_METHOD_NM
                 , UM.EVAL_METHOD_GBN_ID
                 , F_CODE_NM('148', UM.EVAL_METHOD_GBN_ID, UM.YEAR) AS EVAL_METHOD_GBN_NM
                 , UM.OLD_DEGREE_REFL_ID
                 , ED.EVAL_DEGREE_NM AS OLD_DEGREE_REFL_NM
                 , MT.UG_SORT_ORDER
                 , CASE WHEN I.METRIC_GRP_ID IS NULL THEN NULL ELSE 'Y' END AS IS_MAPPING_YN
              FROM
                (SELECT UG.YEAR, #findEvalDegreeId# AS EVAL_DEGREE_ID
                      , UG.EVAL_USER_GRP_ID, UG.EVAL_USER_GRP_NM
                      , UG.SORT_ORDER AS UG_SORT_ORDER
                      , MG.METRIC_GRP_ID, MG.METRIC_GRP_NM
                   FROM BSC_IPE_EVAL_USER_GRP UG
                        LEFT OUTER JOIN
                        BSC_METRIC_GRP MG
                        ON UG.YEAR = MG.YEAR
                       AND MG.TYPE_ID = '02'
                       AND MG.DELETE_DT IS NULL
                  WHERE 1=1
                    AND UG.YEAR = #findYear#
                 ) MT
                   LEFT OUTER JOIN BSC_IPE_EVAL_USER_GRP_ITEM I
                   ON MT.YEAR = I.YEAR
                  AND MT.EVAL_DEGREE_ID = I.EVAL_DEGREE_ID
                  AND MT.EVAL_USER_GRP_ID = I.EVAL_USER_GRP_ID
                  AND MT.METRIC_GRP_ID = I.METRIC_GRP_ID
                   LEFT OUTER JOIN BSC_METRIC M
                   ON I.YEAR = M.YEAR
                  AND I.METRIC_ID = M.METRIC_ID
                  AND I.ITEM_GBN = '01'
                  AND M.TYPE_ID = '02'
                  AND M.DELETE_DT IS NULL
                   LEFT OUTER JOIN
                   BSC_SC_DEPT SD
                   ON M.YEAR = SD.YEAR
                  AND M.SC_DEPT_ID = SD.SC_DEPT_ID
                   LEFT OUTER JOIN BSC_IPE_ITEM SI
                   ON I.YEAR = SI.YEAR
                  AND I.EVAL_DEGREE_ID = SI.EVAL_DEGREE_ID
                  AND I.METRIC_GRP_ID = SI.METRIC_GRP_ID
                  AND I.ITEM_ID = SI.ITEM_ID
                  AND I.ITEM_GBN = '02'
                   LEFT OUTER JOIN BSC_IPE_EVAL_USER_GRP_METHOD UM
                   ON MT.YEAR = UM.YEAR
                  AND MT.EVAL_DEGREE_ID = UM.EVAL_DEGREE_ID
                  AND MT.EVAL_USER_GRP_ID = UM.EVAL_USER_GRP_ID
                  AND MT.METRIC_GRP_ID = UM.METRIC_GRP_ID
                   LEFT OUTER JOIN BSC_ECM_EVAL_GRADE_CONVERT_TAB EG
                   ON UM.YEAR = EG.YEAR
                  AND UM.EVAL_METHOD_ID = EG.EVAL_METHOD_ID
                   LEFT OUTER JOIN BSC_ECM_EVAL_DEGREE ED
                   ON UM.YEAR = ED.YEAR
                  AND UM.OLD_DEGREE_REFL_ID = ED.EVAL_DEGREE_ID
                   LEFT OUTER JOIN BSC_ECM_EVAL_DEGREE ED2
                   ON MT.YEAR = ED2.YEAR
                  AND MT.EVAL_DEGREE_ID = ED2.EVAL_DEGREE_ID
            )
         WHERE 1=1
         <dynamic prepend="AND">
            <isNotEmpty property="findEvalDegreeId">
            EVAL_DEGREE_ID = #findEvalDegreeId#
             </isNotEmpty>
         </dynamic>
         <dynamic prepend="AND">
            <isNotEmpty property="findEvalUserGrpId">
            EVAL_USER_GRP_ID = #findEvalUserGrpId#
            </isNotEmpty>
         </dynamic>
         <dynamic prepend="AND">
            <isNotEmpty property="findMappingYn">
            MAPPING_YN = #findMappingYn#
            </isNotEmpty>
         </dynamic>
         ORDER BY UG_SORT_ORDER NULLS LAST, EVAL_USER_GRP_ID
                , IS_MAPPING_YN NULLS LAST, METRIC_GRP_ID
                , SEQ
	</select>

	<!--
	==================================================================
	  # 설명	: 평가단별 지표/항목 매핑 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_IPE_EVAL_USER_GRP_ITEM
	==================================================================
	-->
	<select id="getExeclList" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR
             , EVAL_DEGREE_ID, EVAL_DEGREE_NM
             , EVAL_USER_GRP_ID, EVAL_USER_GRP_NM
             , METRIC_GRP_ID, METRIC_GRP_NM
             , NVL(SEQ, 1) AS SEQ
             , MAPPING_YN
             , ITEM_GBN
             , CASE WHEN ITEM_GBN = '01' THEN METRIC_ID ELSE ITEM_ID END AS EVAL_ITEM_ID
             , CASE WHEN ITEM_GBN = '01' THEN METRIC_NM ELSE ITEM_NM END AS EVAL_ITEM_NM
             , EVAL_METHOD_ID, EVAL_METHOD_NM
             , EVAL_METHOD_GBN_ID, EVAL_METHOD_GBN_NM
             , OLD_DEGREE_REFL_ID
             , CASE WHEN MAPPING_YN = 'Y' THEN CASE WHEN OLD_DEGREE_REFL_ID IS NULL THEN 'N' END
               END OLD_DEGREE_REFL_NM
             , COUNT(METRIC_GRP_ID) OVER(PARTITION BY YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID ) AS EUG_ROWSPAN_CNT
             , ROW_NUMBER() OVER(PARTITION BY YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID
                                   ORDER BY UG_SORT_ORDER NULLS LAST, EVAL_USER_GRP_ID
                                           , IS_MAPPING_YN NULLS LAST, METRIC_GRP_ID
                                         , SEQ) AS EUG_ROWSPAN_IDX
             , CASE WHEN COUNT(SEQ) OVER(PARTITION BY YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID, METRIC_GRP_ID ) = 0 THEN 1
             	    ELSE COUNT(SEQ) OVER(PARTITION BY YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID, METRIC_GRP_ID )
               END AS MG_ROWSPAN_CNT
             , ROW_NUMBER() OVER(PARTITION BY YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID, METRIC_GRP_ID
                                   ORDER BY UG_SORT_ORDER NULLS LAST, EVAL_USER_GRP_ID
                                           , IS_MAPPING_YN NULLS LAST, METRIC_GRP_ID
                                         , SEQ) AS MG_ROWSPAN_IDX
          FROM
            (SELECT MT.YEAR
                 , MT.EVAL_DEGREE_ID, ED2.EVAL_DEGREE_NM
                 , MT.EVAL_USER_GRP_ID
                 , MT.EVAL_USER_GRP_NM AS EVAL_USER_GRP_NM
                 , MT.METRIC_GRP_ID
                 , MT.METRIC_GRP_NM AS METRIC_GRP_NM
                 , I.SEQ
                 , CASE WHEN I.SEQ IS NULL THEN 'N' ELSE 'Y' END AS MAPPING_YN
                 , I.ITEM_GBN
                 , I.METRIC_ID
                 , CASE WHEN M.METRIC_NM IS NULL THEN ''
                        ELSE '[' || SD.SC_DEPT_NM || '] '
                   END || M.METRIC_NM AS METRIC_NM
                 , I.ITEM_ID
                 , SI.ITEM_NM AS ITEM_NM
                 , UM.EVAL_METHOD_ID
                 , EG.EVAL_METHOD_NM AS EVAL_METHOD_NM
                 , UM.EVAL_METHOD_GBN_ID
                 , F_CODE_NM('148', UM.EVAL_METHOD_GBN_ID, UM.YEAR) AS EVAL_METHOD_GBN_NM
                 , UM.OLD_DEGREE_REFL_ID
                 , ED.EVAL_DEGREE_NM AS OLD_DEGREE_REFL_NM
                 , MT.UG_SORT_ORDER
                 , CASE WHEN I.METRIC_GRP_ID IS NULL THEN NULL ELSE 'Y' END AS IS_MAPPING_YN
              FROM
                (SELECT UG.YEAR, #findEvalDegreeId# AS EVAL_DEGREE_ID
                      , UG.EVAL_USER_GRP_ID, UG.EVAL_USER_GRP_NM
                      , UG.SORT_ORDER AS UG_SORT_ORDER
                      , MG.METRIC_GRP_ID, MG.METRIC_GRP_NM
                   FROM BSC_IPE_EVAL_USER_GRP UG
                        LEFT OUTER JOIN
                        BSC_METRIC_GRP MG
                        ON UG.YEAR = MG.YEAR
                       AND MG.TYPE_ID = '02'
                       AND MG.DELETE_DT IS NULL
                  WHERE 1=1
                    AND UG.YEAR = #findYear#
                 ) MT
                   LEFT OUTER JOIN BSC_IPE_EVAL_USER_GRP_ITEM I
                   ON MT.YEAR = I.YEAR
                  AND MT.EVAL_DEGREE_ID = I.EVAL_DEGREE_ID
                  AND MT.EVAL_USER_GRP_ID = I.EVAL_USER_GRP_ID
                  AND MT.METRIC_GRP_ID = I.METRIC_GRP_ID
                   LEFT OUTER JOIN BSC_METRIC M
                   ON I.YEAR = M.YEAR
                  AND I.METRIC_ID = M.METRIC_ID
                  AND I.ITEM_GBN = '01'
                  AND M.TYPE_ID = '02'
                  AND M.DELETE_DT IS NULL
                   LEFT OUTER JOIN
                   BSC_SC_DEPT SD
                   ON M.YEAR = SD.YEAR
                  AND M.SC_DEPT_ID = SD.SC_DEPT_ID
                   LEFT OUTER JOIN BSC_IPE_ITEM SI
                   ON I.YEAR = SI.YEAR
                  AND I.EVAL_DEGREE_ID = SI.EVAL_DEGREE_ID
                  AND I.METRIC_GRP_ID = SI.METRIC_GRP_ID
                  AND I.ITEM_ID = SI.ITEM_ID
                  AND I.ITEM_GBN = '02'
                   LEFT OUTER JOIN BSC_IPE_EVAL_USER_GRP_METHOD UM
                   ON MT.YEAR = UM.YEAR
                  AND MT.EVAL_DEGREE_ID = UM.EVAL_DEGREE_ID
                  AND MT.EVAL_USER_GRP_ID = UM.EVAL_USER_GRP_ID
                  AND MT.METRIC_GRP_ID = UM.METRIC_GRP_ID
                   LEFT OUTER JOIN BSC_ECM_EVAL_GRADE_CONVERT_TAB EG
                   ON UM.YEAR = EG.YEAR
                  AND UM.EVAL_METHOD_ID = EG.EVAL_METHOD_ID
                   LEFT OUTER JOIN BSC_ECM_EVAL_DEGREE ED
                   ON UM.YEAR = ED.YEAR
                  AND UM.OLD_DEGREE_REFL_ID = ED.EVAL_DEGREE_ID
                   LEFT OUTER JOIN BSC_ECM_EVAL_DEGREE ED2
                   ON MT.YEAR = ED2.YEAR
                  AND MT.EVAL_DEGREE_ID = ED2.EVAL_DEGREE_ID
            )
         WHERE 1=1
         <dynamic prepend="AND">
            <isNotEmpty property="findEvalDegreeId">
            EVAL_DEGREE_ID = #findEvalDegreeId#
             </isNotEmpty>
         </dynamic>
         <dynamic prepend="AND">
            <isNotEmpty property="findEvalUserGrpId">
            EVAL_USER_GRP_ID = #findEvalUserGrpId#
            </isNotEmpty>
         </dynamic>
         <dynamic prepend="AND">
            <isNotEmpty property="findMappingYn">
            MAPPING_YN = #findMappingYn#
            </isNotEmpty>
         </dynamic>
         ORDER BY UG_SORT_ORDER NULLS LAST, EVAL_USER_GRP_ID
                , IS_MAPPING_YN NULLS LAST, METRIC_GRP_ID
                , SEQ
	</select>


	<!--
	==================================================================
	  # 설명	: 평가단별 지표/항목 매핑 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_IPE_EVAL_USER_GRP_ITEM
	==================================================================
	-->
	<select id="getMappingList" parameterClass="hashMap" resultClass="hashMap">
	SELECT SS.YEAR
	     , SS.EVAL_DEGREE_ID
	     , SS.EVAL_USER_GRP_ID
	     , SS.METRIC_GRP_ID, SS.METRIC_GRP_NM
	     , SS.EVAL_GBN
	     , SS.ITEM_ID, SS.ITEM_NM
	     , CASE WHEN SD.SEQ IS NULL THEN 'N' ELSE 'Y' END AS IS_EVAL_YN
	     , COUNT(SS.ITEM_ID) OVER(PARTITION BY SS.YEAR, SS.EVAL_DEGREE_ID, SS.EVAL_USER_GRP_ID, SS.METRIC_GRP_ID) AS ROW_CNT
	     , ROW_NUMBER() OVER(PARTITION BY SS.YEAR, SS.EVAL_DEGREE_ID, SS.EVAL_USER_GRP_ID, SS.METRIC_GRP_ID
	                               ORDER BY SS.SORT_ORDER NULLS LAST, SS.ITEM_ID) AS ROW_IDX
	     , SD.SEQ, SS.SORT_ORDER
	  FROM
	    (SELECT '01' AS EVAL_GBN
	         , MG.YEAR, #evalDegreeId# AS EVAL_DEGREE_ID
	         , #evalUserGrpId# AS EVAL_USER_GRP_ID
	         , MG.METRIC_GRP_ID, MG.METRIC_GRP_NM
	         , M.METRIC_ID AS ITEM_ID
	         , CASE WHEN M.METRIC_NM IS NULL THEN ''
	                ELSE '[' || SD.SC_DEPT_NM || '] '
	           END || M.METRIC_NM AS ITEM_NM
	         , M.SORT_ORDER
	      FROM BSC_METRIC_GRP MG
	           LEFT OUTER JOIN
	           BSC_METRIC M
	           ON MG.YEAR = M.YEAR
	          AND MG.METRIC_GRP_ID = M.METRIC_GRP_ID
	          AND M.DELETE_DT IS NULL
	           LEFT OUTER JOIN
	           BSC_SC_DEPT SD
	           ON M.YEAR = SD.YEAR
	          AND M.SC_DEPT_ID = SD.SC_DEPT_ID
	     WHERE 1=1
	       AND MG.YEAR = #year#
	       AND MG.METRIC_GRP_ID = #metricGrpId#
	       AND MG.TYPE_ID = '02'
	       AND MG.DELETE_DT IS NULL
	       AND '01' = #evalTarget#
	    UNION ALL
	    SELECT '02' AS EVAL_GBN
	         , MG.YEAR, I.EVAL_DEGREE_ID
	         , #evalUserGrpId# AS EVAL_USER_GRP_ID
	         , MG.METRIC_GRP_ID, MG.METRIC_GRP_NM
	         , I.ITEM_ID, I.ITEM_NM, I.SORT_ORDER
	      FROM BSC_METRIC_GRP MG
	           LEFT OUTER JOIN
	           BSC_IPE_ITEM I
	           ON MG.YEAR = I.YEAR
	          AND MG.METRIC_GRP_ID = I.METRIC_GRP_ID
	     WHERE 1=1
	       AND MG.YEAR = #year#
	       AND MG.METRIC_GRP_ID = #metricGrpId#
	       AND MG.TYPE_ID = '02'
	       AND I.EVAL_DEGREE_ID = #evalDegreeId#
	       AND '02' = #evalTarget#
	    ) SS
	    LEFT OUTER JOIN BSC_IPE_EVAL_USER_GRP_ITEM SD
	    ON SS.YEAR = SD.YEAR
	   AND SS.EVAL_DEGREE_ID = SD.EVAL_DEGREE_ID
	   AND SS.EVAL_USER_GRP_ID = SD.EVAL_USER_GRP_ID
	   AND SS.METRIC_GRP_ID = SD.METRIC_GRP_ID
	   AND SS.EVAL_GBN = SD.ITEM_GBN
	   AND SS.ITEM_ID = CASE WHEN SS.EVAL_GBN = '01' THEN SD.METRIC_ID ELSE SD.ITEM_ID END
	 WHERE 1=1
	 ORDER BY SS.SORT_ORDER NULLS LAST, ITEM_ID
	</select>


	<!--
	==================================================================
	  # 설명	: 평가단별 지표/항목 매핑 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_IPE_EVAL_USER_GRP_ITEM
	==================================================================
	-->
	<select id="existDifferentMappingList" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT CASE WHEN COUNT(ITEM_GBN) > 0 THEN 'Y' ELSE 'N' END AS EXIST_YN
		  FROM BSC_IPE_EVAL_USER_GRP_ITEM
		 WHERE 1=1
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND EVAL_USER_GRP_ID = #evalUserGrpId#
		   AND METRIC_GRP_ID = #metricGrpId#
		   AND ITEM_GBN = (CASE WHEN #evalTarget# = '01' THEN '02' ELSE '01' END)
	</select>

	<!--
	==================================================================
	  # 설명	: 평가단별 지표/항목 매핑 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_IPE_EVAL_USER_GRP_ITEM
	==================================================================
	-->
	<select id="getEvalDegreeList" parameterClass="hashMap" resultClass="hashMap">
		SELECT EVAL_DEGREE_ID, EVAL_DEGREE_NM
		  FROM BSC_ECM_EVAL_DEGREE
		 WHERE 1=1
		   AND YEAR = #findYear#
		 ORDER BY MON
	</select>


	<!--
	==================================================================
	  # 설명	: 평가단별 지표/항목 매핑 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_IPE_EVAL_USER_GRP_ITEM
	==================================================================
	-->
	<select id="getEvalUserGrpList" parameterClass="hashMap" resultClass="hashMap">
		SELECT EVAL_USER_GRP_ID, EVAL_USER_GRP_NM
		  FROM BSC_IPE_EVAL_USER_GRP
		 WHERE 1=1
		   AND YEAR = #findYear#
		 ORDER BY SORT_ORDER NULLS LAST, EVAL_USER_GRP_ID
	</select>



	<!--
	==================================================================
	  # 설명	: 평가단,평가대상지표POOL별 평가방법 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_GRADE_CONVERT_TAB
	==================================================================
	-->
	<select id="getEvalMethodList" parameterClass="hashMap" resultClass="hashMap">
		SELECT EVAL_METHOD_ID, EVAL_METHOD_NM
		  FROM BSC_ECM_EVAL_GRADE_CONVERT_TAB
		 WHERE 1=1
		   AND YEAR = #year#
		   AND DELETE_DT IS NULL
		 ORDER BY EVAL_METHOD_ID
	</select>


	<!--
	==================================================================
	  # 설명	: 평가단,평가대상지표POOL별 이전차수반영  보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_GRADE_CONVERT_TAB
	==================================================================
	-->
	<select id="getOldDegreeReflList" parameterClass="hashMap" resultClass="hashMap">
		SELECT EVAL_DEGREE_ID, EVAL_DEGREE_NM
		  FROM BSC_ECM_EVAL_DEGREE
		 WHERE 1=1
		   AND YEAR = #year#
		   AND MON <![CDATA[ <  ]]>( SELECT NVL(MAX(MON),'13')
		                 FROM BSC_ECM_EVAL_DEGREE
		                WHERE YEAR = #year# AND EVAL_DEGREE_ID = #evalDegreeId# )
		 ORDER BY MON NULLS LAST, EVAL_DEGREE_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 평가단별 지표/항목 매핑 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_IPE_EVAL_USER_GRP_METHOD
	==================================================================
	-->
	<select id="getMethodDetail" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID, METRIC_GRP_ID, EVAL_METHOD_ID
		     , EVAL_METHOD_GBN_ID, OLD_DEGREE_REFL_ID, CREATE_DT
		  FROM BSC_IPE_EVAL_USER_GRP_METHOD
		 WHERE 1=1
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND EVAL_USER_GRP_ID = #evalUserGrpId#
		   AND METRIC_GRP_ID = #metricGrpId#
	</select>

	<!--
	==================================================================
	  # 설명	: 평가단,평가대상지표POOL별 지표/항목 매핑 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_IPE_EVAL_USER_GRP_ITEM
	==================================================================
	-->
	<insert id="insertMappingData" parameterClass="hashMap">
		<selectKey resultClass="java.lang.String" keyProperty="SEQ" >
			SELECT NVL( MAX(SEQ) , 0 ) + 1 AS SEQ
			  FROM BSC_IPE_EVAL_USER_GRP_ITEM
			 WHERE 1=1
			   AND YEAR = #year#
		   	   AND EVAL_DEGREE_ID = #evalDegreeId#
		   	   AND EVAL_USER_GRP_ID = #evalUserGrpId#
		   	   AND METRIC_GRP_ID = #metricGrpId#
		</selectKey>
		INSERT INTO  BSC_IPE_EVAL_USER_GRP_ITEM
			 (YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID, METRIC_GRP_ID, SEQ, ITEM_GBN, METRIC_ID, ITEM_ID, CREATE_DT
			 ) VALUES
			 ( #year#, #evalDegreeId#, #evalUserGrpId#, #metricGrpId#, #SEQ#, #evalTarget#, #metricId#, #itemId#, SYSDATE
			 )
	</insert>


	<!--
	==================================================================
	  # 설명	: 평가단,평가대상지표POOL별 지표/항목 매핑 삭제
	  #	기능	: UPDATE
	  #	TABLE	: BSC_IPE_EVAL_USER_GRP_ITEM
	==================================================================
	-->
	<update id="deleteMappingData" parameterClass="hashMap">
		DELETE FROM BSC_IPE_EVAL_USER_GRP_ITEM
		 WHERE 1 = 1
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND EVAL_USER_GRP_ID = #evalUserGrpId#
		   AND METRIC_GRP_ID = #metricGrpId#
	</update>


	<!--
	==================================================================
	  # 설명	: 평가단,평가대상지표POOL별 평가방법 등록
	  #	기능	: UPDATE
	  #	TABLE	: BSC_IPE_EVAL_USER_GRP_METHOD
	==================================================================
	-->
	<insert id="insertMethodData" parameterClass="hashMap">
		<selectKey resultClass="java.lang.String" keyProperty="EVAL_METHOD_GBN_ID" >
			SELECT EVAL_METHOD_GBN_ID
			  FROM BSC_ECM_EVAL_GRADE_CONVERT_TAB
			 WHERE 1=1
			   AND YEAR = #year#
			   AND EVAL_METHOD_ID = #evalMethodId#
			   AND DELETE_DT IS NULL
		</selectKey>
		INSERT INTO BSC_IPE_EVAL_USER_GRP_METHOD
			( YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID, METRIC_GRP_ID
			, EVAL_METHOD_ID, EVAL_METHOD_GBN_ID, OLD_DEGREE_REFL_ID, CREATE_DT
			 ) VALUES
			 ( #year#, #evalDegreeId#, #evalUserGrpId#, #metricGrpId#
			 , #evalMethodId#, #EVAL_METHOD_GBN_ID#, #oldDegreeReflId#, SYSDATE
			 )
	</insert>

	<!--
	==================================================================
	  # 설명	: 평가단,평가대상지표POOL별 평가방법 삭제
	  #	기능	: UPDATE
	  #	TABLE	: BSC_IPE_EVAL_USER_GRP_METHOD
	==================================================================
	-->
	<update id="deleteMethodData" parameterClass="hashMap">
		DELETE FROM BSC_IPE_EVAL_USER_GRP_METHOD
		 WHERE 1 = 1
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND EVAL_USER_GRP_ID = #evalUserGrpId#
		   AND METRIC_GRP_ID = #metricGrpId#
	</update>


</sqlMap>


