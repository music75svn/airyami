<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="bsc.matrix.matrixEval">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: 
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />
	 

	<!--
	==================================================================   
	  # 설명	: 평가실시 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: 
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
	SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_GRP_NM, EVAL_USER_ID
         , F_CODE_NM('142', POOL_GUBUN, YEAR) POOL_GUBUN_NM
         , METRIC_GRP_ID, METRIC_GRP_NM
         , STRATEGY_ID, STRATEGY_NM
         , EVAL_CNT, ITEM_CNT, TOTAL_SCORE, EVAL_YN, TOT_METRIC_CNT, EVAL_METRIC_CNT
         , CASE WHEN TOT_METRIC_CNT = EVAL_METRIC_CNT THEN 'Y' ELSE 'N' END AS EVAL_USER_SUBMIT_YN
      FROM 
        (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_GRP_NM, EVAL_USER_ID
             , METRIC_GRP_ID, METRIC_GRP_NM
             , STRATEGY_ID, STRATEGY_NM
             , POOL_GUBUN
             , EVAL_SCORE_FALG AS EVAL_CNT
             , ITEM_FALG AS ITEM_CNT
             , CASE WHEN EVAL_SCORE_FALG = ITEM_FALG THEN ROUND(TOTAL_SCORE, 1) ELSE NULL END AS TOTAL_SCORE
             , CASE WHEN EVAL_SCORE_FALG = ITEM_FALG THEN 'Y' ELSE 'N' END AS EVAL_YN
             ,SUM(1) OVER(PARTITION BY NULL) AS TOT_METRIC_CNT
             ,SUM(CASE WHEN EVAL_SCORE_FALG = ITEM_FALG THEN 1 ELSE 0 END) OVER(PARTITION BY NULL) AS EVAL_METRIC_CNT
          FROM 
            (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_GRP_NM, EVAL_USER_ID
            	 , METRIC_GRP_ID, METRIC_GRP_NM
            	 , STRATEGY_ID, STRATEGY_NM
            	 , POOL_GUBUN
                 , MAX(EVAL_SCORE_FALG) AS EVAL_SCORE_FALG
                 , MAX(ITEM_FALG) AS ITEM_FALG
                 , MAX(CASE WHEN ITEM_ID = 'ALL_TOTAL' THEN EVAL_SCORE ELSE NULL END) AS TOTAL_SCORE
              FROM     
                (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_GRP_NM, EVAL_USER_ID
                     , METRIC_GRP_ID, METRIC_GRP_NM 
                     , STRATEGY_ID, STRATEGY_NM
                     , POOL_GUBUN
                     , ITEM_GRP_ID, ITEM_ID
                     , ITEM_GRP_SORT_ORDER, ITEM_SORT_ORDER
                     , ITEM_FALG
                     , EVAL_SCORE
                     , EVAL_SCORE_FALG
                     , DENSE_RANK() OVER(PARTITION BY YEAR, METRIC_GRP_ID ORDER BY ITEM_GRP_SORT_ORDER, ITEM_GRP_ID ) AS ITEM_GRP_SEQ
                     , DENSE_RANK() OVER(PARTITION BY YEAR, METRIC_GRP_ID, ITEM_GRP_ID ORDER BY ITEM_GRP_SORT_ORDER, ITEM_SORT_ORDER, ITEM_ID) AS ITEM_SEQ
                  FROM     
                    (SELECT E.YEAR, E.EVAL_USER_GRP_ID, E.EVAL_USER_GRP_NM, E.EVAL_USER_ID
                         , E.METRIC_GRP_ID, E.METRIC_GRP_NM 
                         , E.STRATEGY_ID, E.STRATEGY_NM  
                         , E.POOL_GUBUN
                         , NVL(E.ITEM_GRP_ID, 'TOTAL') AS ITEM_GRP_ID
                         , NVL(E.ITEM_ID, NVL(E.ITEM_GRP_ID,'ALL')||'_TOTAL') AS ITEM_ID
                         , SUM(CASE WHEN E.ITEM_ID IS NULL THEN 0 ELSE 1 END) AS ITEM_FALG
                         , MAX(CASE WHEN E.ITEM_GRP_ID IS NULL THEN 99999 ELSE E.ITEM_GRP_SORT_ORDER END) AS ITEM_GRP_SORT_ORDER
                         , MAX(CASE WHEN E.ITEM_ID IS NULL THEN 99999 ELSE E.ITEM_SORT_ORDER END) AS ITEM_SORT_ORDER
                         , CASE WHEN COUNT( E.ITEM_ID ) = 0 THEN 0 ELSE SUM( ER.EVAL_SCORE * E.WEIGHT / 100 ) END AS EVAL_SCORE
                         , SUM(CASE WHEN ER.EVAL_SCORE IS NULL THEN 0 ELSE 1 END) AS EVAL_SCORE_FALG
                      FROM 
                        (SELECT EV.YEAR, EV.EVAL_USER_GRP_ID, EV.EVAL_USER_GRP_NM, EV.EVAL_USER_ID
                              , EV.METRIC_GRP_ID, EV.METRIC_GRP_NM
                              , EV.STRATEGY_ID, EV.STRATEGY_NM  
                              , EV.POOL_GUBUN
                              , IT.ITEM_GRP_ID, IT.ITEM_ID, IT.WEIGHT
                              , IT.ITEM_GRP_SORT_ORDER, IT.ITEM_SORT_ORDER
                          FROM 
                            (SELECT EU.YEAR, EU.EVAL_USER_GRP_ID, EG.EVAL_USER_GRP_NM, EU.EVAL_USER_ID
                                 , EM.METRIC_GRP_ID, EM.METRIC_GRP_NM
                                 , EM.STRATEGY_ID, EM.STRATEGY_NM  
                                 , EM.POOL_GUBUN
                              FROM    
                                (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_ID
                                  FROM BSC_MAT_EVAL_USER
                                 WHERE 1=1
                                   AND YEAR = #findYear#
                                   AND EVAL_USER_ID = #findEvalUserId#
                                   AND EVAL_USER_GRP_ID = #findEvalUserGrpId#
                                ) EU   
                                LEFT OUTER JOIN
                                (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_GRP_NM
                                  FROM BSC_MAT_EVAL_USER_GRP
                                 WHERE 1=1
                                   AND YEAR = #findYear#
                                ) EG
                                ON EU.YEAR = EG. YEAR
                               AND EU.EVAL_USER_GRP_ID = EG.EVAL_USER_GRP_ID
                                INNER JOIN    
                                (SELECT MM.YEAR, MM.EVAL_USER_GRP_ID, MM.METRIC_GRP_ID, MG.METRIC_GRP_NM 
                                      , MG.STRATEGY_ID, ST.STRATEGY_NM
                                      , MG.POOL_GUBUN
                                  FROM    
                                    (SELECT YEAR, EVAL_USER_GRP_ID, METRIC_GRP_ID
                                      FROM BSC_MAT_EVAL_MAPPING
                                     WHERE 1=1
                                       AND YEAR = #findYear#   
                                    ) MM
                                    LEFT OUTER JOIN 
                                    (SELECT YEAR, METRIC_GRP_ID, METRIC_GRP_NM, STRATEGY_ID, POOL_GUBUN
                                      FROM BSC_METRIC_GRP
                                     WHERE 1=1
                                       AND YEAR = #findYear#   
                                    ) MG
                                    ON MM.YEAR = MG.YEAR
                                   AND MM.METRIC_GRP_ID = MG.METRIC_GRP_ID
                                    LEFT OUTER JOIN 
                                    BSC_STRATEGY ST
                                    ON MG.YEAR = ST.YEAR
                                   AND MG.STRATEGY_ID = ST.STRATEGY_ID 
                                ) EM
                                ON EU.YEAR = EM.YEAR
                               AND EU.EVAL_USER_GRP_ID = EM.EVAL_USER_GRP_ID
                            ) EV
                            LEFT OUTER JOIN    
                            (SELECT YEAR, ITEM_GRP_ID, ITEM_GRP_NM, ITEM_ID, ITEM_NM, WEIGHT
                                  , ITEM_GRP_SORT_ORDER, ITEM_SORT_ORDER
                              FROM 
                                (SELECT IG.YEAR, IG.ITEM_GRP_ID, IG.ITEM_GRP_NM, II.ITEM_ID, II.ITEM_NM, II.WEIGHT
                                      , IG.SORT_ORDER AS ITEM_GRP_SORT_ORDER, II.SORT_ORDER AS ITEM_SORT_ORDER   
                                  FROM 
                                    (SELECT YEAR, ITEM_GRP_ID, ITEM_GRP_NM, SORT_ORDER
                                      FROM BSC_MAT_ITEM_GRP
                                     WHERE 1=1
                                       AND YEAR = #findYear#
                                    ) IG
                                    INNER JOIN
                                    (SELECT YEAR, ITEM_GRP_ID, ITEM_ID, ITEM_NM, WEIGHT, SORT_ORDER
                                      FROM BSC_MAT_ITEM
                                     WHERE 1=1
                                       AND YEAR = #findYear#
                                    ) II
                                    ON IG.YEAR = II.YEAR
                                   AND IG.ITEM_GRP_ID = II.ITEM_GRP_ID
                                ) 
                            ) IT    
                            ON EV.YEAR = IT.YEAR
                        ) E
                        LEFT OUTER JOIN
                        (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_ID, METRIC_GRP_ID, ITEM_ID, EVAL_SCORE
                          FROM BSC_MAT_EVAL
                         WHERE 1=1
                           AND YEAR = #findYear# 
                        ) ER
                        ON E.YEAR = ER.YEAR
                       AND E.EVAL_USER_GRP_ID = ER.EVAL_USER_GRP_ID
                       AND E.EVAL_USER_ID = ER.EVAL_USER_ID
                       AND E.METRIC_GRP_ID = ER.METRIC_GRP_ID
                       AND E.ITEM_ID = ER.ITEM_ID
                     GROUP BY E.YEAR, E.EVAL_USER_GRP_ID, E.EVAL_USER_GRP_NM, E.EVAL_USER_ID 
                            , E.METRIC_GRP_ID, E.METRIC_GRP_NM
                            , E.STRATEGY_ID, E.STRATEGY_NM  
                            , E.POOL_GUBUN
                            , ROLLUP( E.ITEM_GRP_ID, E.ITEM_ID)
                    )   
                )
             GROUP BY YEAR, EVAL_USER_GRP_ID, EVAL_USER_GRP_NM, EVAL_USER_ID
                    , METRIC_GRP_ID, METRIC_GRP_NM, STRATEGY_ID, STRATEGY_NM, POOL_GUBUN
            )
        ) 
     WHERE 1=1
     	<dynamic prepend="AND">
        	<isNotEmpty property="findStrategyId">
            STRATEGY_ID = #findStrategyId#
            </isNotEmpty>
        </dynamic>     
     ORDER BY TOTAL_SCORE DESC NULLS FIRST, EVAL_CNT DESC, METRIC_GRP_ID
 
	</select>
	
	
	
	<!--
	==================================================================   
	  # 설명	: 평가항목 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: 
	==================================================================
	-->
	<select id="getItemList" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR
		     , NVL(ITEM_GRP_ID, 'TOTAL') AS ITEM_GRP_ID, ITEM_GRP_NM, IG_SORT_ORDER
		     , NVL(ITEM_ID, NVL(ITEM_GRP_ID,'ALL')||'_TOTAL')  AS ITEM_ID, ITEM_NM, II_SORT_ORDER
		     , DENSE_RANK() OVER(PARTITION BY YEAR ORDER BY IG_SORT_ORDER, ITEM_GRP_ID) AS ITEM_GRP_SEQ
		     , DENSE_RANK() OVER(PARTITION BY YEAR, ITEM_GRP_ID ORDER BY NVL(II_SORT_ORDER, 99999) , ITEM_ID ) AS ITEM_SEQ
		     , SUM( 1 ) OVER (PARTITION BY YEAR, ITEM_GRP_ID ) AS ITEM_GRP_CNT
		     , CASE WHEN ITEM_GRP_ID IS NOT NULL AND ITEM_ID IS NULL THEN ITEM_GRP_WEIGHT
              		WHEN ITEM_GRP_ID IS NULL THEN SUM(ITEM_WEIGHT) OVER(PARTITION BY YEAR) 
		     		ELSE ITEM_WEIGHT
		       END AS ITEM_WEIGHT
		     , ITEM_GRP_WEIGHT, ITEM_ALL_WEIGHT
		  FROM 
		    (SELECT IL.YEAR
		         , IL.ITEM_GRP_ID
		         , CASE WHEN IL.ITEM_GRP_ID IS NOT NULL AND IL.ITEM_ID IS NULL THEN IG.ITEM_GRP_NM 
		                WHEN IL.ITEM_GRP_ID IS NULL THEN 'ALL'
		                ELSE IG.ITEM_GRP_NM 
		           END AS ITEM_GRP_NM
		         , IG.SORT_ORDER AS IG_SORT_ORDER
		         , IL.ITEM_ID
		         , CASE WHEN IL.ITEM_GRP_ID IS NOT NULL AND IL.ITEM_ID IS NULL THEN 'TOTAL' 
		                WHEN IL.ITEM_GRP_ID IS NULL THEN 'TOTAL'
		                ELSE II.ITEM_NM 
		           END AS ITEM_NM
		         , NVL(II.SORT_ORDER, 99999) AS II_SORT_ORDER
		         , II.WEIGHT AS ITEM_WEIGHT
                 , SUM(II.WEIGHT) OVER(PARTITION BY IG.YEAR, IG.ITEM_GRP_ID, IG.ITEM_GRP_NM) AS ITEM_GRP_WEIGHT
                 , SUM(II.WEIGHT) OVER(PARTITION BY IG.YEAR) AS ITEM_ALL_WEIGHT  
		      FROM 
		        (SELECT IG.YEAR, IG.ITEM_GRP_ID, II.ITEM_ID
		          FROM 
		            (SELECT YEAR, ITEM_GRP_ID, ITEM_GRP_NM, SORT_ORDER
		              FROM BSC_MAT_ITEM_GRP
		             WHERE 1=1
		               AND YEAR = #popupYear#
		            ) IG
		            INNER JOIN
		            (SELECT YEAR, ITEM_GRP_ID, ITEM_ID, ITEM_NM, SORT_ORDER
		              FROM BSC_MAT_ITEM
		             WHERE 1=1
		               AND YEAR = #popupYear#
		            ) II
		            ON IG.YEAR = II.YEAR
		           AND IG.ITEM_GRP_ID = II.ITEM_GRP_ID
		         GROUP BY IG.YEAR, ROLLUP(IG.ITEM_GRP_ID, II.ITEM_ID)
		        ) IL
		        LEFT OUTER JOIN
		        (SELECT YEAR, ITEM_GRP_ID, ITEM_GRP_NM, SORT_ORDER
		              FROM BSC_MAT_ITEM_GRP
		             WHERE 1=1
		               AND YEAR = #popupYear#
		        ) IG
		        ON IL.YEAR = IG.YEAR
		       AND IL.ITEM_GRP_ID = IG.ITEM_GRP_ID
		        LEFT OUTER JOIN
		        (SELECT YEAR, ITEM_ID, ITEM_NM, SORT_ORDER, WEIGHT
		              FROM BSC_MAT_ITEM
		             WHERE 1=1
		               AND YEAR = #popupYear#
		        ) II
		        ON IL.YEAR = II.YEAR
		       AND IL.ITEM_ID = II.ITEM_ID
		    )           
		 ORDER BY ITEM_GRP_SEQ , ITEM_SEQ
 
	</select>
	
	
	
	
	
	<!--
	==================================================================   
	  # 설명	: 평가년도 목록
	  #	기능	: SELECT
	  #	TABLE	: BSC_MAT_IN_TERM
	==================================================================
	-->
	<select id="getEvalTermList" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR                  
			 , YEAR AS YEAR_NM
			 , START_DT         
			 , END_DT           
		  FROM BSC_MAT_IN_TERM 
		 ORDER BY YEAR DESC 	      
	</select>
	
	
	<!--
	==================================================================   
	  # 설명	: 평가자 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_MAT_EVAL_USER
	==================================================================
	-->
	<select id="getEvalUserList" parameterClass="hashMap" resultClass="hashMap">
		SELECT
		       EU.EVAL_USER_ID  
		     , U.USER_NM AS EVAL_USER_NM
		  FROM BSC_MAT_EVAL_USER EU
		       LEFT OUTER JOIN 
		       V_ROLE_USER U
		       ON EU.EVAL_USER_ID = U.USER_ID
		 WHERE 1=1       
		   AND EU.YEAR = #findYear#
		 GROUP BY EU.EVAL_USER_ID, U.USER_NM
		 ORDER BY U.USER_NM
	</select>
	
	
	
	<!--
	==================================================================   
	  # 설명	: 평가단 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_MAT_EVAL_USER_GRP
	==================================================================
	-->
	<select id="getEvalUserGrpList" parameterClass="hashMap" resultClass="hashMap">
		SELECT
			   EU.EVAL_USER_GRP_ID
			 , EG.EVAL_USER_GRP_NM  
		  FROM BSC_MAT_EVAL_USER EU
		       LEFT OUTER JOIN 
		       BSC_MAT_EVAL_USER_GRP EG
		       ON EU.YEAR = EG.YEAR
		      AND EU.EVAL_USER_GRP_ID = EG.EVAL_USER_GRP_ID
		 WHERE 1=1
		   AND EU.YEAR = #findYear#
		   AND EU.EVAL_USER_ID = #findEvalUserId#   
		 GROUP BY EU.EVAL_USER_GRP_ID, EG.EVAL_USER_GRP_NM, EG.SORT_ORDER 
		 ORDER BY EG.SORT_ORDER   
 
	</select>
	
	
	<!--
	==================================================================   
	  # 설명	: 전략과제 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_STRATEGY
	==================================================================
	-->
	<select id="getStrategyList" parameterClass="hashMap" resultClass="hashMap">
      SELECT EM.STRATEGY_ID, EM.STRATEGY_NM  
		  FROM    
		    (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_ID
		      FROM BSC_MAT_EVAL_USER
		     WHERE 1=1
		       AND YEAR = #findYear#
		       AND EVAL_USER_ID = #findEvalUserId#
		       AND EVAL_USER_GRP_ID = #findEvalUserGrpId#
		    ) EU   
		    INNER JOIN
		    (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_GRP_NM
		      FROM BSC_MAT_EVAL_USER_GRP
		     WHERE 1=1
		       AND YEAR = #findYear#
		    ) EG
		    ON EU.YEAR = EG. YEAR
		   AND EU.EVAL_USER_GRP_ID = EG.EVAL_USER_GRP_ID
		    INNER JOIN    
		    (SELECT MM.YEAR, MM.EVAL_USER_GRP_ID, MM.METRIC_GRP_ID, MG.METRIC_GRP_NM 
		          , MG.STRATEGY_ID, ST.STRATEGY_NM
		      FROM    
		        (SELECT YEAR, EVAL_USER_GRP_ID, METRIC_GRP_ID
		          FROM BSC_MAT_EVAL_MAPPING
		         WHERE 1=1
		           AND YEAR = #findYear#   
		        ) MM
		        LEFT OUTER JOIN 
		        (SELECT YEAR, METRIC_GRP_ID, METRIC_GRP_NM, STRATEGY_ID
		          FROM BSC_METRIC_GRP
		         WHERE 1=1
		           AND YEAR = #findYear#   
		        ) MG
		        ON MM.YEAR = MG.YEAR
		       AND MM.METRIC_GRP_ID = MG.METRIC_GRP_ID
		        LEFT OUTER JOIN 
		        BSC_STRATEGY ST
		        ON MG.YEAR = ST.YEAR
		       AND MG.STRATEGY_ID = ST.STRATEGY_ID 
		    ) EM
		    ON EU.YEAR = EM.YEAR
		   AND EU.EVAL_USER_GRP_ID = EM.EVAL_USER_GRP_ID
		WHERE 1=1
		  AND EM.STRATEGY_ID IS NOT NULL
		GROUP BY EM.STRATEGY_ID, EM.STRATEGY_NM  
		ORDER BY EM.STRATEGY_ID
	</select>	
	
	<!--
	==================================================================   
	  # 설명	: 평가일정 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_MAT_IN_TERM
	==================================================================
	-->
	<select id="getEvalTerm" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR                  
			 , TO_CHAR(TO_DATE(START_DT, 'YYYYMMDD'), 'YYYY.MM.DD') AS START_DT         
			 , TO_CHAR(TO_DATE(END_DT, 'YYYYMMDD'), 'YYYY.MM.DD') AS END_DT
			 , CASE WHEN TO_CHAR( SYSDATE , 'YYYYMMDD') BETWEEN  START_DT AND END_DT THEN 'Y' ELSE 'N' END AS EVAL_TERM_YN   
		  FROM BSC_MAT_IN_TERM 
		 WHERE YEAR = #findYear#	      
	</select>

	
	<!--
	==================================================================   
	  # 설명	: 평가항목 점수 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_MAT_ITEM_SCORE
	==================================================================
	-->
	<select id="getItemScore" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR, MAX_SCORE, MIN_SCORE
		  FROM BSC_MAT_ITEM_SCORE
		 WHERE 1=1
		   AND YEAR = #findYear#
 
	</select>
	
	
	
	<!--
	==================================================================   
	  # 설명	: 평가제출 여부 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_MAT_EVAL_USER
	==================================================================
	-->
	<select id="getEvalSubmitYn" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT NVL(EVAL_SUBMIT_YN, 'N') AS EVAL_SUBMIT_YN
		  FROM BSC_MAT_EVAL_USER
		 WHERE 1=1       
		   AND YEAR = #findYear#
		   AND EVAL_USER_GRP_ID = #findEvalUserGrpId#
		   AND EVAL_USER_ID = #findEvalUserId#
	</select>
	
	
	<!--
	==================================================================   
	  # 설명	: 평가마감 여부 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_MAT_EVAL_USER_GRP
	==================================================================
	-->
	<select id="getEvalClosingYn" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT NVL(EVAL_CLOSING_YN, 'N') AS EVAL_CLOSING_YN
		  FROM BSC_MAT_EVAL_USER_GRP
		 WHERE 1=1       
		   AND YEAR = #findYear#
		   AND EVAL_USER_GRP_ID = #findEvalUserGrpId#
	</select>
	

	<!--
	==================================================================   
	  # 설명	: 평가실시 결과목록 보기
	  #	기능	: SELECT
	  #	TABLE	: 
	==================================================================
	-->
	<select id="getResultList" parameterClass="hashMap" resultClass="hashMap" remapResults="true">
		SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_GRP_NM, EVAL_USER_ID
		    , METRIC_GRP_ID, METRIC_GRP_NM, STRATEGY_ID, STRATEGY_NM
		    , F_CODE_NM('142', POOL_GUBUN, YEAR) POOL_GUBUN_NM
		    , 
         <iterate property="itemIdList" conjunction=",">
              MAX(CASE WHEN ITEM_ID = '$itemIdList[]$' THEN ROUND(EVAL_SCORE, 1) ELSE NULL END) AS $itemIdList[]$
         </iterate>
		    FROM     
		        (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_GRP_NM
		             , EVAL_USER_ID, METRIC_GRP_ID, METRIC_GRP_NM 
		             , STRATEGY_ID, STRATEGY_NM
		             , POOL_GUBUN
		             , ITEM_GRP_ID, ITEM_ID
		             , ITEM_GRP_SORT_ORDER, ITEM_SORT_ORDER
		             , EVAL_SCORE
		             , DENSE_RANK() OVER(PARTITION BY YEAR, METRIC_GRP_ID ORDER BY ITEM_GRP_SORT_ORDER, ITEM_GRP_ID ) AS ITEM_GRP_SEQ
		             , DENSE_RANK() OVER(PARTITION BY YEAR, METRIC_GRP_ID, ITEM_GRP_ID ORDER BY ITEM_GRP_SORT_ORDER, ITEM_SORT_ORDER, ITEM_ID) AS ITEM_SEQ
		          FROM     
		            (SELECT E.YEAR, E.EVAL_USER_GRP_ID, E.EVAL_USER_GRP_NM, E.EVAL_USER_ID
		                 , E.METRIC_GRP_ID, E.METRIC_GRP_NM 
		                 , E.STRATEGY_ID, E.STRATEGY_NM  
		                 , E.POOL_GUBUN
		                 , NVL(E.ITEM_GRP_ID, 'TOTAL') AS ITEM_GRP_ID
		                 , NVL(E.ITEM_ID, NVL(E.ITEM_GRP_ID,'ALL')||'_TOTAL') AS ITEM_ID
		                 , MAX(CASE WHEN E.ITEM_GRP_ID IS NULL THEN 99999 ELSE E.ITEM_GRP_SORT_ORDER END) AS ITEM_GRP_SORT_ORDER
		                 , MAX(CASE WHEN E.ITEM_ID IS NULL THEN 99999 ELSE E.ITEM_SORT_ORDER END) AS ITEM_SORT_ORDER
		                 , CASE WHEN E.ITEM_ID IS NOT NULL THEN SUM( ER.EVAL_SCORE )
				            	ELSE 
						            CASE WHEN COUNT( E.ITEM_ID ) = 0 OR NVL( MAX( E.ITEM_GRP_WEIGHT ) , 0 ) = 0 THEN 0 
						                 ELSE SUM( ER.EVAL_SCORE  * E.ITEM_WEIGHT) /  
						                      CASE WHEN E.ITEM_GRP_ID IS NULL THEN NVL( MAX( E.ITEM_ALL_WEIGHT ) , 0 ) 
						                           ELSE NVL( MAX( E.ITEM_GRP_WEIGHT ) , 0 )
						                      END
						            END   
			               END AS EVAL_SCORE                
			            , SUM(E.ITEM_WEIGHT) AS ITEM_WEIGHT
			            , MAX(E.ITEM_GRP_WEIGHT) AS ITEM_GRP_WEIGHT
			            , MAX(E.ITEM_ALL_WEIGHT) AS ITEM_ALL_WEIGHT
		              FROM 
		                (SELECT EV.YEAR, EV.EVAL_USER_GRP_ID, EV.EVAL_USER_GRP_NM, EV.EVAL_USER_ID
		                      , EV.METRIC_GRP_ID, EV.METRIC_GRP_NM 
		                      , EV.STRATEGY_ID, EV.STRATEGY_NM
		                      , EV.POOL_GUBUN
		                      , IT.ITEM_GRP_ID, IT.ITEM_ID
		                      , IT.ITEM_GRP_SORT_ORDER, IT.ITEM_SORT_ORDER
		                      , IT.ITEM_WEIGHT, IT.ITEM_GRP_WEIGHT, IT.ITEM_ALL_WEIGHT 
		                  FROM 
		                    (SELECT EU.YEAR, EU.EVAL_USER_GRP_ID, EG.EVAL_USER_GRP_NM, EU.EVAL_USER_ID
		                         , EM.METRIC_GRP_ID, EM.METRIC_GRP_NM 
		                         , EM.STRATEGY_ID, EM.STRATEGY_NM  
		                         , EM.POOL_GUBUN
		                      FROM    
		                        (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_ID
		                          FROM BSC_MAT_EVAL_USER
		                         WHERE 1=1
		                           AND YEAR = #popupYear#
		                           AND EVAL_USER_ID = #popupEvalUserId#
		                           AND EVAL_USER_GRP_ID = #popupEvalUserGrpId#
		                        ) EU   
		                        LEFT OUTER JOIN
		                        (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_GRP_NM
		                          FROM BSC_MAT_EVAL_USER_GRP
		                         WHERE 1=1
		                           AND YEAR = #popupYear#
		                        ) EG
		                        ON EU.YEAR = EG. YEAR
		                       AND EU.EVAL_USER_GRP_ID = EG.EVAL_USER_GRP_ID
		                        LEFT OUTER JOIN    
		                        (SELECT MM.YEAR, MM.EVAL_USER_GRP_ID, MM.METRIC_GRP_ID, MG.METRIC_GRP_NM 
		                              , MG.STRATEGY_ID, ST.STRATEGY_NM
		                              , MG.POOL_GUBUN
		                          FROM    
		                            (SELECT YEAR, EVAL_USER_GRP_ID, METRIC_GRP_ID
		                              FROM BSC_MAT_EVAL_MAPPING
		                             WHERE 1=1
		                               AND YEAR = #popupYear#   
		                            ) MM
		                            LEFT OUTER JOIN 
		                            (SELECT YEAR, METRIC_GRP_ID, METRIC_GRP_NM, STRATEGY_ID, POOL_GUBUN 
		                              FROM BSC_METRIC_GRP
		                             WHERE 1=1
		                               AND YEAR = #popupYear#   
		                            ) MG
		                            ON MM.YEAR = MG.YEAR
		                           AND MM.METRIC_GRP_ID = MG.METRIC_GRP_ID
		                            LEFT OUTER JOIN 
		                            BSC_STRATEGY ST
		                            ON MG.YEAR = ST.YEAR
		                           AND MG.STRATEGY_ID = ST.STRATEGY_ID    
		                        ) EM
		                        ON EU.YEAR = EM.YEAR
		                       AND EU.EVAL_USER_GRP_ID = EM.EVAL_USER_GRP_ID
		                    ) EV
		                    LEFT OUTER JOIN    
		                    (SELECT YEAR, ITEM_GRP_ID, ITEM_GRP_NM, ITEM_ID, ITEM_NM
		                          , ITEM_GRP_SORT_ORDER, ITEM_SORT_ORDER
		                          , ITEM_WEIGHT, ITEM_GRP_WEIGHT, ITEM_ALL_WEIGHT 
		                      FROM 
		                        (SELECT IG.YEAR, IG.ITEM_GRP_ID, IG.ITEM_GRP_NM, II.ITEM_ID, II.ITEM_NM
		                              , IG.SORT_ORDER AS ITEM_GRP_SORT_ORDER, II.SORT_ORDER AS ITEM_SORT_ORDER
		                              , II.WEIGHT AS ITEM_WEIGHT
                                      , SUM(II.WEIGHT) OVER(PARTITION BY IG.YEAR, IG.ITEM_GRP_ID, IG.ITEM_GRP_NM) AS ITEM_GRP_WEIGHT
                                      , SUM(II.WEIGHT) OVER(PARTITION BY IG.YEAR) AS ITEM_ALL_WEIGHT   
		                          FROM 
		                            (SELECT YEAR, ITEM_GRP_ID, ITEM_GRP_NM, SORT_ORDER
		                              FROM BSC_MAT_ITEM_GRP
		                             WHERE 1=1
		                               AND YEAR = #popupYear#
		                            ) IG
		                            INNER JOIN
		                            (SELECT YEAR, ITEM_GRP_ID, ITEM_ID, ITEM_NM, WEIGHT, SORT_ORDER
		                              FROM BSC_MAT_ITEM
		                             WHERE 1=1
		                               AND YEAR = #popupYear#
		                            ) II
		                            ON IG.YEAR = II.YEAR
		                           AND IG.ITEM_GRP_ID = II.ITEM_GRP_ID
		                        ) 
		                    ) IT    
		                    ON EV.YEAR = IT.YEAR
		                ) E
		                LEFT OUTER JOIN
		                (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_ID, METRIC_GRP_ID, ITEM_ID, EVAL_SCORE
		                  FROM BSC_MAT_EVAL
		                 WHERE 1=1
		                   AND YEAR = #popupYear# 
		                ) ER
		                ON E.YEAR = ER.YEAR
		               AND E.EVAL_USER_GRP_ID = ER.EVAL_USER_GRP_ID
		               AND E.EVAL_USER_ID = ER.EVAL_USER_ID
		               AND E.METRIC_GRP_ID = ER.METRIC_GRP_ID
		               AND E.ITEM_ID = ER.ITEM_ID
		             GROUP BY E.YEAR, E.EVAL_USER_GRP_ID, E.EVAL_USER_GRP_NM, E.EVAL_USER_ID 
		                    , E.METRIC_GRP_ID, E.METRIC_GRP_NM 
		                    , E.STRATEGY_ID, E.STRATEGY_NM  
		                    , E.POOL_GUBUN
		                    , ROLLUP( E.ITEM_GRP_ID, E.ITEM_ID)
		            )   
		        )
		 GROUP BY YEAR, EVAL_USER_GRP_ID, EVAL_USER_GRP_NM, EVAL_USER_ID
		        , METRIC_GRP_ID, METRIC_GRP_NM, STRATEGY_ID, STRATEGY_NM, POOL_GUBUN
		 ORDER BY ALL_TOTAL DESC NULLS LAST, METRIC_GRP_ID
	</select>	



	
	<!--
	==================================================================   
	  # 설명	: 평가실시 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: 
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
		SELECT D.YEAR, D.EVAL_USER_GRP_ID, D.EVAL_USER_GRP_NM, D.EVAL_USER_ID
	         , D.METRIC_GRP_ID, D.METRIC_GRP_NM 
	         , D.ITEM_GRP_ID, D.ITEM_ID
	         , NVL(IG.ITEM_GRP_NM, 'TOTAL') AS ITEM_GRP_NM
	         , NVL(IT.ITEM_NM, 'TOTAL') AS ITEM_NM
	         , ROUND( D.EVAL_SCORE, 1) AS EVAL_SCORE
	         , COUNT(D.ITEM_GRP_ID) OVER(PARTITION BY D.ITEM_GRP_ID) AS ROWSPAN_CNT
	         , D.ITEM_WEIGHT, D.ITEM_GRP_WEIGHT, D.ITEM_ALL_WEIGHT
	  FROM 
	    (SELECT E.YEAR, E.EVAL_USER_GRP_ID, E.EVAL_USER_GRP_NM, E.EVAL_USER_ID
	         , E.METRIC_GRP_ID, E.METRIC_GRP_NM 
	         , NVL(E.ITEM_GRP_ID, 'ALL') AS ITEM_GRP_ID
	         , NVL(E.ITEM_ID, NVL(E.ITEM_GRP_ID,'ALL') ) AS ITEM_ID
	         , CASE WHEN E.ITEM_ID IS NOT NULL THEN SUM( ER.EVAL_SCORE )
	           	    ELSE
			           CASE WHEN COUNT( E.ITEM_ID ) = 0 
			         		  OR ( E.ITEM_GRP_ID IS NULL AND NVL( MAX( E.ITEM_ALL_WEIGHT ) , 0 ) = 0 )
			         		  OR NVL( MAX( E.ITEM_GRP_WEIGHT ) , 0 ) = 0 
				            THEN 0 
		                	ELSE SUM( ER.EVAL_SCORE  * E.ITEM_WEIGHT) /  
				                    CASE WHEN E.ITEM_GRP_ID IS NULL THEN NVL( MAX( E.ITEM_ALL_WEIGHT ) , 0 ) 
				                         ELSE NVL( MAX( E.ITEM_GRP_WEIGHT ) , 0 )
				                    END   
		               END
               END AS EVAL_SCORE 
	         , SUM(E.ITEM_WEIGHT) AS ITEM_WEIGHT
	         , MAX(E.ITEM_GRP_WEIGHT) AS ITEM_GRP_WEIGHT
	         , MAX(E.ITEM_ALL_WEIGHT) AS ITEM_ALL_WEIGHT
	      FROM 
	        (SELECT EV.YEAR, EV.EVAL_USER_GRP_ID, EV.EVAL_USER_GRP_NM, EV.EVAL_USER_ID
	              , EV.METRIC_GRP_ID, EV.METRIC_GRP_NM 
	              , IT.ITEM_GRP_ID, IT.ITEM_ID
	              , IT.ITEM_GRP_SORT_ORDER, IT.ITEM_SORT_ORDER
	              , IT.ITEM_GRP_NM
	              , IT.ITEM_WEIGHT, IT.ITEM_GRP_WEIGHT, IT.ITEM_ALL_WEIGHT
	          FROM 
	            (SELECT EU.YEAR, EU.EVAL_USER_GRP_ID, EG.EVAL_USER_GRP_NM, EU.EVAL_USER_ID
	                 , EM.METRIC_GRP_ID, EM.METRIC_GRP_NM 
	              FROM    
	                (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_ID
	                  FROM BSC_MAT_EVAL_USER
	                 WHERE 1=1
	                   AND YEAR = #findYear#
	                   AND EVAL_USER_ID = #findEvalUserId#
	                   AND EVAL_USER_GRP_ID = #findEvalUserGrpId#
	                ) EU   
	                LEFT OUTER JOIN
	                (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_GRP_NM
	                  FROM BSC_MAT_EVAL_USER_GRP
	                 WHERE 1=1
	                   AND YEAR = #findYear#
	                ) EG
	                ON EU.YEAR = EG. YEAR
	               AND EU.EVAL_USER_GRP_ID = EG.EVAL_USER_GRP_ID
	                INNER JOIN    
	                (SELECT MM.YEAR, MM.EVAL_USER_GRP_ID, MM.METRIC_GRP_ID, MG.METRIC_GRP_NM 
	                  FROM    
	                    (SELECT YEAR, EVAL_USER_GRP_ID, METRIC_GRP_ID
	                      FROM BSC_MAT_EVAL_MAPPING
	                     WHERE 1=1
	                       AND YEAR = #findYear#   
	                       AND METRIC_GRP_ID = #findMetricGrpId#     
	                    ) MM
	                    LEFT OUTER JOIN 
	                    (SELECT YEAR, METRIC_GRP_ID, METRIC_GRP_NM 
	                      FROM BSC_METRIC_GRP
	                     WHERE 1=1
	                       AND YEAR = #findYear#   
	                    ) MG
	                    ON MM.YEAR = MG.YEAR
	                   AND MM.METRIC_GRP_ID = MG.METRIC_GRP_ID
	                ) EM
	                ON EU.YEAR = EM.YEAR
	               AND EU.EVAL_USER_GRP_ID = EM.EVAL_USER_GRP_ID
	            ) EV
	            LEFT OUTER JOIN    
	            (SELECT YEAR, ITEM_GRP_ID, ITEM_GRP_NM, ITEM_ID, ITEM_NM
	                  , ITEM_GRP_SORT_ORDER, ITEM_SORT_ORDER
	                  , ITEM_WEIGHT, ITEM_GRP_WEIGHT, ITEM_ALL_WEIGHT
	              FROM 
	                (SELECT IG.YEAR, IG.ITEM_GRP_ID, IG.ITEM_GRP_NM, II.ITEM_ID, II.ITEM_NM
	                      , IG.SORT_ORDER AS ITEM_GRP_SORT_ORDER, II.SORT_ORDER AS ITEM_SORT_ORDER   
	                      , II.WEIGHT AS ITEM_WEIGHT
	                      , SUM(II.WEIGHT) OVER(PARTITION BY IG.YEAR ,IG.ITEM_GRP_ID ,IG.ITEM_GRP_NM) AS ITEM_GRP_WEIGHT
	                      , SUM(II.WEIGHT) OVER(PARTITION BY IG.YEAR ) AS ITEM_ALL_WEIGHT
	                  FROM 
	                    (SELECT YEAR, ITEM_GRP_ID, ITEM_GRP_NM, SORT_ORDER
	                      FROM BSC_MAT_ITEM_GRP
	                     WHERE 1=1
	                       AND YEAR = #findYear#
	                    ) IG
	                    INNER JOIN
	                    (SELECT YEAR, ITEM_GRP_ID, ITEM_ID, ITEM_NM, SORT_ORDER, WEIGHT
	                      FROM BSC_MAT_ITEM
	                     WHERE 1=1
	                       AND YEAR = #findYear#
	                    ) II
	                    ON IG.YEAR = II.YEAR
	                   AND IG.ITEM_GRP_ID = II.ITEM_GRP_ID
	                ) 
	            ) IT    
	            ON EV.YEAR = IT.YEAR
	        ) E
	        LEFT OUTER JOIN
	        (SELECT YEAR, EVAL_USER_GRP_ID, EVAL_USER_ID, METRIC_GRP_ID, ITEM_ID, EVAL_SCORE
	          FROM BSC_MAT_EVAL
	         WHERE 1=1
	           AND YEAR = #findYear# 
	        ) ER
	        ON E.YEAR = ER.YEAR
	       AND E.EVAL_USER_GRP_ID = ER.EVAL_USER_GRP_ID
	       AND E.EVAL_USER_ID = ER.EVAL_USER_ID
	       AND E.METRIC_GRP_ID = ER.METRIC_GRP_ID
	       AND E.ITEM_ID = ER.ITEM_ID
	     GROUP BY E.YEAR, E.EVAL_USER_GRP_ID, E.EVAL_USER_GRP_NM, E.EVAL_USER_ID 
	            , E.METRIC_GRP_ID, E.METRIC_GRP_NM
	            , ROLLUP( E.ITEM_GRP_ID, E.ITEM_ID)
	    ) D
	    LEFT OUTER JOIN 
	    (SELECT YEAR, ITEM_GRP_ID, ITEM_GRP_NM, NVL(SORT_ORDER, 99999) AS SORT_ORDER
	       FROM BSC_MAT_ITEM_GRP
	      WHERE 1=1
	        AND YEAR = #findYear#
	    ) IG
	    ON D.YEAR = IG.YEAR
	   AND D.ITEM_GRP_ID = IG.ITEM_GRP_ID 
	    LEFT OUTER JOIN 
	    (SELECT YEAR, ITEM_ID, ITEM_NM, NVL(SORT_ORDER, 99999) AS SORT_ORDER
	       FROM BSC_MAT_ITEM 
	      WHERE 1=1
	        AND YEAR = #findYear#
	    ) IT
	    ON D.YEAR = IT.YEAR
	   AND D.ITEM_ID = IT.ITEM_ID
	 ORDER BY IG.SORT_ORDER NULLS LAST, D.ITEM_GRP_ID, IT.SORT_ORDER NULLS LAST, D.ITEM_ID
	</select>
	
	
	<!--
	==================================================================   
	  # 설명	: 평가실시 저장
	  #	기능	: UPDATE
	  #	TABLE	: BSC_MAT_EVAL
	==================================================================
	-->	
	<update id="updateData" parameterClass="hashMap">
		INSERT INTO BSC_MAT_EVAL
			 (YEAR, EVAL_USER_GRP_ID, EVAL_USER_ID, METRIC_GRP_ID, ITEM_ID
			 , EVAL_SCORE, CREATE_DT 
			 ) VALUES ( #modYear#, #modEvalUserGrpId#, #modEvalUserId#, #modMetricGrpId#, #modItemId#
			 , #modItemScore#, SYSDATE
			 )
	</update>	
	
	
	<!--
	==================================================================   
	  # 설명	: 기존 지표POOL 평가내역 삭제
	  #	기능	: UPDATE
	  #	TABLE	: BSC_MAT_EVAL
	==================================================================
	-->	
	<update id="deleteData" parameterClass="hashMap">
		DELETE FROM BSC_MAT_EVAL
		 WHERE YEAR = #modYear# 
		   AND EVAL_USER_GRP_ID = #modEvalUserGrpId#
		   AND EVAL_USER_ID = #modEvalUserId#
		   AND METRIC_GRP_ID = #modMetricGrpId#
	</update>
	
	
	
	<!--
	==================================================================   
	  # 설명	: 평가제출
	  #	기능	: UPDATE
	  #	TABLE	: 
	==================================================================
	-->	
	<update id="evalSubmitData" parameterClass="hashMap">
		UPDATE BSC_MAT_EVAL_USER
		   SET EVAL_SUBMIT_YN = #evalSubmitYn#
		 WHERE YEAR = #modYear#
		   AND EVAL_USER_GRP_ID = #modEvalUserGrpId# 
		   AND EVAL_USER_ID = #modEvalUserId#
	</update>


</sqlMap>


