<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="man.tam.actualMng">

	<!--
	==================================================================
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: MAN_ACTUAL
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />


	<!--
	==================================================================
	  # 설명	: 목표 입력, 승인자 조회
	  #	기능	: SELECT
	  #	TABLE	: V_MAN_METRIC
	==================================================================
	-->
	<select id="getUserList" parameterClass="hashMap" resultClass="hashMap">
		SELECT DISTINCT USER_ID, USER_NM
		  FROM V_MAN_METRIC A, V_ROLE_USER B
		 WHERE A.YEAR = #findYear#
		<!-- 입력자 -->
		<isEqual property="findActualType" compareValue="input">
		   AND A.INSERT_USER_ID = B.USER_ID
		</isEqual>
		<!-- 승인자 -->
		<isNotEqual property="findActualType" compareValue="input">
		   AND A.APPROVE_USER_ID = B.USER_ID
		</isNotEqual>
	</select>

	<!--
	==================================================================
	  # 설명	: 실적입력기한 여부 가져오기
	  #	기능	: SELECT
	  #	TABLE	: MAN_TGT_IN_TERM
	==================================================================
	-->
	<select id="getActualInputTermYn" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT DECODE (COUNT (*), 0, 'N', 'Y') IS_INPUT_TERM
		  FROM MAN_ACT_IN_TERM
		 WHERE 1 = 1
		   AND YEAR = #findYear#
		   AND MON 	= #findMon#
		   AND START_DT <![CDATA[ <= ]]> TO_CHAR (SYSDATE, 'YYYYMMDD')
		   AND END_DT <![CDATA[ >= ]]> TO_CHAR (SYSDATE, 'YYYYMMDD')
    </select>

    <!--
	==================================================================
	  # 설명	: 실적입력 트리  데이터 조회
	  #	기능	: SELECT
	  #	TABLE	: MAN_TARGET
	==================================================================
	-->
	<select id="getMngActualTree" parameterClass="hashMap" resultClass="hashMap"   remapResults="true">
		  SELECT DISTINCT A.YEAR
		                , MAN_ID
		                , MAN_NM
		<isEqual property="paramGubun" compareValue="2">
		                , STRAT_ID
		                , STRAT_NM
		                , STRAT_ORDER
		</isEqual>
		<isEqual property="paramGubun" compareValue="3">
		                , STRAT_ID
		                , STRAT_NM
		                , CSF_ID
		                , CSF_NM
		                , STRAT_ORDER
		                , CSF_ORDER
		</isEqual>
		<isEqual property="paramGubun" compareValue="4">
		                , STRAT_ID
		                , STRAT_NM
		                , CSF_ID
		                , CSF_NM
		                , A.MAN_KPI_ID
		                , MAN_KPI_NM
		                , NVL (B.ACT_STATUS_ID, '01') ACT_STATUS_ID
		                , (SELECT ETC1 FROM BSC_CODE
		                    WHERE YEAR = (SELECT CASE YEAR_YN WHEN 'Y' THEN #findYear# ELSE '9999' END FROM BSC_CODE_GRP WHERE CODE_GRP_ID = '015')
		                      AND CODE_GRP_ID = '015' AND CODE_ID = NVL (B.ACT_STATUS_ID, '01') AND DELETE_DT IS NULL) AS ACT_STATUS_NM
		                , STRAT_ORDER
		                , CSF_ORDER
		                , KPI_ORDER
		</isEqual>
		                , MAN_ORDER
		                , #paramGubun# AS PARAM
		    FROM V_MAN_METRIC A
		       , (SELECT A.YEAR
		               , A.MAN_KPI_ID
		               , A.MON
		               , NVL (B.ACT_STATUS_ID, '01') ACT_STATUS_ID
		            FROM MAN_ACT_REG_DEF_MON A, MAN_ACTUAL B
		           WHERE A.YEAR = B.YEAR(+)
		             AND A.MON = B.MON(+)
		             AND A.MAN_KPI_ID = B.MAN_KPI_ID(+)
		             AND B.ANAL_CYCLE(+) = 'M'
		             AND A.YEAR = #findYear#
		             AND A.MON = #findMon#) B
		   WHERE A.YEAR = B.YEAR
		     AND A.YEAR = #findYear#
		     AND A.MAN_KPI_ID = B.MAN_KPI_ID
		<isEqual property="findActualType" compareValue="input">
			<isNotEqual property="findUserId" compareValue="ALL">
				<isNotEmpty property="findUserId">
		     	AND A.INSERT_USER_ID = #findUserId#
		     	</isNotEmpty>
		     </isNotEqual>
			<isEmpty property="findUserId">
		     AND INSERT_USER_ID IS NULL
		     </isEmpty>
		</isEqual>
		<isNotEqual property="findActualType" compareValue="input">
			<isNotEqual property="findUserId" compareValue="ALL">
		     	<isNotEmpty property="findUserId">
			     	AND A.APPROVE_USER_ID = #findUserId#
		     	</isNotEmpty>
			</isNotEqual>
		     <isEmpty property="findUserId" >
			     AND APPROVE_USER_ID IS NULL
		     </isEmpty>
		</isNotEqual>
		<isNotEqual property="findActualStatusId" compareValue="ALLSTATUS">
			<isNotEmpty property="findActualStatusId">
		     	AND B.ACT_STATUS_ID = #findActualStatusId#
			</isNotEmpty>
		</isNotEqual>
			 AND TGT_STATUS_ID = '04'
		ORDER BY MAN_ORDER

		<isEqual property="paramGubun" compareValue="2">
		       , STRAT_ORDER
		</isEqual>
		<isEqual property="paramGubun" compareValue="3">
		       , STRAT_ORDER
		       , CSF_ORDER
		</isEqual>
		<isEqual property="paramGubun" compareValue="4">
		       , STRAT_ORDER
		       , CSF_ORDER
		       , KPI_ORDER
		</isEqual>
	</select>

	<!--
	==================================================================
	  # 설명		: 실적입력/승인 목록 보기
	  #	기능		: SELECT
	  #	TABLE	: MAN_ACTUAL
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		  SELECT A.MAN_KPI_ID
		       , MAN_KPI_NM
		       , CAL_TYPE_COL_ID
		       , CAL_TYPE_COL_NM
		       , #findMon# MON
		       , B.ACT_STATUS_ID
		       , MON01
		       , MON02
		       , MON03
		       , MON04
		       , MON05
		       , MON06
		       , MON07
		       , MON08
		       , MON09
		       , MON10
		       , MON11
		       , MON12
		       , CASE WHEN #findMon# = '01' AND (B.ACT_STATUS_ID) IN ('01', '02', '05') THEN MON01YN END MON01YN
		       , CASE WHEN #findMon# = '02' AND (B.ACT_STATUS_ID) IN ('01', '02', '05') THEN MON02YN END MON02YN
		       , CASE WHEN #findMon# = '03' AND (B.ACT_STATUS_ID) IN ('01', '02', '05') THEN MON03YN END MON03YN
		       , CASE WHEN #findMon# = '04' AND (B.ACT_STATUS_ID) IN ('01', '02', '05') THEN MON04YN END MON04YN
		       , CASE WHEN #findMon# = '05' AND (B.ACT_STATUS_ID) IN ('01', '02', '05') THEN MON05YN END MON05YN
		       , CASE WHEN #findMon# = '06' AND (B.ACT_STATUS_ID) IN ('01', '02', '05') THEN MON06YN END MON06YN
		       , CASE WHEN #findMon# = '07' AND (B.ACT_STATUS_ID) IN ('01', '02', '05') THEN MON07YN END MON07YN
		       , CASE WHEN #findMon# = '08' AND (B.ACT_STATUS_ID) IN ('01', '02', '05') THEN MON08YN END MON08YN
		       , CASE WHEN #findMon# = '09' AND (B.ACT_STATUS_ID) IN ('01', '02', '05') THEN MON09YN END MON09YN
		       , CASE WHEN #findMon# = '10' AND (B.ACT_STATUS_ID) IN ('01', '02', '05') THEN MON10YN END MON10YN
		       , CASE WHEN #findMon# = '11' AND (B.ACT_STATUS_ID) IN ('01', '02', '05') THEN MON11YN END MON11YN
		       , CASE WHEN #findMon# = '12' AND (B.ACT_STATUS_ID) IN ('01', '02', '05') THEN MON12YN END MON12YN
		    FROM (SELECT MAN_KPI_ID
		               , CAL_TYPE_COL_ID
		               , CAL_TYPE_COL_NM
		               , MON01
		               , MON02
		               , MON03
		               , MON04
		               , MON05
		               , MON06
		               , MON07
		               , MON08
		               , MON09
		               , MON10
		               , MON11
		               , MON12
		               , MAX (MON01YN) OVER (PARTITION BY MAN_KPI_ID) MON01YN
		               , MAX (MON02YN) OVER (PARTITION BY MAN_KPI_ID) MON02YN
		               , MAX (MON03YN) OVER (PARTITION BY MAN_KPI_ID) MON03YN
		               , MAX (MON04YN) OVER (PARTITION BY MAN_KPI_ID) MON04YN
		               , MAX (MON05YN) OVER (PARTITION BY MAN_KPI_ID) MON05YN
		               , MAX (MON06YN) OVER (PARTITION BY MAN_KPI_ID) MON06YN
		               , MAX (MON07YN) OVER (PARTITION BY MAN_KPI_ID) MON07YN
		               , MAX (MON08YN) OVER (PARTITION BY MAN_KPI_ID) MON08YN
		               , MAX (MON09YN) OVER (PARTITION BY MAN_KPI_ID) MON09YN
		               , MAX (MON10YN) OVER (PARTITION BY MAN_KPI_ID) MON10YN
		               , MAX (MON11YN) OVER (PARTITION BY MAN_KPI_ID) MON11YN
		               , MAX (MON12YN) OVER (PARTITION BY MAN_KPI_ID) MON12YN
		            FROM (  SELECT MAN_KPI_ID
		                         , TO_CHAR (GUBUN) CAL_TYPE_COL_ID
		                         , '' CAL_TYPE_COL_NM
		                         , MAX (MON01) MON01
		                         , MAX (MON02) MON02
		                         , MAX (MON03) MON03
		                         , MAX (MON04) MON04
		                         , MAX (MON05) MON05
		                         , MAX (MON06) MON06
		                         , MAX (MON07) MON07
		                         , MAX (MON08) MON08
		                         , MAX (MON09) MON09
		                         , MAX (MON10) MON10
		                         , MAX (MON11) MON11
		                         , MAX (MON12) MON12
		                         , MAX (MON01YN) MON01YN
		                         , MAX (MON02YN) MON02YN
		                         , MAX (MON03YN) MON03YN
		                         , MAX (MON04YN) MON04YN
		                         , MAX (MON05YN) MON05YN
		                         , MAX (MON06YN) MON06YN
		                         , MAX (MON07YN) MON07YN
		                         , MAX (MON08YN) MON08YN
		                         , MAX (MON09YN) MON09YN
		                         , MAX (MON10YN) MON10YN
		                         , MAX (MON11YN) MON11YN
		                         , MAX (MON12YN) MON12YN
		                      FROM (SELECT MAN_KPI_ID
		                                 , GUBUN
		                                 , MON
		                                 , CASE MON WHEN '01' THEN VALUE END MON01
		                                 , CASE MON WHEN '02' THEN VALUE END MON02
		                                 , CASE MON WHEN '03' THEN VALUE END MON03
		                                 , CASE MON WHEN '04' THEN VALUE END MON04
		                                 , CASE MON WHEN '05' THEN VALUE END MON05
		                                 , CASE MON WHEN '06' THEN VALUE END MON06
		                                 , CASE MON WHEN '07' THEN VALUE END MON07
		                                 , CASE MON WHEN '08' THEN VALUE END MON08
		                                 , CASE MON WHEN '09' THEN VALUE END MON09
		                                 , CASE MON WHEN '10' THEN VALUE END MON10
		                                 , CASE MON WHEN '11' THEN VALUE END MON11
		                                 , CASE MON WHEN '12' THEN VALUE END MON12
		                                 , CASE MON WHEN '01' THEN MONYN END MON01YN
		                                 , CASE MON WHEN '02' THEN MONYN END MON02YN
		                                 , CASE MON WHEN '03' THEN MONYN END MON03YN
		                                 , CASE MON WHEN '04' THEN MONYN END MON04YN
		                                 , CASE MON WHEN '05' THEN MONYN END MON05YN
		                                 , CASE MON WHEN '06' THEN MONYN END MON06YN
		                                 , CASE MON WHEN '07' THEN MONYN END MON07YN
		                                 , CASE MON WHEN '08' THEN MONYN END MON08YN
		                                 , CASE MON WHEN '09' THEN MONYN END MON09YN
		                                 , CASE MON WHEN '10' THEN MONYN END MON10YN
		                                 , CASE MON WHEN '11' THEN MONYN END MON11YN
		                                 , CASE MON WHEN '12' THEN MONYN END MON12YN
		                              FROM (SELECT A.YEAR
		                                         , A.MAN_KPI_ID
		                                         , 1 GUBUN
		                                         , A.MON
		                                         , B.TGT_TARGET VALUE
		                                         , 'Y' MONYN
		                                      FROM MAN_ACT_REG_DEF_MON A, MAN_METRIC_TARGET B
		                                     WHERE A.YEAR = B.YEAR(+)
		                                       AND A.MAN_KPI_ID = B.MAN_KPI_ID(+)
		                                       AND A.MON = B.MON(+)
		                                       AND B.ANAL_CYCLE(+) = 'M'
		                                       AND A.DELETE_DT IS NULL
		                                       AND A.YEAR = #findYear#
		                                       AND A.MAN_KPI_ID = #manKpiId#
		                                    UNION ALL
		                                    SELECT A.YEAR
		                                         , A.MAN_KPI_ID
		                                         , 2 GUBUN
		                                         , A.MON
		                                         , C.VALUE
		                                         , 'Y' MONYN
		                                      FROM MAN_ACT_REG_DEF_MON A, MAN_ACTUAL C
		                                     WHERE A.YEAR = C.YEAR(+)
		                                       AND A.MAN_KPI_ID = C.MAN_KPI_ID(+)
		                                       AND A.MON = C.MON(+)
		                                       AND C.ANAL_CYCLE(+) = 'M'
		                                       AND A.DELETE_DT IS NULL
		                                       AND A.YEAR = #findYear#
		                                       AND A.MAN_KPI_ID = #manKpiId#))
		                  GROUP BY MAN_KPI_ID, GUBUN
		                  UNION ALL
		                    SELECT MAN_KPI_ID
		                         , CAL_TYPE_COL CAL_TYPE_COL_ID
		                         , MAX (CAL_TYPE_COL_NM) CAL_TYPE_COL_NM
		                         , MAX (MON01) MON01
		                         , MAX (MON02) MON02
		                         , MAX (MON03) MON03
		                         , MAX (MON04) MON04
		                         , MAX (MON05) MON05
		                         , MAX (MON06) MON06
		                         , MAX (MON07) MON07
		                         , MAX (MON08) MON08
		                         , MAX (MON09) MON09
		                         , MAX (MON10) MON10
		                         , MAX (MON11) MON11
		                         , MAX (MON12) MON12
		                         , '' MON01YN
		                         , '' MON02YN
		                         , '' MON03YN
		                         , '' MON04YN
		                         , '' MON05YN
		                         , '' MON06YN
		                         , '' MON07YN
		                         , '' MON08YN
		                         , '' MON09YN
		                         , '' MON10YN
		                         , '' MON11YN
		                         , '' MON12YN
		                      FROM (SELECT MAN_KPI_ID
		                                 , MON
		                                 , CAL_TYPE_COL
		                                 , CAL_TYPE_COL_NM
		                                 , CASE MON WHEN '01' THEN VALUE END MON01
		                                 , CASE MON WHEN '02' THEN VALUE END MON02
		                                 , CASE MON WHEN '03' THEN VALUE END MON03
		                                 , CASE MON WHEN '04' THEN VALUE END MON04
		                                 , CASE MON WHEN '05' THEN VALUE END MON05
		                                 , CASE MON WHEN '06' THEN VALUE END MON06
		                                 , CASE MON WHEN '07' THEN VALUE END MON07
		                                 , CASE MON WHEN '08' THEN VALUE END MON08
		                                 , CASE MON WHEN '09' THEN VALUE END MON09
		                                 , CASE MON WHEN '10' THEN VALUE END MON10
		                                 , CASE MON WHEN '11' THEN VALUE END MON11
		                                 , CASE MON WHEN '12' THEN VALUE END MON12
		                              FROM (SELECT A.*
		                                         , CASE CAL_TYPE_COL
		                                              WHEN 'A' THEN A
		                                              WHEN 'B' THEN B
		                                              WHEN 'C' THEN C
		                                              WHEN 'D' THEN D
		                                              WHEN 'E' THEN E
		                                              WHEN 'F' THEN F
		                                              WHEN 'G' THEN G
		                                              WHEN 'H' THEN H
		                                              WHEN 'I' THEN I
		                                              WHEN 'J' THEN J
		                                              WHEN 'K' THEN K
		                                              WHEN 'L' THEN L
		                                              WHEN 'M' THEN M
		                                              WHEN 'N' THEN N
		                                              WHEN 'O' THEN O
		                                              WHEN 'P' THEN P
		                                              WHEN 'Q' THEN Q
		                                              WHEN 'R' THEN R
		                                              WHEN 'S' THEN S
		                                              WHEN 'T' THEN T
		                                              WHEN 'U' THEN U
		                                              WHEN 'V' THEN V
		                                              WHEN 'W' THEN W
		                                              WHEN 'X' THEN X
		                                              WHEN 'Y' THEN Y
		                                              WHEN 'Z' THEN Z
		                                           END
		                                              VALUE
		                                      FROM (SELECT A.YEAR
		                                                 , B.MON
		                                                 , A.MAN_KPI_ID
		                                                 , CAL_TYPE_COL
		                                                 , CAL_TYPE_COL_NM
		                                              FROM MAN_CAL_TYPE_COL A
		                                                 , (    SELECT TRIM (TO_CHAR (ROWNUM, '09')) MON
		                                                          FROM DUAL
		                                                    CONNECT BY LEVEL <![CDATA[ < ]]> 13) B
		                                             WHERE A.YEAR = #findYear#
		                                               AND A.MAN_KPI_ID = #manKpiId#
		                                               AND A.DELETE_DT IS NULL) A
		                                         , MAN_ACTUAL B
		                                     WHERE 1 = 1
		                                       AND A.YEAR = B.YEAR(+)
		                                       AND A.MON = B.MON(+)
		                                       AND A.MAN_KPI_ID = B.MAN_KPI_ID(+)
		                                       AND B.ANAL_CYCLE(+) = 'M'))
		                  GROUP BY MAN_KPI_ID, CAL_TYPE_COL)) A
		       , (SELECT A.*, NVL (B.ACT_STATUS_ID, '01') ACT_STATUS_ID
		            FROM MAN_METRIC A, MAN_ACTUAL B
		           WHERE A.YEAR = B.YEAR(+)
		             AND A.MAN_KPI_ID = B.MAN_KPI_ID(+)
		             AND B.MON(+) = #findMon#
		             AND B.ANAL_CYCLE(+) = 'M'
		             AND A.YEAR = #findYear#
		             AND A.MAN_KPI_ID = #manKpiId#
				<isNotEqual property="findActualStatusId" compareValue="ALLSTATUS">
					<isNotEmpty property="findActualStatusId">
				     	AND NVL (B.ACT_STATUS_ID, '01') = #findActualStatusId#
					</isNotEmpty>
				</isNotEqual>
				<isEqual property="findActualType" compareValue="input">
					<isNotEqual property="findUserId" compareValue="ALL">
						<isNotEmpty property="findUserId">
		     				AND A.INSERT_USER_ID = #findUserId#
		     			</isNotEmpty>
		     		</isNotEqual>
		             <isEmpty property="findUserId">
		             AND A.INSERT_USER_ID IS NULL
					</isEmpty>
				</isEqual>
				<isNotEqual property="findActualType" compareValue="input">
					<isNotEqual property="findUserId" compareValue="ALL">
						<isNotEmpty property="findUserId">
		             			 AND A.APPROVE_USER_ID = #findUserId#
						</isNotEmpty>
					</isNotEqual>
					<isEmpty property="findUserId">
		             		 AND A.APPROVE_USER_ID IS NULL
					</isEmpty>
				</isNotEqual>
		             AND 1 = 1) B
		   WHERE A.MAN_KPI_ID = B.MAN_KPI_ID
		     AND B.YEAR = #findYear#
		ORDER BY MAN_KPI_ID, CAL_TYPE_COL_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 실적입력/승인 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: MAN_ACTUAL
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR
			 , MAN_KPI_ID
			 , CONTENT
			 , RETURN_REASON
			 , ACT_STATUS_ID
		  FROM MAN_ACTUAL
		 WHERE 1 = 1
		   AND YEAR 	  = #findYear#
		   AND MON 		  = #findMon#
		   AND MAN_KPI_ID = #manKpiId#
		   AND ANAL_CYCLE = 'M'
	</select>

	<!--
	==================================================================
	  # 설명	: 실적삭제
	  #	기능	: UPDATE
	  #	TABLE	: MAN_ACTUAL
	==================================================================
	-->
	<update id="deleteData" parameterClass="hashMap">
		DELETE FROM MAN_ACTUAL
		 WHERE YEAR 	  = #findYear#
		   AND MON 		  = #findMon#
		   AND MAN_KPI_ID = #manKpiId#
	</update>

	<!--
	==================================================================
	  # 설명	: 실적 첨부파일 등록
	  #	기능	: INSERT
	  #	TABLE	: MAN_ACTUAL_ATTACH
	==================================================================
	-->
	<insert id="insertFileInfo" parameterClass="hashMap">
		<selectKey resultClass="java.lang.String" keyProperty="SEQ" >
			SELECT NVL(MAX(SEQ)+1,1)
			  FROM MAN_ACTUAL_ATTACH
			 WHERE YEAR 	  = #year#
			   AND MAN_KPI_ID = #manKpiId#
		</selectKey>
	   INSERT INTO MAN_ACTUAL_ATTACH (
	               YEAR
	             , MON
	             , MAN_KPI_ID
	             , SEQ
	             , ATTACH_FILE_NM
	             , ATTACH_FILE_FNM
	             , ATTACH_FILE_SUFFIX
	             , ATTACH_FILE_PATH
	             , CREATE_DT
	             , ANAL_CYCLE
	           ) VALUES (
	               #year#
	             , #mon#
	             , #manKpiId#
	             , #SEQ#
	             , #attachFileNm#
	             , #attachFileFnm#
	             , #attachFileSuffix#
	             , #attachFilePath#
	             , SYSDATE
	             , 'M'
	    	   )
	</insert>

	<!--
	==================================================================
	  # 설명	: 실적 파일 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: MAN_ACTUAL_ATTACH
	==================================================================
	-->
	<select id="getFileList" parameterClass="hashMap" resultClass="hashMap">
 		SELECT A.YEAR
 		     , A.MON
	         , A.MAN_KPI_ID
	         , A.SEQ
	         , A.ATTACH_FILE_NM
	         , A.ATTACH_FILE_FNM
	         , A.ATTACH_FILE_SUFFIX
	         , F_ENCRYPT(A.ATTACH_FILE_PATH, #encryptionCode#) ATTACH_FILE_PATH
         FROM MAN_ACTUAL_ATTACH A
        WHERE A.YEAR 	   = #year#
          AND A.MON 	   = #mon#
          AND A.MAN_KPI_ID = #manKpiId#
        ORDER BY A.SEQ
	</select>

	<!--
	==================================================================
	  # 설명	: 실적상태 수정
	  #	기능	: UPDATE
	  #	TABLE	: MAN_ACTUAL
	==================================================================
	-->
	<update id="updateStatusData" parameterClass="hashMap">
			UPDATE MAN_ACTUAL
			   SET ACT_STATUS_ID 	= #actualStatusId#
			     , MODIFY_DT        = SYSDATE
			 WHERE YEAR 			= #year#
			   AND MON 				= #mon#
	           AND MAN_KPI_ID 		= #manKpiId#
	</update>

	<!--
	==================================================================
	  # 설명	: 실적상태 수정
	  #	기능	: UPDATE
	  #	TABLE	: MAN_ACTUAL
	==================================================================
	-->
	<update id="updateReturnStatusData" parameterClass="hashMap">
			UPDATE MAN_ACTUAL
			   SET ACT_STATUS_ID 	= #actualStatusId#
			     , MODIFY_DT        = SYSDATE
			     , RETURN_REASON    = #returnReason#
			 WHERE YEAR 			= #year#
			   AND MON 				= #mon#
	           AND MAN_KPI_ID 		= #manKpiId#
	</update>

	<!--
	==================================================================
	  # 설명	: 실적반려 사유 가져오기
	  #	기능	: SELECT
	  #	TABLE	: MAN_ACTUAL
	==================================================================
	-->
	<select id="getReturnReason" parameterClass="hashMap" resultClass="java.lang.String">
        SELECT RETURN_REASON
          FROM MAN_ACTUAL
		 WHERE YEAR 		= #year#
		   AND MON 			= #mon#
           AND MAN_KPI_ID 	= #manKpiId#
	</select>

	<!--
	==================================================================
	  # 설명	: 파라미터 맵
	  #	기능	: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<parameterMap id="paramMapActual" class="java.util.HashMap">
		<parameter property="findYear"	jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="mon"		jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="manKpiId"	jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
	</parameterMap>

	<!--
	==================================================================
	  # 설명	: 데이터집계관리 프로시저 호출
	  #	기능	: CALL PROCEDURE
	  #	TABLE	:
	==================================================================
	-->
	<procedure id="callSpManActualProc"  parameterMap="paramMapActual">
		{CALL SP_MAN_ACTUAL_VALUE_KGS(?, ?, ?)}
    </procedure>






























	<!--
	==================================================================
	  # 설명		: 실적입력/승인 수식 목록 보기
	  #	기능		: SELECT
	  #	TABLE	: MAN_CAL_TYPE_COL_GRP
	==================================================================
	-->
	<select id="getCalList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.CAL_TYPE_COL_NM
		     , D.*
		  FROM MAN_CAL_TYPE_COL_GRP A
		  	 ,(SELECT B.MAN_KPI_GRP_ID
				    , C.* FROM MAN_METRIC B
				    ,(
						<iterate property="calTypeColArray" conjunction=" UNION ALL ">
						SELECT DISTINCT YEAR
						          , MAN_KPI_ID
						          , '$calTypeColArray[]$' AS CAL_TYPE_COL
						          , MAX(DECODE(MON,'01',$calTypeColArray[]$,'')) OVER(PARTITION BY MAN_KPI_ID) AS "MON01"
						          , MAX(DECODE(MON,'02',$calTypeColArray[]$,'')) OVER(PARTITION BY MAN_KPI_ID) AS "MON02"
						          , MAX(DECODE(MON,'03',$calTypeColArray[]$,'')) OVER(PARTITION BY MAN_KPI_ID) AS "MON03"
						          , MAX(DECODE(MON,'04',$calTypeColArray[]$,'')) OVER(PARTITION BY MAN_KPI_ID) AS "MON04"
						          , MAX(DECODE(MON,'05',$calTypeColArray[]$,'')) OVER(PARTITION BY MAN_KPI_ID) AS "MON05"
						          , MAX(DECODE(MON,'06',$calTypeColArray[]$,'')) OVER(PARTITION BY MAN_KPI_ID) AS "MON06"
						          , MAX(DECODE(MON,'07',$calTypeColArray[]$,'')) OVER(PARTITION BY MAN_KPI_ID) AS "MON07"
						          , MAX(DECODE(MON,'08',$calTypeColArray[]$,'')) OVER(PARTITION BY MAN_KPI_ID) AS "MON08"
						          , MAX(DECODE(MON,'09',$calTypeColArray[]$,'')) OVER(PARTITION BY MAN_KPI_ID) AS "MON09"
						          , MAX(DECODE(MON,'10',$calTypeColArray[]$,'')) OVER(PARTITION BY MAN_KPI_ID) AS "MON10"
						          , MAX(DECODE(MON,'11',$calTypeColArray[]$,'')) OVER(PARTITION BY MAN_KPI_ID) AS "MON11"
						          , MAX(DECODE(MON,'12',$calTypeColArray[]$,'')) OVER(PARTITION BY MAN_KPI_ID) AS "MON12"
						FROM MAN_ACTUAL
						WHERE MAN_KPI_ID = #manKpiId#
						</iterate>
						) C
			WHERE B.MAN_KPI_ID 		= C.MAN_KPI_ID
			  AND B.YEAR 			= C.YEAR
			  ) D
		WHERE A.MAN_KPI_GRP_ID 		= D.MAN_KPI_GRP_ID
		     AND A.CAL_TYPE_COL 	= D.CAL_TYPE_COL
		     AND A.MAN_KPI_GRP_ID 	= (SELECT MAN_KPI_GRP_ID
		     							 FROM MAN_METRIC
		     							WHERE YEAR 		 = #findYear#
		     							  AND MAN_KPI_ID = #manKpiId# )
</select>



<!--
	==================================================================
	  # 설명		: 수식 리스트 COUNT 조회
	  #	기능		: SELECT
	  #	TABLE	: MAN_CAL_TYPE_COL_GRP
	==================================================================
	-->
	<select id="getCalCountList" parameterClass="hashMap" resultClass="hashMap">

	SELECT (COUNT(MAN_KPI_GRP_ID)+3) AS ROW_CNT
	  FROM MAN_CAL_TYPE_COL_GRP B
	 WHERE MAN_KPI_GRP_ID = (SELECT MAN_KPI_GRP_ID
	 						   FROM MAN_METRIC
	 						  WHERE YEAR		= #findYear#
	 						    AND MAN_KPI_ID 	= #manKpiId# )

	</select>

	<!--
	==================================================================
	  # 설명	: 실적 입력자 조회
	  #	기능	: SELECT
	  #	TABLE	: MAN_METRIC
	==================================================================
	-->
	<select id="getInsertUserList" parameterClass="hashMap" resultClass="hashMap">
		SELECT DISTINCT INSERT_USER_ID
			 , INSERT_USER_NM
	      FROM MAN_METRIC
	     WHERE 1 = 1
	       AND DELETE_DT IS NULL
	       AND YEAR = #findYear#
	     ORDER BY INSERT_USER_NM
	</select>

	<!--
	==================================================================
	  # 설명	: 실적 승인자 조회
	  #	기능	: SELECT
	  #	TABLE	: MAN_METRIC
	==================================================================
	-->
	<select id="getApproveUserList" parameterClass="hashMap" resultClass="hashMap">
		SELECT DISTINCT APPROVE_USER_ID
			 , APPROVE_USER_NM
	      FROM MAN_METRIC
	     WHERE 1 = 1
	       AND DELETE_DT IS NULL
	       AND YEAR = #findYear#
	  ORDER BY APPROVE_USER_NM
	</select>



	<!--
	==================================================================
	  # 설명	: 실적 입력 가능한 지표 월 여부 가져오기
	  #	기능	: SELECT
	  #	TABLE	: MAN_ACT_REG_DEF_MON
	==================================================================
	-->
	<select id="getActualInputMonYn" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT DECODE (COUNT (*), 0, 'N', 'Y') IS_INPUT_MON
         FROM  MAN_ACT_REG_DEF_MON
         WHERE 1 = 1
           AND YEAR       = #findYear#
           AND MON        = #findMon#
           AND MAN_KPI_ID = #manKpiId#
    </select>

	<!--
	==================================================================
	  # 설명	: 실적 입력 가능한 상태 유무 가져오기
	  #	기능	: SELECT
	  #	TABLE	: MAN_ACTUAL
	==================================================================
	-->
	<select id="getActualInputActStatusYn" parameterClass="hashMap" resultClass="java.lang.String">
         SELECT DECODE (COUNT (*), 0, 'Y', 'N')IS_INPUT_ACT_STAT
		   FROM MAN_ACTUAL
		 WHERE  1 = 1
		   AND YEAR 		= #year#
		   AND MON 			= #mon#
           AND MAN_KPI_ID 	= #manKpiId#
		    AND ACT_STATUS_ID NOT IN ('03', '04', '06')
    </select>



	<!--
	==================================================================
	  # 설명	: 목표입력 트리 데이터 조회
	  #	기능	: SELECT
	  #	TABLE	: MAN_TARGET
	==================================================================
	-->
	<select id="getApproveManagementTree" parameterClass="hashMap" resultClass="hashMap"  remapResults="true">
		  SELECT DISTINCT A.MAN_ID, A.MAN_NM
		<isEqual property="paramGubun" compareValue="2">
					, B.STRAT_ID, B.STRAT_NM
		</isEqual>
		<isEqual property="paramGubun" compareValue="3">
					, B.STRAT_ID, B.STRAT_NM
					, C.CSF_ID, C.CSF_NM
		</isEqual>
		<isEqual property="paramGubun" compareValue="4">
		  			, B.STRAT_ID, B.STRAT_NM
		  			, C.CSF_ID, C.CSF_NM
		  			, D.MAN_KPI_ID
		  			, D.MAN_KPI_NM
		  			, NVL(D.TGT_STATUS_ID, '01') TGT_STATUS_ID
		  			,(SELECT ETC1
	                  		FROM BSC_CODE
	                 		WHERE YEAR = (SELECT CASE
	                 								YEAR_YN WHEN 'Y' THEN #findYear# ELSE '9999'
	                 							 END
	                 						FROM BSC_CODE_GRP
	                 					   WHERE CODE_GRP_ID = '015')
	                   		AND CODE_GRP_ID = '015'
	                   		AND CODE_ID =  NVL(D.TGT_STATUS_ID, '01')
	               			AND DELETE_DT IS NULL) AS ACTUAL_STATUS_NM
		</isEqual>
		 		, #paramGubun# AS PARAM
		 		, A.SORT_ORDER
		     FROM MAN_TARGET A
		        , MAN_STRATEGY B
		        , MAN_CSF C
		        , MAN_METRIC D
		       WHERE 1 = 1
		     AND A.YEAR 	= B.YEAR
		     AND A.MAN_ID 	= B.MAN_ID
		     AND B.YEAR 	= C.YEAR
		     AND B.STRAT_ID = C.STRAT_ID
		     AND C.YEAR 	= D.YEAR
		     AND C.CSF_ID 	= D.CSF_ID
		     AND A.DELETE_DT IS NULL
		     AND B.DELETE_DT IS NULL
		     AND C.DELETE_DT IS NULL
		     AND D.DELETE_DT IS NULL
		     AND D.YEAR 	= #findYear#
		     AND D.APPROVE_USER_ID 	= #findInsertUserId#
		     <isNotEmpty prepend="AND" property="findActStatusId">
		     	NVL(D.TGT_STATUS_ID, '01') = #findActStatusId#
		     </isNotEmpty>
		ORDER BY A.SORT_ORDER

	</select>

	<!--
	==================================================================
	  # 설명	: 실적 입력상태 가져오기
	  		  paramAction은 현재 이 쿼리가 ListAction에서 사용시, list를
	  		  DetailAction에서 사용시, detail을 사용합니다.
	  #	기능	: SELECT
	  #	TABLE	: MAN_ACTUAL
	==================================================================
	-->
	<select id="getActualStatusId" parameterClass="hashMap" resultClass="hashMap">
			SELECT A.EVAL_CYCLE,
	               F_CODE_NM('008', A.EVAL_CYCLE, A.YEAR) CYCLE_NM
	             , NVL(B.ACT_STATUS_ID,'01') ACT_STATUS_ID
	             , B.CONTENT
	          FROM MAN_METRIC A
	          LEFT OUTER JOIN MAN_ACTUAL B
	            ON A.YEAR 		= B.YEAR
	           AND A.MAN_KPI_ID = B.MAN_KPI_ID
	           <isEqual property="paramAction" compareValue="list">
	           AND B.MON 		= #findMon#
	         WHERE A.YEAR 		= #findYear#
	           </isEqual>
	           <isEqual property="paramAction" compareValue="detail">
	           AND B.MON 		= #mon#
	         WHERE A.YEAR 		= #year#
	           </isEqual>
	           AND A.MAN_KPI_ID	= #manKpiId#
	</select>


	<!--
	==================================================================
	  # 설명		: 실적입력
	  #	기능		: MERGE
	  #	TABLE	: MAN_ACTUAL
	==================================================================
	-->
	<insert id="insertData" parameterClass="hashMap">
		INSERT INTO MAN_ACTUAL (
			   YEAR
			 , MON
			 , MAN_KPI_ID
			 , ANAL_CYCLE
		<iterate property="calTypeColArray">
			 , $calTypeColArray[]$
		</iterate>
			 , ACT_STATUS_ID
			 , CREATE_DT
		<isEqual property="findActualType" compareValue="input">
			 , INSERT_USER_ID
		</isEqual>
		<isNotEqual property="findActualType" compareValue="input">
			 , APPROVE_USER_ID
		</isNotEqual>
			 , CONTENT
			 ) VALUES (
			   #findYear#
			 , #mon#
			 , #manKpiId#
			 , 'M'
		<iterate property="calTypeColValArray">
			 , '$calTypeColValArray[]$'
		</iterate>
		<isEqual property="actStatusId" compareValue="06">
			 , '06'
		</isEqual>
		<isNotEqual property="actStatusId" compareValue="06">
			 , '02'
		</isNotEqual>
			 , SYSDATE
			 , #findUserId#
			 , #content#
			)
	</insert>

	<!--
	==================================================================
	  # 설명	: 실적입력/승인 점수 등록
	  #	기능	: INSERT
	  #	TABLE	: MAN_METRICSCORE
	==================================================================
	-->
	<insert id="insertScoreData" parameterClass="hashMap">
			INSERT INTO MAN_METRICSCORE
					  ( YEAR
					  , MON
					  , MAN_KPI_ID
					  , ANAL_CYCLE
					  , MAN_TARGET
					  , VALUE
					  , SCORE
					  , CREATE_DT
					  , CSF_ID
			          , STRAT_ID
			          , MAN_ID )
		         SELECT YEAR
		         	  , MON
		         	  , MAN_KPI_ID
		         	  , EVAL_CYCLE
		         	  , TGT_TARGET
		         	  , VALUE
		         	  , F_MAX(CASE
		                		WHEN SCORE_CAL_TYPE_ID='01' THEN
		                			CASE
		                			WHEN NVL(TGT_TARGET, 0) = 0 THEN 0 ELSE ROUND((VALUE/TGT_TARGET)*100)
		                	  		END
		                        	WHEN SCORE_CAL_TYPE_ID='02' THEN
			                       		CASE
			                        	WHEN NVL(VALUE, 0) = 0 THEN 0 ELSE ROUND((TGT_TARGET/VALUE)*100)
			                        	END
			                   END
			           , 100) AS SCORE
			           , SYSDATE
			           , CSF_ID
			           , STRAT_ID
			           , MAN_ID
				  FROM ( SELECT A.YEAR
			             	   , C.MON
			             	   , A.MAN_KPI_ID
			             	   , A.EVAL_CYCLE
			             	   , A.SCORE_CAL_TYPE_ID
			             	   , C.VALUE
			             	   , B.TGT_TARGET
			             	   , D.CSF_ID
			             	   , E.STRAT_ID
			             	   , F.MAN_ID
			                FROM MAN_METRIC A
			     LEFT OUTER JOIN MAN_METRIC_TARGET B
				    		  ON A.YEAR 	  = B.YEAR
				    	     AND A.MAN_KPI_ID = B.MAN_KPI_ID
				    	     AND B.MON 		  = #mon#
			     LEFT OUTER JOIN MAN_ACTUAL C
			    		  	  ON A.YEAR 	  = C.YEAR
			    		  	 AND A.MAN_KPI_ID = C.MAN_KPI_ID
			    		  	 AND C.MON 		  = #mon#
			     LEFT OUTER JOIN MAN_CSF D
				    		  ON A.YEAR 	  = D.YEAR
				    	     AND A.CSF_ID 	  = D.CSF_ID
			     LEFT OUTER JOIN MAN_STRATEGY E
				    		  ON A.YEAR 	  = E.YEAR
				    	     AND D.STRAT_ID   = E.STRAT_ID
			     LEFT OUTER JOIN MAN_TARGET F
				    		  ON A.YEAR 	  = F.YEAR
				    	     AND E.MAN_ID 	  = F.MAN_ID
			               WHERE A.YEAR 	  = #year#
			              	 AND A.MAN_KPI_ID = #manKpiId#
			             )
	</insert>

	<!--
	==================================================================
	  # 설명	: 실적입력/확인 수정
	  #	기능	: UPDATE
	  #	TABLE	: MAN_ACTUAL
	==================================================================
	-->
	<update id="updateData" parameterClass="hashMap">
			UPDATE MAN_ACTUAL
			   SET VALUE            = #actual#
				 , CONTENT          = #content#
				 , INSERT_USER_ID   = #insertUserId#
				 , APPROVE_USER_ID  = #approveUserId#
				 , APPROVE_DT       = #approveDt#
				 , RETURN_DT        = #returnDt#
				 , RETURN_REASON    = #returnReason#
				 , ACT_STATUS_ID    = #actStatusId#
				 , MODIFY_DT        = SYSDATE
			 WHERE 1 = 1
			   AND YEAR 			= #year#
			   AND MON 				= #mon#
			   AND MAN_KPI_ID 		= #manKpiId#
	</update>




	<!--
	==================================================================
	  # 설명	: 실적입력/승인 점수 삭제
	  #	기능	: UPDATE
	  #	TABLE	: MAN_METRICSCORE
	==================================================================
	-->
	<update id="deleteScoreData" parameterClass="hashMap">
			DELETE FROM MAN_METRICSCORE
			 WHERE YEAR 		= #year#
			   AND MON 			= #mon#
			   AND MAN_KPI_ID 	= #manKpiId#
	</update>


	<!--
	==================================================================
	  # 설명	: 실적 첨부파일 삭제
	  #	기능	: INSERT
	  #	TABLE	: MAN_ACTUAL_ATTACH
	==================================================================
	-->
	<delete id="deleteFileInfo" parameterClass="hashMap">
			DELETE FROM MAN_ACTUAL_ATTACH
			 WHERE YEAR 		= #year#
			   AND MON 			= #mon#
			   AND MAN_KPI_ID 	= #manKpiId#
			   AND SEQ 			= #seq#
	</delete>





	<!--
	==================================================================
	  # 설명	: CSF 하위 지표ID를 가져온다.
	  #	기능	: SELECT
	  #	TABLE	: MAN_METRIC
	==================================================================
	-->
	<select id="getManKpiIdInCsf" parameterClass="hashMap" resultClass="hashMap">
			SELECT MAN_KPI_ID
			  FROM MAN_METRIC
			 WHERE YEAR 	= #year#
			   AND CSF_ID 	= #csfId#
			   AND DELETE_DT IS NULL
	</select>

	<!--
	==================================================================
	  # 설명	: 처리상태를 가져온다.
	  #	기능	: SELECT
	  #	TABLE	: BSC_CODE
	==================================================================
	-->
	<select id="getStatusId" parameterClass="hashMap" resultClass="hashMap">
		SELECT
	        CODE_GRP_ID        ,
	        CODE_ID        ,
	        CODE_NM        ,
	        SORT_ORDER
	    FROM
	        BSC_CODE
	    WHERE
	        CODE_GRP_ID =  '015'
	        AND YEAR = (
	            SELECT
	                CASE YEAR_YN
	                    WHEN 'Y' THEN  #findYear#
	                    ELSE '9999'
	                END
	            FROM
	                BSC_CODE_GRP
	            WHERE
	                CODE_GRP_ID =  '015'
	        )
	        AND              DELETE_DT IS NULL
	    ORDER BY
	        SORT_ORDER,
	        CODE_ID,
	        CODE_NM
	</select>
</sqlMap>


