<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="prs.emp.prsEmpEval">

    <!--
    ==================================================================
      # 설명    : typeAlias 선언
      #    기능    : SETTING
      #    TABLE    :
    ==================================================================
    -->
    <typeAlias alias="hashMap"             type="java.util.HashMap" />

    <!--
	==================================================================
	  # 설명	: 최상위 평가조직 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_INSA_DEPT
	==================================================================
	-->
	<select id="getTopDeptInfo" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR
			 , DEPT_CD
			 , DEPT_KOR_NM
		  FROM ( SELECT YEAR, DEPT_CD, DEPT_KOR_NM FROM BSC_INSA_DEPT WHERE YEAR = #findYear# ORDER BY DISP_ORDER, DEPT_CD )
		WHERE DEPT_CD = '0000'
	</select>
	
	<!--
	==================================================================
	  # 설명	: 인사조직 왼쪽트리목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_INSA_DEPT
	==================================================================
	-->
	<select id="getDeptList" parameterClass="hashMap" resultClass="hashMap">
		SELECT
			  DEPT_CD
			, DEPT_KOR_NM
			, UP_DEPT_CD
			, UP_USER_ID
			, USE_YN
			, DEPT_LEVL AS LEVEL_ID
			, DISP_ORDER
		 FROM (
			SELECT YEAR
		       , DEPT_CD
		       , DEPT_KOR_NM
		       , UP_DEPT_CD
		       , UP_USER_ID
		       , USE_YN
		       , DEPT_LEVL
		       , DISP_ORDER
		    FROM BSC_INSA_DEPT
		   WHERE YEAR = #findYear#
		     AND USE_YN = 'T'
		     AND DEPT_CD > '1090'
		     UNION ALL
		        SELECT YEAR
		       , DEPT_CD
		       , DEPT_KOR_NM
		       , UP_DEPT_CD
		       , UP_USER_ID
		       , USE_YN
		       , DEPT_LEVL
		       , DISP_ORDER
		    FROM BSC_INSA_DEPT
		   WHERE YEAR = #findYear#
		     AND DEPT_CD = '0000' )
		ORDER BY DISP_ORDER, DEPT_CD

	</select>

	<!--
	==================================================================
	  # 설명	: 실조직 트리 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPTINFO
	==================================================================
	-->
	<select id="getRealDeptList" parameterClass="hashMap" resultClass="hashMap">
		SELECT  A.DEPT_ID AS CODE_ID
		      , A.DEPT_NM AS CODE_NM
		      , A.UP_DEPT_ID AS UP_CODE_ID
		      , LEVEL AS LEVEL_ID
		FROM  V_DEPTINFO A
		WHERE BEING_YN = 'Y'
		START WITH UP_DEPT_ID IS NULL
		CONNECT BY PRIOR DEPT_ID = UP_DEPT_ID
		ORDER SIBLINGS BY OUORDER
	</select>

    <!--
    ==================================================================
      # 설명    : 직원개인평가 목록 보기
      #    기능    : SELECT
      #    TABLE    :
    ==================================================================
    -->
    <select id="getList" parameterClass="hashMap" resultClass="hashMap">
 		SELECT YEAR
	         , DEPT_CD
	         , DEPT_KOR_NM
	         , ASSESSOR_1ST_EMPN
	         , ASSESSOR_2ND_EMPN
	         , EVAL_COUNT
	         , EVAL_GRP_YN
	         , CASE
		          WHEN EVAL_SUBMIT_YN = EVAL_COUNT THEN 'Y'
		          WHEN EVAL_SUBMIT_YN = 0 THEN 'N'
		          WHEN EVAL_COUNT = 0 OR EVAL_SUBMIT_YN = (EVAL_COUNT*2) THEN 'C'
		          ELSE 'N'
		       END
		          EVAL_SUBMIT_YN
	         , ASSESSOR_DEGREE
	         , ASSESSOR_EMPN   
	      FROM (     
		        SELECT
				      A.YEAR
				    , A.DEPT_CD
				    , F_DEPT_FULL_NM (A.YEAR, A.DEPT_CD, 'BSC_INSA_DEPT') DEPT_KOR_NM
				    , A.ASSESSOR_1ST_EMPN
		            , A.ASSESSOR_2ND_EMPN
				    , A.EVAL_COUNT
				    ,DECODE(EVAL_GRP_CNT, 0, 'N', 'Y') AS EVAL_GRP_YN
					  <isNotEmpty property="degree">
					  		<isEqual property="degree" compareValue="1">
			           			, SUM(A.EVAL_SUBMIT_YN) AS EVAL_SUBMIT_YN
			           			, '1ST' as ASSESSOR_DEGREE
					  		</isEqual>
					  		<isEqual property="degree" compareValue="2">
			           			, SUM(A.EVAL_SUBMIT_YN_2ND) AS EVAL_SUBMIT_YN
			           			, '2ND' as ASSESSOR_DEGREE
					  		</isEqual>
					 </isNotEmpty>
					 <isEmpty property="degree">
					 	, CASE WHEN A.ASSESSOR_1ST_EMPN = #findAssessorEmpn# THEN
					 				SUM(A.EVAL_SUBMIT_YN) 
					 		   ELSE 
					 		   		SUM(A.EVAL_SUBMIT_YN_2ND)
					 		    END AS EVAL_SUBMIT_YN
					 	, CASE WHEN A.ASSESSOR_1ST_EMPN = #findAssessorEmpn# THEN
					 				'1ST' 
					 		   ELSE 
					 		   		'2ND'
					 		    END AS ASSESSOR_DEGREE
					 </isEmpty>
		        	, #findAssessorEmpn# ASSESSOR_EMPN
				FROM (
				    SELECT
				          A.YEAR
				        , A.DEPT_CD
				        , A.DEPT_KOR_NM
				        , B.ASSESSOR_1ST_EMPN
		            	, B.ASSESSOR_2ND_EMPN
		            	, CASE WHEN C.EVAL_SUBMIT_YN = 'Y' THEN 1
                               WHEN C.EVAL_SUBMIT_YN = 'N' THEN 0
                               WHEN C.EVAL_SUBMIT_YN IS NULL THEN 2
                               ELSE -1
                      	  END EVAL_SUBMIT_YN
                    	, CASE WHEN C.EVAL_SUBMIT_YN_2ND = 'Y' THEN 1
                               WHEN C.EVAL_SUBMIT_YN_2ND = 'N' THEN 0
                               WHEN C.EVAL_SUBMIT_YN_2ND IS NULL THEN 2
                               ELSE -1
                      	  END EVAL_SUBMIT_YN_2ND
				        , (SELECT
				        		COUNT(1)
				            FROM PRS_EMP_MEMBER
				            WHERE YEAR = A.YEAR
				              AND DEPT_CD = A.DEPT_CD
				              AND EVAL_YN = 'Y') AS EVAL_COUNT
				        , (SELECT COUNT(EVAL_GRP_ID) 
				        	 FROM PRS_EVAL_GRP 
				        	WHERE YEAR = D.YEAR 
				        	  AND EVAL_GRP_ID = D.EVAL_GRP_ID 
				        	  AND DELETE_DT IS NULL) AS EVAL_GRP_CNT
				    FROM BSC_INSA_DEPT A
		 LEFT OUTER JOIN PRS_EMP_EVAL_ASSESSOR B
			          ON A.YEAR = B.YEAR
					 AND A.DEPT_CD = B.DEPT_CD
		 LEFT OUTER JOIN PRS_EMP_MEMBER C
					  ON B.YEAR = C.YEAR
					 AND B.DEPT_CD = C.DEPT_CD
					 AND EVAL_YN = 'Y' 
		 LEFT OUTER JOIN PRS_EMP_DEPT_EVAL_GRP D
					  ON B.YEAR = D.YEAR
					 AND B.DEPT_CD = D.DEPT_CD
		 LEFT OUTER JOIN PRS_EVAL_GRP E
		              ON D.YEAR = E.YEAR
		             AND D.EVAL_GRP_ID = E.EVAL_GRP_ID
		             AND E.DELETE_DT IS NULL 
				   WHERE A.YEAR = #findYear#
				    ) A
				LEFT OUTER JOIN PRS_EMP_EVAL_MEMBER B
				  ON A.YEAR = B.YEAR AND B.EMPN = #findAssessorEmpn#
			   WHERE A.YEAR = #findYear# 
			    <isNotEmpty property="degree">
							  		<isEqual property="degree" compareValue="1">
				            			AND ASSESSOR_1ST_EMPN = #findAssessorEmpn#
							  		</isEqual>
							  		<isEqual property="degree" compareValue="2">
				            			AND ASSESSOR_2ND_EMPN = #findAssessorEmpn#
							  		</isEqual>
				</isNotEmpty>
				<isEmpty property="degree">
					AND (ASSESSOR_1ST_EMPN = #findAssessorEmpn# OR ASSESSOR_2ND_EMPN = #findAssessorEmpn#)
				</isEmpty>
			   GROUP BY A.YEAR
                   , A.DEPT_CD
                   , A.DEPT_KOR_NM
                   , A.ASSESSOR_1ST_EMPN
                   , A.ASSESSOR_2ND_EMPN
                   , A.EVAL_COUNT
                   , EVAL_GRP_CNT
			   ORDER BY DEPT_CD
			   )
    </select>
    
    
    <!--
    ==================================================================
      # 설명    : 직원개인평가 목록 보기
      #    기능    : SELECT
      #    TABLE    :
    ==================================================================
    -->
    <select id="getEvalGrpYn" parameterClass="hashMap" resultClass="java.lang.String">
		        SELECT
				     DECODE(COUNT(A.EVAL_GRP_ID), 0, 'N', 'Y') AS EVAL_GRP_YN
				FROM (
					    SELECT
					          A.YEAR
					        , A.DEPT_CD
					        , A.DEPT_KOR_NM
					        , B.ASSESSOR_1ST_EMPN
			            	, B.ASSESSOR_2ND_EMPN
			            	, C.EVAL_SUBMIT_YN
			            	, C.EVAL_SUBMIT_YN_2ND
					        , (SELECT
					        		COUNT(1)
					            FROM PRS_EMP_MEMBER
					            WHERE YEAR = A.YEAR
					              AND DEPT_CD = A.DEPT_CD
					              AND EVAL_YN = 'Y') AS EVAL_COUNT
					        , E.EVAL_GRP_ID
					    FROM BSC_INSA_DEPT A
			 LEFT OUTER JOIN PRS_EMP_EVAL_ASSESSOR B
				          ON A.YEAR = B.YEAR
						 AND A.DEPT_CD = B.DEPT_CD
			 LEFT OUTER JOIN PRS_EMP_MEMBER C
						  ON B.YEAR = C.YEAR
						 AND B.DEPT_CD = C.DEPT_CD
						 AND EVAL_YN = 'Y'
			 LEFT OUTER JOIN PRS_EMP_DEPT_EVAL_GRP D
			              ON B.YEAR = D.YEAR
			             AND B.DEPT_CD = D.DEPT_CD
			 LEFT OUTER JOIN PRS_EVAL_GRP E
			              ON D.YEAR = E.YEAR
			             AND D.EVAL_GRP_ID = E.EVAL_GRP_ID
			             AND E.DELETE_DT IS NULL 
					   WHERE A.YEAR = #findYear#
					   GROUP BY A.YEAR,
			                    A.DEPT_CD,
			                    A.DEPT_KOR_NM,
			                    B.ASSESSOR_1ST_EMPN,
			                    B.ASSESSOR_2ND_EMPN,
			                    C.EVAL_SUBMIT_YN,
			                    C.EVAL_SUBMIT_YN_2ND,
			                    E.EVAL_GRP_ID
				    	) A
				LEFT OUTER JOIN PRS_EMP_EVAL_MEMBER B
				  ON A.YEAR = B.YEAR AND B.EMPN = #findAssessorEmpn#
			   WHERE A.YEAR = #findYear# 
			    <isNotEmpty property="degree">
							  		<isEqual property="degree" compareValue="1">
				            			AND ASSESSOR_1ST_EMPN = #findAssessorEmpn#
							  		</isEqual>
							  		<isEqual property="degree" compareValue="2">
				            			AND ASSESSOR_2ND_EMPN = #findAssessorEmpn#
							  		</isEqual>
				</isNotEmpty>
				<isEmpty property="degree">
					AND (ASSESSOR_1ST_EMPN = #findAssessorEmpn# OR ASSESSOR_2ND_EMPN = #findAssessorEmpn#)
				</isEmpty>
			   ORDER BY DEPT_CD
    </select>

    <!--
    ==================================================================
      # 설명    : 직원개인평가 평가자 목록 보기
      #    기능    : SELECT
      #    TABLE    :
    ==================================================================
    -->
    <select id="getEvalAssessor" parameterClass="hashMap" resultClass="hashMap">
		SELECT
		      YEAR
		    <!-- , DEPT_CD -->
		    , ASSESSOR_EMPN
		    , KOR_NM
		    , DEGREE
		FROM (
		    SELECT
		          A.YEAR
		        , A.DEPT_CD
		        , A.ASSESSOR_1ST_EMPN AS ASSESSOR_EMPN
		        , B.KOR_NM
		        , '1' AS DEGREE
		    FROM PRS_EMP_EVAL_ASSESSOR A
		        INNER JOIN BSC_INSA B
		            ON A.YEAR = B.YEAR
		            AND A.ASSESSOR_1ST_EMPN = B.EMPN
		    WHERE A.YEAR = #findYear#
		    UNION ALL
		    SELECT
		          A.YEAR
		        , A.DEPT_CD
		        , A.ASSESSOR_2ND_EMPN AS ASSESSOR_EMPN
		        , B.KOR_NM
		        , '2' AS DEGREE
		    FROM PRS_EMP_EVAL_ASSESSOR A
		        INNER JOIN BSC_INSA B
		            ON A.YEAR = B.YEAR
		            AND A.ASSESSOR_2ND_EMPN = B.EMPN
		    WHERE A.YEAR = #findYear#
		    )
		GROUP BY YEAR, ASSESSOR_EMPN, KOR_NM, DEGREE
		ORDER BY KOR_NM ASC
    </select>
    
    <!--
	==================================================================
	  # 설명	: 직원개인업적평가 평가군 정보 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getPrsEmpEvalGrp" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR, EVAL_GRP_ID, EVAL_GRP_NM, EVAL_METHOD_ID, EVAL_TYPE FROM PRS_EVAL_GRP WHERE YEAR = #findYear# AND EVAL_GRP_ID = #findEvalGrpId#
	</select>

	<select id="getPrsEmpEvalAssesorDeptCd" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT DEPT_ID FROM V_ROLE_USER WHERE SABUN NOT IN (SELECT CODE_ID FROM BSC_CODE WHERE CODE_GRP_ID= '181') AND SABUN = #findAssessorEmpn#
    </select>
    
    <!--
    ==================================================================
      # 설명    : 평가군
      # 기능    : SELECT
      # TABLE   : PRS_CLOSING
    ==================================================================
    -->
    <select id="getEmpSubmitYn" parameterClass="hashMap" resultClass="java.lang.String">
        SELECT
		      EMP_EVAL_YN
		FROM PRS_CLOSING
		WHERE YEAR = #findYear#
    </select>

    <!--
	==================================================================
	  # 설명	: 평가차수별평가자구분
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
    <select id="getPrsEmpEvalAssessor" parameterClass="hashMap" resultClass="hashMap">
		SELECT
		      YEAR
		    , DEPT_CD
		    , ASSESSOR_1ST_EMPN
		    , ASSESSOR_2ND_EMPN
		FROM PRS_EMP_EVAL_ASSESSOR
		WHERE YEAR = #findYear#
		  AND DEPT_CD = #deptCd#
		  AND (ASSESSOR_1ST_EMPN = #assessorEmpn# OR ASSESSOR_2ND_EMPN = #assessorEmpn#)
	</select>

    <!--
	==================================================================
	  # 설명	: 직원개인업적평가 평가항목 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getPrsEmpEvalItemList" remapResults="true" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR, A.EVAL_GRP_ID, C.EVAL_ITEM_ID, C.EVAL_ITEM_NM, C.SCORE, C.CONTENT
		  FROM PRS_EVAL_GRP A
		     , PRS_EVAL_GRP_ITEM B
		     , PRS_EVAL_ITEM C
		 WHERE A.YEAR = #findYear#
		   AND A.EVAL_GRP_ID = #findEvalGrpId#
		   AND A.YEAR = B.YEAR
		   AND A.EVAL_GRP_ID = B.EVAL_GRP_ID
		   AND A.YEAR = C.YEAR
		   AND B.EVAL_ITEM_ID = C.EVAL_ITEM_ID
		 ORDER BY C.SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 평가군 가져오기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getPrsEmpGroupCd" remapResults="true" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT
		      EVAL_GRP_ID
		FROM PRS_EMP_DEPT_EVAL_GRP
		WHERE YEAR = #findYear#
		  AND DEPT_CD = #deptCd#
	</select>

	<!--
	==================================================================
	  # 설명	: 평가등급가져오기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getPrsEmpEvalGrade" remapResults="true" parameterClass="hashMap" resultClass="hashMap">
		 SELECT A.YEAR
		      , A.EVAL_METHOD_ID
		      , A.GRADE_ITEM_ID
		      , A.GRADE_ITEM_NM
		      , A.EVAL_METHOD_GBN_ID
		      , A.GRADE_ITEM_RATE
		      , A.GRADE_ITEM_SCORE
		      , (SELECT COUNT(1) FROM PRS_EMP_MEMBER WHERE YEAR =  #findYear# AND DEPT_CD =  #deptCd# AND EVAL_YN = 'Y') ITEM_CNT
		      , NVL(B.ITEM_DISTRI_CNT, 0) * FLOOR((SELECT COUNT (1) FROM PRS_EMP_MEMBER WHERE YEAR = #findYear# AND DEPT_CD =  #deptCd# AND EVAL_YN = 'Y') / B.ITEM_CNT)  + NVL (C.ITEM_DISTRI_CNT, 0) ITEM_DISTRI_CNT
		   FROM BSC_ECM_GRADE_DISTRI_EVAL_ITEM A
		   LEFT OUTER JOIN (
		                    SELECT YEAR, EVAL_METHOD_ID, GRADE_ITEM_ID, ITEM_CNT, ITEM_DISTRI_CNT
		                      FROM BSC_ECM_GRADE_DISTRI_TAB
		                     WHERE (YEAR, EVAL_METHOD_ID, ITEM_CNT) IN (
		                                                                SELECT YEAR, EVAL_METHOD_ID, MAX(ITEM_CNT)
		                                                                  FROM BSC_ECM_GRADE_DISTRI_TAB
		                                                                 WHERE YEAR= #findYear# AND EVAL_METHOD_ID = #evalMethodId#
		                                                                 GROUP BY YEAR, EVAL_METHOD_ID
		                                                               )
		        ) B
		     ON A.YEAR = B.YEAR AND A.EVAL_METHOD_ID = B.EVAL_METHOD_ID AND A.GRADE_ITEM_ID = B.GRADE_ITEM_ID
		   LEFT OUTER JOIN (
		                    SELECT YEAR, EVAL_METHOD_ID, GRADE_ITEM_ID, ITEM_CNT, ITEM_DISTRI_CNT
		                      FROM BSC_ECM_GRADE_DISTRI_TAB
		                     WHERE YEAR = #findYear# AND EVAL_METHOD_ID = #evalMethodId#
		                       AND ITEM_CNT = MOD(  (
		                                                SELECT COUNT(1)
		                                                  FROM PRS_EMP_MEMBER
		                                                 WHERE YEAR =  #findYear# AND DEPT_CD =  #deptCd# AND EVAL_YN = 'Y'),
		                                            (
		                                                SELECT MAX(ITEM_CNT)
		                                                  FROM BSC_ECM_GRADE_DISTRI_TAB
		                                                 WHERE YEAR= #findYear# AND EVAL_METHOD_ID = #evalMethodId#))
		        ) C
		     ON A.YEAR = C.YEAR AND A.EVAL_METHOD_ID = C.EVAL_METHOD_ID AND A.GRADE_ITEM_ID = C.GRADE_ITEM_ID
		  WHERE A.YEAR =  #findYear#
		    AND A.EVAL_METHOD_ID =  #evalMethodId#
		  ORDER BY A.SORT_ORDER
	</select>

    <!--
    ==================================================================
      # 설명    : 직원개인평가 상세 보기
      #    기능    : SELECT
      #    TABLE    :
    ==================================================================
    -->
    <select id="getPrsEmpEvalMemberList" remapResults="true" parameterClass="hashMap" resultClass="hashMap">
        SELECT
		      T1.YEAR
		    , T1.EMPN
		    , T1.KOR_NM
		    , T1.EVAL_GRP_ID
		    , T1.DEPT_CD
		    , T1.ASSESSOR_1ST_EMPN
		    , T1.ASSESSOR_2ND_EMPN
		    , <iterate property="itemArray" conjunction=",">
		     	 MAX($itemArray[]$) $itemArray[]$
		      </iterate>
		    , T1.EVAL_SUBMIT_YN
            , T1.GRADE
            , T1.SCORE
            , T1.RANK
		FROM (
		        SELECT
		              A.YEAR
		            , A.EMPN
		            , A.KOR_NM
		            , A.DEPT_CD
		            , D.ASSESSOR_1ST_EMPN
		            , D.ASSESSOR_2ND_EMPN
		            , B.EVAL_GRP_ID
		            , B.EVAL_ITEM_ID
		            , B.EVAL_ITEM_NM
		            , C.GRADE_1ST
		            , <isNotEmpty property="assessorDegree">
					  		<isEqual property="assessorDegree" compareValue="1ST">
		            			<iterate property="itemArray" conjunction=",">
									CASE WHEN B.EVAL_ITEM_ID = '$itemArray[]$' THEN C.GRADE_1ST ELSE NULL END $itemArray[]$
					  			</iterate>
					  		</isEqual>
					  		<isEqual property="assessorDegree" compareValue="2ND">
		            			<iterate property="itemArray" conjunction=",">
									CASE WHEN B.EVAL_ITEM_ID = '$itemArray[]$' THEN C.GRADE_2ND ELSE NULL END $itemArray[]$
					  			</iterate>
					  		</isEqual>
					  </isNotEmpty>
		            , E.GRADE
		            <isNotEmpty property="assessorDegree">
						<isEqual property="assessorDegree" compareValue="1ST">
							, A.SCORE_1ST AS SCORE
		            		, A.RANKING_1ST AS RANK
		            		, A.EVAL_SUBMIT_YN
						</isEqual>
						<isEqual property="assessorDegree" compareValue="2ND">
							, A.SCORE_2ND AS SCORE
		            		, A.RANKING_2ND AS RANK
		            		, A.EVAL_SUBMIT_YN_2ND AS EVAL_SUBMIT_YN
						</isEqual>
					</isNotEmpty>
		        FROM PRS_EMP_MEMBER A
		            INNER JOIN (SELECT
		                              T1.YEAR
		                            , T1.EVAL_GRP_ID
		                            , T1.EVAL_ITEM_ID
		                            , T2.EVAL_ITEM_NM
		                        FROM PRS_EVAL_GRP_ITEM T1
		                            INNER JOIN PRS_EVAL_ITEM T2
		                                ON T1.YEAR = T2.YEAR
		                                AND T1.EVAL_ITEM_ID = T2.EVAL_ITEM_ID
		                        WHERE T1.YEAR = #findYear#
		                          AND T1.EVAL_GRP_ID = #findEvalGrpId#) B
		                ON A.YEAR = B.YEAR
		                AND B.EVAL_GRP_ID = #findEvalGrpId#
		            LEFT OUTER JOIN PRS_EMP_EVAL_GRADE C
		                ON A.YEAR = C.YEAR
		                AND A.EMPN = C.EMPN
		                AND B.EVAL_GRP_ID = C.EVAL_GRP_ID
		                AND B.EVAL_ITEM_ID = C.EVAL_ITEM_ID
		            LEFT OUTER JOIN PRS_EMP_EVAL_ASSESSOR D
		                ON A.YEAR = D.YEAR
		                AND A.DEPT_CD = D.DEPT_CD
		            LEFT OUTER JOIN PRS_EMP_EVAL_MEMBER E
			            ON A.YEAR = E.YEAR
			            AND A.EMPN = E.EMPN
			            AND E.EVAL_GRP_ID = #findEvalGrpId#
		        WHERE A.YEAR = #findYear#
		          AND A.DEPT_CD = #deptCd#
		          AND A.EVAL_YN = 'Y'
		        ORDER BY A.EMPN, B.EVAL_ITEM_ID
		) T1
		WHERE T1.YEAR = #findYear#
		GROUP BY T1.YEAR, T1.EMPN, T1.KOR_NM, T1.EVAL_GRP_ID, T1.DEPT_CD
		       , T1.ASSESSOR_1ST_EMPN, T1.ASSESSOR_2ND_EMPN, T1.EVAL_SUBMIT_YN, T1.GRADE, T1.SCORE, T1.RANK
		ORDER BY T1.KOR_NM
    </select>

	<!--
	==================================================================
	  # 설명	: 직원평가기간 조회
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_SCHEDULE
	==================================================================
	-->
	<select id="getEvalSchedule" parameterClass="hashMap" resultClass="hashMap">
		SELECT EMP_START_DT, EMP_END_DT
		     , CASE WHEN SYSDATE BETWEEN TO_DATE(EMP_START_DT, 'rrrr-mm-dd') AND TO_DATE(EMP_END_DT || '23:59:59', 'rrrr-mm-dd hh24:mi:ss') THEN 'T'
		            ELSE 'N' END EVAL_YN
		  FROM PRS_EVAL_SCHEDULE
		 WHERE 1 = 1
		 <isNotEmpty prepend="AND" property="findYear">
			YEAR = #findYear#
		 </isNotEmpty>
		 <isNotEmpty prepend="AND" property="year">
			YEAR = #year#
		 </isNotEmpty>
	</select>

    <!--
	==================================================================
	  # 설명	: 간부개인업적평가 평가항목별 등급별 인원수
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getPrsEmpEvalItemGradeCount" parameterClass="hashMap" resultClass="hashMap">
		SELECT EVAL_ITEM_ID
			 , EVAL_ITEM_NM
			 , SCORE, CONTENT
		     , <iterate property="itemArray" conjunction=",">
		     	 SUM($itemArray[]$) $itemArray[]$
		       </iterate>
		  FROM (
		        SELECT A.EVAL_ITEM_ID, A.EVAL_ITEM_NM, A.SORT_ORDER, A.SCORE, A.CONTENT,
				<iterate property="itemArray" conjunction=",">
					<isNotEmpty property="assessorDegree">
						<isEqual property="assessorDegree" compareValue="1ST">
							CASE WHEN B.GRADE_1ST = '$itemArray[]$' THEN 1 ELSE 0 END $itemArray[]$
						</isEqual>
						<isEqual property="assessorDegree" compareValue="2ND">
							CASE WHEN B.GRADE_2ND = '$itemArray[]$' THEN 1 ELSE 0 END $itemArray[]$
						</isEqual>
					</isNotEmpty>
				</iterate>
		          FROM (
		                SELECT A.YEAR, A.EVAL_GRP_ID, C.EVAL_ITEM_ID, C.EVAL_ITEM_NM, C.SORT_ORDER, C.SCORE, C.CONTENT
		                  FROM PRS_EVAL_GRP A
		                     , PRS_EVAL_GRP_ITEM B
		                     , PRS_EVAL_ITEM C
		                 WHERE A.YEAR = #findYear#
		                   AND A.EVAL_GRP_ID = #findEvalGrpId#
		                   AND A.YEAR = B.YEAR
		                   AND A.EVAL_GRP_ID = B.EVAL_GRP_ID
		                   AND A.YEAR = C.YEAR
		                   AND B.EVAL_ITEM_ID = C.EVAL_ITEM_ID
		               ) A
		          LEFT OUTER JOIN PRS_EMP_EVAL_GRADE B
          			ON A.YEAR = B.YEAR AND A.EVAL_ITEM_ID = B.EVAL_ITEM_ID AND A.EVAL_GRP_ID = B.EVAL_GRP_ID
          			<isNotEmpty property="assessorDegree">
						<isEqual property="assessorDegree" compareValue="1ST">
							AND B.ASSESSOR_1ST_EMPN = #findEmpn#
						</isEqual>
						<isEqual property="assessorDegree" compareValue="2ND">
							AND B.ASSESSOR_2ND_EMPN = #findEmpn#
						</isEqual>
					</isNotEmpty>
					AND B.EMPN IN (SELECT EMPN FROM PRS_EMP_MEMBER WHERE YEAR = A.YEAR AND DEPT_CD = #deptCd# AND EVAL_YN = 'Y')
		       )
		 GROUP BY EVAL_ITEM_ID, EVAL_ITEM_NM, SCORE, CONTENT, SORT_ORDER
		 ORDER BY SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 직원개인평가 평가제출여부
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP, BSC_ECM_GRADE_DISTRI_EVAL_ITEM
	==================================================================
	-->
	<select id="getEvalSubmitYn" remapResults="true" parameterClass="hashMap" resultClass="java.lang.String">
        SELECT EVAL_SUBMIT_YN FROM PRS_EMP_EVAL_MEMBER WHERE YEAR = #findYear# AND EVAL_GRP_ID = #findEvalGrpId# AND EMPN = #assessorEmpn#
	</select>
	
	<!--
	==================================================================
	  # 설명	: 직원개인평가 평가제출여부(부서별)
	  #	기능	: SELECT
	  #	TABLE	: PRS_EMP_MEMBER
	==================================================================
	-->
	<select id="getDeptEvalSubmitYn" remapResults="true" parameterClass="hashMap" resultClass="java.lang.String">
        SELECT 
        <isNotEmpty property="assessorDegree">
			<isEqual property="assessorDegree" compareValue="1ST">
				EVAL_SUBMIT_YN
			</isEqual>
			<isEqual property="assessorDegree" compareValue="2ND">
				EVAL_SUBMIT_YN_2ND
			</isEqual>
		</isNotEmpty> 
        EVAL_SUBMIT_YN FROM PRS_EMP_MEMBER WHERE YEAR = #findYear# AND DEPT_CD =#deptCd# AND EVAl_YN = 'Y' GROUP BY YEAR, DEPT_CD,EVAL_SUBMIT_YN,EVAL_SUBMIT_YN_2ND 
	</select>
	
	<!--
	==================================================================
	  # 설명	: 직원개인평가 평가자 차수 
	  #	기능	: SELECT
	  #	TABLE	: PRS_EMP_EVAL_ASSESSOR
	==================================================================
	-->
	<select id="getAssessorDegree" remapResults="true" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT CASE WHEN ASSESSOR_1ST_EMPN = #findAssessorEmpn# THEN
		                 '1ST'
		            WHEN ASSESSOR_2ND_EMPN = #findAssessorEmpn# THEN
		                 '2ND'
		            ELSE '1ST'
		            END DEGREE
		  FROM PRS_EMP_EVAL_ASSESSOR
		 WHERE YEAR = #fineYear#
		   AND DEPT_CD = #deptCd# 
	</select>

	<!--
	==================================================================
	  # 설명	: 직원개인평가 저장
	  #	기능	: MERGE INTO
	  #	TABLE	: PRS_MNG_EVAL
	==================================================================
	-->
	<insert id="saveEval1stGrade" parameterClass="hashMap">
        MERGE INTO PRS_EMP_EVAL_GRADE A
		    USING (SELECT #year# AS YEAR, #evalGrpId# AS EVAL_GRP_ID, #empn# AS EMPN, #evalItemId# AS EVAL_ITEM_ID
		                , #assessorEmpn# AS ASSESSOR_1ST_EMPN, #evalGrade# AS GRADE_1ST
		           FROM DUAL)B
		    ON (A.YEAR = B.YEAR AND A.EVAL_GRP_ID = B.EVAL_GRP_ID AND A.EMPN = B.EMPN AND A.EVAL_ITEM_ID = B.EVAL_ITEM_ID)
		    WHEN MATCHED THEN
		        UPDATE SET A.GRADE_1ST = B.GRADE_1ST, A.ASSESSOR_1ST_EMPN = B.ASSESSOR_1ST_EMPN
		    WHEN NOT MATCHED THEN
		        INSERT (A.YEAR, A.EVAL_GRP_ID, A.EMPN, A.EVAL_ITEM_ID, A.ASSESSOR_1ST_EMPN, GRADE_1ST, CREATE_DT)
		        VALUES(B.YEAR, B.EVAL_GRP_ID, B.EMPN, B.EVAL_ITEM_ID, B.ASSESSOR_1ST_EMPN, B.GRADE_1ST, SYSDATE)
	</insert>

	<!--
	==================================================================
	  # 설명	: 직원개인평가 저장
	  #	기능	: MERGE INTO
	  #	TABLE	: PRS_MNG_EVAL
	==================================================================
	-->
	<insert id="saveEval2ndGrade" parameterClass="hashMap">
        MERGE INTO PRS_EMP_EVAL_GRADE A
		    USING (SELECT #year# AS YEAR, #evalGrpId# AS EVAL_GRP_ID, #empn# AS EMPN, #evalItemId# AS EVAL_ITEM_ID
		                , #assessorEmpn# AS ASSESSOR_2ND_EMPN, #evalGrade# AS GRADE_2ND
		           FROM DUAL)B
		    ON (A.YEAR = B.YEAR AND A.EVAL_GRP_ID = B.EVAL_GRP_ID AND A.EMPN = B.EMPN AND A.EVAL_ITEM_ID = B.EVAL_ITEM_ID)
		    WHEN MATCHED THEN
		        UPDATE SET A.GRADE_2ND = B.GRADE_2ND, A.ASSESSOR_2ND_EMPN = B.ASSESSOR_2ND_EMPN
		    WHEN NOT MATCHED THEN
		        INSERT (A.YEAR, A.EVAL_GRP_ID, A.EMPN, A.EVAL_ITEM_ID, A.ASSESSOR_2ND_EMPN, GRADE_2ND, CREATE_DT)
		        VALUES(B.YEAR, B.EVAL_GRP_ID, B.EMPN, B.EVAL_ITEM_ID, B.ASSESSOR_2ND_EMPN, B.GRADE_2ND, SYSDATE)
	</insert>

	<!--
    ==================================================================
      # 설명    : 직원개인평가 점수 수정
      #    기능    : UPDATE
      #    TABLE    :
    ==================================================================
    -->
    <update id="saveEval1stScore" parameterClass="hashMap">
        UPDATE PRS_EMP_MEMBER SET
		      SCORE_1ST = #score#
		    , RANKING_1ST = #rank#
		    , EVAL_SUBMIT_YN = #evalSubmitYn#
		WHERE YEAR = #year#
		  AND EMPN = #empn#
    </update>

    <update id="saveEval2ndScore" parameterClass="hashMap">
        UPDATE PRS_EMP_MEMBER SET
		      SCORE_2ND = #score#
		    , RANKING_2ND = #rank#
		    , EVAL_SUBMIT_YN_2ND = #evalSubmitYn#
		WHERE YEAR = #year#
		  AND EMPN = #empn#
    </update>

    <!--
	==================================================================
	  # 설명	: 직원개인업적평가 평가N으로 변경
	  #	기능	: UPDATE
	  #	TABLE	: PRS_EMP_MEMBER
	==================================================================
	-->
	<update id="updateEvalSubmitYn" parameterClass="hashMap">
         MERGE INTO PRS_EMP_MEMBER A
            USING (SELECT #year# AS YEAR, #evalSubmitYn# AS EVAL_SUBMIT_YN, #deptCd# as DEPT_CD
                   FROM DUAL)B
            ON (A.YEAR = B.YEAR AND A.DEPT_CD = B.DEPT_CD AND EVAL_YN = 'Y')
            WHEN MATCHED THEN
            <isNotEmpty property="assessorDegree">
			<isEqual property="assessorDegree" compareValue="1ST">
				UPDATE SET A.EVAL_SUBMIT_YN = B.EVAL_SUBMIT_YN
			</isEqual>
			<isEqual property="assessorDegree" compareValue="2ND">
				UPDATE SET A.EVAL_SUBMIT_YN_2ND = B.EVAL_SUBMIT_YN
			</isEqual>
		</isNotEmpty> 
<!--             
        UPDATE PRS_EMP_MEMBER SET
        	   EVAL_YN = #evalSubmitYn#
        WHERE YEAR = #year#
        AND DEPT_CD = #deptCd#
 -->        
	</update>
	
    <!--
	==================================================================
	  # 설명	: 직원개인업적평가 평가제출
	  #	기능	: UPDATE
	  #	TABLE	: PRS_MNG_EVAL_GRP_ASSESSOR
	==================================================================
	-->
	<update id="updatePrsEmpEvalSubmitYn" parameterClass="hashMap">
        MERGE INTO PRS_EMP_EVAL_MEMBER A
            USING (SELECT #year# AS YEAR, #evalGrpId# AS EVAL_GRP_ID, #assessorEmpn# AS ASSESOR_EMPN, #evalSubmitYn# AS EVAL_SUBMIT_YN
                   FROM DUAL)B
            ON (A.YEAR = B.YEAR AND A.EVAL_GRP_ID = B.EVAL_GRP_ID AND A.EMPN = B.ASSESOR_EMPN)
            WHEN MATCHED THEN
                UPDATE SET A.EVAL_SUBMIT_YN = B.EVAL_SUBMIT_YN
            WHEN NOT MATCHED THEN
                INSERT (A.YEAR, A.EVAL_GRP_ID, A.EMPN, A.EVAL_SUBMIT_YN, A.CREATE_DT)
                VALUES(B.YEAR, B.EVAL_GRP_ID, B.ASSESOR_EMPN, B.EVAL_SUBMIT_YN, SYSDATE)
	</update>

    <!--
    ==================================================================
      # 설명    : 직원개인평가 등록
      #    기능    : INSERT
      #    TABLE    :
    ==================================================================
    -->
    <insert id="insertData" parameterClass="hashMap">
        <selectKey resultClass="java.lang.String" keyProperty="SEQ" >
            SELECT F_PGM_SERI('','','','','','') SEQ FROM DUAL
        </selectKey>
        INSERT INTO  (
             ) VALUES (
             )
    </insert>

    <!--
    ==================================================================
      # 설명    : 직원개인평가 수정
      #    기능    : UPDATE
      #    TABLE    :
    ==================================================================
    -->
    <update id="updateData" parameterClass="hashMap">
        UPDATE
           SET          WHERE 1 = 1

    </update>


    <!--
    ==================================================================
      # 설명    : 직원개인평가 삭제
      #    기능    : UPDATE
      #    TABLE    :
    ==================================================================
    -->
    <update id="deleteData" parameterClass="hashMap">
        DELETE FROM
         WHERE 1 = 1

    </update>


</sqlMap>


