<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="cbe.excep.excepAction">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />
	 

	<!--
	==================================================================   
	  # 설명	: 평가실시 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR,
               A.EVAL_DEGREE_ID,
               A.SC_DEPT_ID,
               B.SC_DEPT_NM,
               A.EVAL_USER_ID,
               A.EVAL_METHOD_ID,
               (SELECT USER_NM FROM V_ROLE_USER WHERE USER_ID=A.EVAL_USER_ID) EVAL_USER_NM,
               NVL(A.EVAL_SUBMIT_YN,'N') EVAL_SUBMIT_YN
         FROM BSC_SPE_EVAL_DEPT A
         INNER JOIN(
                     SELECT YEAR,
                            SC_DEPT_ID,
                            SUBSTR(SYS_CONNECT_BY_PATH(SC_DEPT_NM,'>'),2, length(SYS_CONNECT_BY_PATH(SC_DEPT_NM,'>')))SC_DEPT_NM                                 
                       FROM ( SELECT * FROM BSC_SC_DEPT WHERE YEAR = #findYear#)         
                      WHERE DELETE_DT IS NULL                                
                      START WITH UP_SC_DEPT_ID IS NULL                        
                      CONNECT BY PRIOR SC_DEPT_ID = UP_SC_DEPT_ID) B ON A.YEAR=B.YEAR AND A.SC_DEPT_ID=B.SC_DEPT_ID
         LEFT OUTER JOIN BSC_ECM_EVAL_GRADE_CONVERT_TAB C ON A.YEAR=C.YEAR AND A.EVAL_METHOD_ID=C.EVAL_METHOD_ID                    
        WHERE A.YEAR=#findYear#
          AND A.EVAL_DEGREE_ID=#findEvalDegreeId#
          <isNotEmpty property="findEvalUserId" prepend="AND">
       			A.EVAL_USER_ID = #findEvalUserId#
       	  </isNotEmpty> 
        ORDER BY A.SORT_ORDER  
	</select>
	
	 <!--
	==================================================================   
	  # 설명	: 평가근거담당자 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getUserList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.EVAL_USER_ID,
               B.USER_NM AS EVAL_USER_NM
		  FROM BSC_SPE_EVAL_DEPT A
		  LEFT OUTER JOIN V_ROLE_USER B ON A.EVAL_USER_ID=B.USER_ID
		 WHERE A.YEAR=#findYear#
		   AND A.EVAL_DEGREE_ID=#findEvalDegreeId#
    </select>
    
    <!--
	==================================================================   
	  # 설명	: 평가 등록기한 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->	
	<select id="getEvalPeriodYn" parameterClass="hashMap" resultClass="java.lang.String">
		  SELECT CASE WHEN TO_CHAR( SYSDATE , 'YYYYMMDD') BETWEEN  SEPA_EVAL_START_DT AND SEPA_EVAL_END_DT THEN 'Y' ELSE 'N' END AS EVAL_PERIOD_YN      
            FROM BSC_ECM_EVAL_DEGREE 
           WHERE YEAR = #findYear#
             AND EVAL_DEGREE_ID = #findEvalDegreeId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가실시 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
		 SELECT A.EVAL_DEGREE_ID,
	            BEED.EVAL_DEGREE_NM,
	            A.SC_DEPT_ID,
	            SC.SC_DEPT_NM,
	            A.EVAL_METHOD_ID,
	            B.EVAL_METHOD_NM,
	            NVL(A.EVAL_SUBMIT_YN,'N') AS EVAL_SUBMIT_YN, 
	            C.EVAL_BASE,
	            A.GRADE_ITEM_ID
          FROM  BSC_SPE_EVAL_DEPT A
	            INNER JOIN BSC_ECM_EVAL_DEGREE BEED
	            ON A.YEAR = BEED.YEAR
	            AND A.EVAL_DEGREE_ID = BEED.EVAL_DEGREE_ID
	            INNER JOIN BSC_SC_DEPT SC
	            ON A.YEAR = SC.YEAR
	            AND A.SC_DEPT_ID = SC.SC_DEPT_ID
	            AND SC.DELETE_DT IS NULL
	            INNER JOIN BSC_ECM_EVAL_GRADE_CONVERT_TAB B
	            ON A.YEAR = B.YEAR
	            AND A.EVAL_METHOD_ID = B.EVAL_METHOD_ID
	            LEFT OUTER JOIN BSC_SPE_EVAL_BASE C
	            ON A.YEAR = C.YEAR
	            AND A.EVAL_DEGREE_ID = C.EVAL_DEGREE_ID
	            AND A.SC_DEPT_ID = C.SC_DEPT_ID
		  WHERE A.YEAR = #year#
    		AND A.SC_DEPT_ID = #scDeptId#  
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 파일 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_SPE_EVAL_BASE_ATTACH
	==================================================================
	-->
	<select id="getFileList" parameterClass="hashMap" resultClass="hashMap">
 		SELECT A.YEAR
	         , A.EVAL_DEGREE_ID
	         , A.SC_DEPT_ID
	         , A.SEQ
	         , A.ATTACH_FILE_NM
	         , A.ATTACH_FILE_FNM
	         , A.ATTACH_FILE_SUFFIX
	         , F_ENCRYPT(A.ATTACH_FILE_PATH, #encryptionCode#) ATTACH_FILE_PATH
         FROM BSC_SPE_EVAL_BASE_ATTACH A
        WHERE A.YEAR = #year#
		   AND A.EVAL_DEGREE_ID = #evalDegreeId#
		   AND A.SC_DEPT_ID = #scDeptId#
  	</select>
  	
  	<!--
	==================================================================   
	  # 설명	: 파일 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_SPE_EVAL_BASE_ATTACH
	==================================================================
	-->
	<select id="getGradeList" parameterClass="hashMap" resultClass="hashMap">
 		  SELECT A.GRADE_ITEM_ID,
                 A.GRADE_ITEM_NM
            FROM BSC_ECM_GRADE_DISTRI_EVAL_ITEM A
           WHERE YEAR = #year#
             AND EVAL_METHOD_ID = #evalMethodId#
           ORDER BY SORT_ORDER
  	</select>
  	
	<!--
	==================================================================   
	  # 설명	: 평가실시 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->	
	<insert id="insertData" parameterClass="hashMap">
		<selectKey resultClass="java.lang.String" keyProperty="SEQ" >
			SELECT F_PGM_SERI('BSC_SPE_EVAL_DEPT','','','','','') SEQ FROM DUAL
		</selectKey>
		INSERT INTO BSC_SPE_EVAL_DEPT ( 
			   YEAR
			 , EVAL_DEGREE_ID
			 , SC_DEPT_ID
			 , EVAL_BASE_CHARGE_USER_ID
			 , EVAL_USER_ID
			 , EVAL_METHOD_ID
			 , GRADE_ITEM_ID
			 , EVAL_SUBMIT_YN
			 , CREATE_DT
			 , SORT_ORDER
			 ) VALUES ( 
			   #year#
			 , #SEQ#
			 , #scDeptId#
			 , #evalBaseChargeUserId#
			 , #evalUserId#
			 , #evalMethodId#
			 , #gradeItemId#
			 , #evalSubmitYn#
			 , SYSDATE
			 , #sortOrder#
			 )
	</insert>	
	
	<!--
	==================================================================   
	  # 설명	: 평가실시 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->	
	<update id="updateData" parameterClass="hashMap">
		UPDATE BSC_SPE_EVAL_DEPT 
		   SET GRADE_ITEM_ID          = #gradeItemId#, 
		       GRADE_ITEM_NM          = (SELECT GRADE_ITEM_NM 
		                                   FROM BSC_ECM_GRADE_DISTRI_EVAL_ITEM 
		                                  WHERE YEAR = #year# 
		                                    AND EVAL_METHOD_ID = #evalMethodId#
		                                    AND GRADE_ITEM_ID = #gradeItemId#),
			   MODIFY_DT              = SYSDATE 
		 WHERE 1 = 1 
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND SC_DEPT_ID = #scDeptId#		
	</update>	
	
	<!--
	==================================================================   
	  # 설명	: 평가실시 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->	
	<update id="updateSubmitData" parameterClass="hashMap">
		UPDATE BSC_SPE_EVAL_DEPT 
		   SET EVAL_SUBMIT_YN = #evalSubmitYn#
		 WHERE 1 = 1 
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND SC_DEPT_ID = #scDeptId#		
	</update>	
	

	<!--
	==================================================================   
	  # 설명	: 평가실시 삭제
	  #	기능	: UPDATE
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->	
	<update id="deleteData" parameterClass="hashMap">
		DELETE FROM BSC_SPE_EVAL_DEPT 
		 WHERE 1 = 1 
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND SC_DEPT_ID = #scDeptId#
	</update>
	
	
</sqlMap>


