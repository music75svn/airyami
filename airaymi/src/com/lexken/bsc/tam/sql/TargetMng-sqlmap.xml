<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="bsc.tam.targetMng">

	<!--
	==================================================================
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />


	<!--
	==================================================================
	  # 설명	: 목표입력 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		SELECT 'TARGET' LV
		     , MAX( CASE WHEN M.MON = '01' THEN TARGET END ) MON01
		     , MAX( CASE WHEN M.MON = '02' THEN TARGET END ) MON02
		     , MAX( CASE WHEN M.MON = '03' THEN TARGET END ) MON03
		     , MAX( CASE WHEN M.MON = '04' THEN TARGET END ) MON04
		     , MAX( CASE WHEN M.MON = '05' THEN TARGET END ) MON05
		     , MAX( CASE WHEN M.MON = '06' THEN TARGET END ) MON06
		     , MAX( CASE WHEN M.MON = '07' THEN TARGET END ) MON07
		     , MAX( CASE WHEN M.MON = '08' THEN TARGET END ) MON08
		     , MAX( CASE WHEN M.MON = '09' THEN TARGET END ) MON09
		     , MAX( CASE WHEN M.MON = '10' THEN TARGET END ) MON10
		     , MAX( CASE WHEN M.MON = '11' THEN TARGET END ) MON11
		     , MAX( CASE WHEN M.MON = '12' THEN TARGET END ) MON12
		  FROM
		    (SELECT TO_CHAR(LEVEL, 'FM00') AS MON
		       FROM DUAL
		    CONNECT BY LEVEL <![CDATA[ <= ]]> 12
		    ) M
		    LEFT OUTER JOIN
		    (SELECT MON, TGT_VALUE AS TARGET
		       FROM BSC_TARGET
		      WHERE 1=1
		        AND YEAR = #findYear#
		        AND METRIC_ID = #metricId#
		        AND ANAL_CYCLE = 'M'
		        <isNotEqual property="findTargetStatusId" compareValue="ALLSTATUS">
			        <isNotEmpty prepend="AND" property="findTargetStatusId">
						NVL(TGT_STATUS_ID, '01') = #findTargetStatusId#
					</isNotEmpty>
		        </isNotEqual>
		    ) T
		    ON M.MON = T.MON
	</select>

	<!--
	==================================================================
	  # 설명	: 목표입력월 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ACT_REG_DEF_MON
	==================================================================
	-->
	<select id="getInputYnList" parameterClass="hashMap" resultClass="hashMap">
		SELECT M.MON - 1 AS MON
             , NVL( INPUT_YN, 'N') AS INPUT_YN
             , SUM(CASE WHEN INPUT_YN = 'Y' THEN 1 ELSE 0 END) OVER(PARTITION BY NULL) AS INPUT_MON_CNT
          FROM
            (SELECT TO_CHAR(LEVEL, 'FM00') AS MON
               FROM DUAL
            CONNECT BY LEVEL <![CDATA[ <= ]]> 12
            ) M
            LEFT OUTER JOIN
            (SELECT MON, 'Y' AS INPUT_YN
               FROM BSC_ACT_REG_DEF_MON
              WHERE 1=1
                AND YEAR = #findYear#
                AND METRIC_ID = #metricId#
            ) R
            ON M.MON = R.MON
        ORDER BY MON
	</select>

	<!--
	==================================================================
	  # 설명	: 목표 입력상태 가져오기
	  #	기능	: SELECT
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<select id="getTargetStatusId" parameterClass="hashMap" resultClass="hashMap">
		SELECT MAX(CONTENT) AS CONTENT
			 , NVL(MAX(TGT_STATUS_ID), '01') AS TARGET_STATUS_ID
			 , NULL AS CYCLE_ID
		  FROM BSC_TARGET
		 WHERE 1=1
		   AND YEAR = #year#
		   AND METRIC_ID = #metricId#
		   <isNotEqual property="findTargetStatusId" compareValue="ALLSTATUS">
			   <isNotEmpty prepend="AND" property="findTargetStatusId">
					NVL(TGT_STATUS_ID, '01') = #findTargetStatusId#
				</isNotEmpty>
		   </isNotEqual>

	</select>

	<!--
	==================================================================
	  # 설명	: 목표 입력자 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getInsertUserList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.INSERT_USER_ID, B.USER_NM AS INSERT_USER_NM
          FROM BSC_METRIC A
          	   LEFT OUTER JOIN V_ROLE_USER B
          	   		ON A.INSERT_USER_ID = B.USER_ID
<!--
          	   INNER JOIN BSC_KPI_APPROVE C
          	   		ON A.YEAR = C.YEAR
          	   		AND A.SC_DEPT_ID = C.SC_DEPT_ID
          	   		AND C.DELETE_DT IS NULL
 			   LEFT OUTER JOIN BSC_TARGET D
 			   		ON A.YEAR = D.YEAR
 			   		AND A.METRIC_ID = D.METRIC_ID
 -->
         WHERE A.YEAR = #findYear#
		   AND A.TYPE_ID = '01'
<!--
		   AND D.ANAL_CYCLE ='M'
-->
           AND A.TAM_SHARE_YN = 'N'
<!--
           AND A.TGT_INSERT_GUBUN = '02'
-->
           AND A.DELETE_DT IS NULL
           AND A.APPROVE_USER_ID IS NOT NULL
<!--
           AND C.APPROVE_STATUS_ID = '04'
 -->
           AND A.INSERT_USER_ID IS NOT NULL
           AND B.USER_NM IS NOT NULL

<!--
           AND D.TGT_STATUS_ID =( SELECT CODE_ID FROM BSC_CODE WHERE CODE_GRP_ID = '015' AND CODE_ID =#findTargetStatusId#)
 -->
         GROUP BY A.INSERT_USER_ID, B.USER_NM
         ORDER BY B.USER_NM ASC
	</select>

	<!--
	==================================================================
	  # 설명	: 목표 승인자 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getApproveUserList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.APPROVE_USER_ID
			 , B.USER_NM AS APPROVE_USER_NM
          FROM BSC_METRIC A
	           LEFT OUTER JOIN V_ROLE_USER B
	           ON A.APPROVE_USER_ID = B.USER_ID
<!--
	           INNER JOIN BSC_KPI_APPROVE C
	           ON A.YEAR = C.YEAR
	           AND A.SC_DEPT_ID = C.SC_DEPT_ID
	           AND C.DELETE_DT IS NULL
 -->
         WHERE A.YEAR = #findYear#
           AND A.TYPE_ID = '01'
           AND A.TAM_SHARE_YN = 'N'
           AND A.TGT_INSERT_GUBUN = '02'
           AND A.DELETE_DT IS NULL
<!--
           AND C.APPROVE_STATUS_ID = '04'
 -->
           AND A.APPROVE_USER_ID IS NOT NULL
           AND B.USER_NM IS NOT NULL
         GROUP BY A.APPROVE_USER_ID, B.USER_NM
         ORDER BY B.USER_NM ASC
	</select>

	<!--
	==================================================================
	  # 설명	: 목표 확인자 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getCheckUserList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.APPROVE_USER_ID
			 , B.USER_NM AS APPROVE_USER_NM
          FROM BSC_METRIC A
	           LEFT OUTER JOIN V_ROLE_USER B
	           ON A.APPROVE_USER_ID = B.USER_ID
<!--
	           INNER JOIN BSC_KPI_APPROVE C
	           ON A.YEAR = C.YEAR
	           AND A.SC_DEPT_ID = C.SC_DEPT_ID
	           AND C.DELETE_DT IS NULL
 -->
         WHERE A.YEAR = #findYear#
           AND A.TYPE_ID = '01'
           AND A.TAM_SHARE_YN = 'N'
           AND A.TGT_INSERT_GUBUN = '02'
           AND A.DELETE_DT IS NULL
<!--
           AND C.APPROVE_STATUS_ID = '04'
 -->
           AND A.APPROVE_USER_ID IS NOT NULL
           AND B.USER_NM IS NOT NULL
         GROUP BY A.APPROVE_USER_ID, B.USER_NM
         ORDER BY B.USER_NM ASC
	</select>


	<!--
	==================================================================
	  # 설명	: 목표입력기한 여부 가져오기
	  #	기능	: SELECT
	  #	TABLE	: BSC_TGT_IN_TERM
	==================================================================
	-->
	<select id="getTargetInputTermYn" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT CASE WHEN MAX(YEAR) IS NULL THEN 'N'
		            WHEN MAX(YEAR) IS NOT NULL THEN 'Y'
		       END IS_INPUT_TERM
		  FROM BSC_TGT_IN_TERM
		 WHERE YEAR = #findYear#
           AND START_DT <![CDATA[ <= ]]> TO_CHAR(SYSDATE,'YYYYMMDD')
           AND END_DT   <![CDATA[ >= ]]> TO_CHAR(SYSDATE,'YYYYMMDD')
    </select>



	<!--
	==================================================================
	  # 설명	: 실적입력 트리 조직 데이터 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getInsertScDeptTree" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.SC_DEPT_ID
		     , B.SC_DEPT_NM
		     , '1' AS PARAM
		FROM BSC_METRIC A
	         INNER JOIN BSC_SC_DEPT B
	         	ON A.YEAR = B.YEAR
	         	AND A.SC_DEPT_ID = B.SC_DEPT_ID
	         	AND B.DELETE_DT IS NULL
<!--
	         INNER JOIN BSC_KPI_APPROVE C
	         	ON A.YEAR = C.YEAR
	         	AND A.SC_DEPT_ID = C.SC_DEPT_ID
	         	AND C.DELETE_DT IS NULL
 -->
	         LEFT OUTER JOIN
	         (SELECT YEAR, METRIC_ID, MAX(TGT_STATUS_ID) AS TGT_STATUS_ID
	              FROM BSC_TARGET
	             WHERE 1=1
	               AND YEAR = #findYear#
	             GROUP BY YEAR, METRIC_ID) D
	         ON A.YEAR = D.YEAR AND A.METRIC_ID = D.METRIC_ID
		WHERE A.YEAR = #findYear#

		  <isNotEmpty prepend="AND" property="findInsertUserId">
		  	A.INSERT_USER_ID = #findInsertUserId#
		  </isNotEmpty>
		  <isEmpty	prepend="AND" property="findInsertUserId">
		  	A.INSERT_USER_ID IS NULL
		  </isEmpty>

		  <isNotEmpty prepend="AND" property="findScDeptId">
		  	A.SC_DEPT_ID = #findScDeptId#
		  </isNotEmpty>

		  AND A.TYPE_ID = '01'
          AND A.TAM_SHARE_YN = 'N'
<!--
          AND A.TGT_INSERT_GUBUN = '02'
-->
          AND A.DELETE_DT IS NULL
<!--
          AND C.APPROVE_STATUS_ID = '04'
 -->
		  <isNotEqual property="findTargetStatusId" compareValue="ALLSTATUS">
			  <isNotEmpty prepend="AND" property="findTargetStatusId">
				NVL(D.TGT_STATUS_ID, '01')  = #findTargetStatusId#
			  </isNotEmpty>
		  </isNotEqual>

		GROUP BY B.LEVEL_ID, B.SORT_ORDER, A.SC_DEPT_ID, B.SC_DEPT_NM
		ORDER BY B.LEVEL_ID, B.SORT_ORDER, A.SC_DEPT_ID
	</select>



	<!--
	==================================================================
	  # 설명	: 목표입력 트리 지표 데이터 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getInsertMetricTree" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
		     , A.METRIC_ID
		     , A.METRIC_NM
		     , A.SC_DEPT_ID
		     , B.SC_DEPT_NM
		     , '2' AS PARAM
		     , NVL(T.TGT_STATUS_ID, '01') AS TARGET_STATUS_ID
		     , (SELECT ETC1
                  FROM BSC_CODE
                 WHERE YEAR = (SELECT CASE YEAR_YN WHEN 'Y' THEN #findYear# ELSE '9999' END FROM BSC_CODE_GRP WHERE CODE_GRP_ID = '015')
                   AND CODE_GRP_ID = '015' AND CODE_ID =  NVL(T.TGT_STATUS_ID, '01') AND DELETE_DT IS NULL) AS TARGET_STATUS_NM
		FROM BSC_METRIC A
			 INNER JOIN BSC_SC_DEPT B
			 ON A.YEAR = B.YEAR
			 AND A.SC_DEPT_ID = B.SC_DEPT_ID
			 AND B.DELETE_DT IS NULL
			 LEFT OUTER JOIN
			 (SELECT YEAR, METRIC_ID, MAX(TGT_STATUS_ID) AS TGT_STATUS_ID
	              FROM BSC_TARGET
	             WHERE 1=1
	               AND YEAR = #findYear#
	             GROUP BY YEAR, METRIC_ID) T
			 ON A.YEAR = T.YEAR AND A.METRIC_ID = T.METRIC_ID
<!--
			 INNER JOIN BSC_KPI_APPROVE C
			 ON A.YEAR = C.YEAR
			 AND A.SC_DEPT_ID = C.SC_DEPT_ID
			 AND C.DELETE_DT IS NULL
 -->
		WHERE A.YEAR = #findYear#

		  <isNotEmpty prepend="AND" property="findInsertUserId">
		  	A.INSERT_USER_ID = #findInsertUserId#
		  </isNotEmpty>
		  <isEmpty prepend="AND" property="findInsertUserId">
		  	A.INSERT_USER_ID IS NULL
		  </isEmpty>

		  <isNotEmpty prepend="AND" property="findScDeptId">
		  	A.SC_DEPT_ID = #findScDeptId#
		  </isNotEmpty>

		  AND A.TYPE_ID = '01'
          AND A.TAM_SHARE_YN = 'N'
          AND A.TGT_INSERT_GUBUN = '02'
          AND A.DELETE_DT IS NULL
<!--
		  AND C.APPROVE_STATUS_ID = '04'
 -->
		  <isNotEqual property="findTargetStatusId" compareValue="ALLSTATUS">
			  <isNotEmpty prepend="AND" property="findTargetStatusId">
				NVL(T.TGT_STATUS_ID, '01')  = #findTargetStatusId#
			  </isNotEmpty>
		  </isNotEqual>
		 ORDER BY B.LEVEL_ID, B.SORT_ORDER, B.SC_DEPT_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 목표입력 트리 승인 데이터 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<select id="getApproveScDeptTree" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.SC_DEPT_ID
		     , B.SC_DEPT_NM
		     , '1' AS PARAM
		FROM BSC_METRIC A
	         INNER JOIN BSC_SC_DEPT B
	         		ON A.YEAR = B.YEAR
	         		AND A.SC_DEPT_ID = B.SC_DEPT_ID
	         		AND B.DELETE_DT IS NULL
<!--
	         INNER JOIN BSC_KPI_APPROVE C
	         		ON A.YEAR = C.YEAR
	         		AND A.SC_DEPT_ID = C.SC_DEPT_ID
	         		AND C.DELETE_DT IS NULL
 -->
	         LEFT OUTER JOIN
	         	(SELECT YEAR, METRIC_ID, MAX(TGT_STATUS_ID) AS TGT_STATUS_ID
	             FROM BSC_TARGET
	             WHERE 1=1
	               AND YEAR = #findYear#
	             GROUP BY YEAR, METRIC_ID) D
	         ON A.YEAR = D.YEAR AND A.METRIC_ID = D.METRIC_ID
		WHERE A.YEAR = #findYear#

		<isNotEqual property="findApproveUserId" compareValue="ALL">
		  <isNotEmpty prepend="AND" property="findApproveUserId">
		  	A.APPROVE_USER_ID = #findApproveUserId#
		  </isNotEmpty>
		  <isEmpty prepend="AND" property="findApproveUserId">
		  	A.APPROVE_USER_ID IS NULL
		  </isEmpty>
		</isNotEqual>

		  <isNotEmpty prepend="AND" property="findScDeptId">
		  	A.SC_DEPT_ID = #findScDeptId#
		  </isNotEmpty>

		  AND A.TYPE_ID = '01'
          AND A.TAM_SHARE_YN = 'N'
          AND A.TGT_INSERT_GUBUN = '02'
          AND A.DELETE_DT IS NULL
<!--
          AND C.APPROVE_STATUS_ID = '04'
 -->
		  <isNotEqual property="findTargetStatusId" compareValue="ALLSTATUS">
			  <isNotEmpty prepend="AND" property="findTargetStatusId">
				NVL(D.TGT_STATUS_ID, '01')  = #findTargetStatusId#
			  </isNotEmpty>
		  </isNotEqual>

		GROUP BY B.LEVEL_ID, B.SORT_ORDER, A.SC_DEPT_ID, B.SC_DEPT_NM
		ORDER BY B.LEVEL_ID, B.SORT_ORDER, A.SC_DEPT_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 목표입력 트리 확인 데이터 조회(확인)
	  #	기능	: SELECT
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<select id="getCheckScDeptTree" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.SC_DEPT_ID
		     , B.SC_DEPT_NM
		     , '1' AS PARAM
		FROM BSC_METRIC A
	         INNER JOIN BSC_SC_DEPT B
	         		ON A.YEAR = B.YEAR
	         		AND A.SC_DEPT_ID = B.SC_DEPT_ID
	         		AND B.DELETE_DT IS NULL
<!--
	         INNER JOIN BSC_KPI_APPROVE C
	         		ON A.YEAR = C.YEAR
	         		AND A.SC_DEPT_ID = C.SC_DEPT_ID
	         		AND C.DELETE_DT IS NULL
 -->
	         LEFT OUTER JOIN
	         	(SELECT YEAR, METRIC_ID, MAX(TGT_STATUS_ID) AS TGT_STATUS_ID
	             FROM BSC_TARGET
	             WHERE 1=1
	               AND YEAR = #findYear#
	             GROUP BY YEAR, METRIC_ID) D
	         ON A.YEAR = D.YEAR AND A.METRIC_ID = D.METRIC_ID
		WHERE A.YEAR = #findYear#

		  <isNotEmpty prepend="AND" property="findApproveUserId">
		  	A.APPROVE_USER_ID = #findApproveUserId#
		  </isNotEmpty>

		  <isNotEmpty prepend="AND" property="findScDeptId">
		  	A.SC_DEPT_ID = #findScDeptId#
		  </isNotEmpty>

		  AND A.TYPE_ID = '01'
          AND A.TAM_SHARE_YN = 'N'
          AND A.TGT_INSERT_GUBUN = '02'
          AND A.DELETE_DT IS NULL
<!--
          AND C.APPROVE_STATUS_ID = '04'
 -->
		  <isNotEmpty prepend="AND" property="findTargetStatusId">
			NVL(D.TGT_STATUS_ID, '01')  = #findTargetStatusId#
		  </isNotEmpty>
		GROUP BY B.LEVEL_ID, B.SORT_ORDER, A.SC_DEPT_ID, B.SC_DEPT_NM
		ORDER BY B.LEVEL_ID, B.SORT_ORDER, A.SC_DEPT_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 목표입력 트리 지표 데이터 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getApproveMetricTree" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
		     , A.METRIC_ID
		     , A.METRIC_NM
		     , A.SC_DEPT_ID
		     , B.SC_DEPT_NM
		     , '2' AS PARAM
		     , NVL(T.TGT_STATUS_ID, '01') AS TARGET_STATUS_ID
		     , (SELECT ETC1
                  FROM BSC_CODE
                 WHERE YEAR = (SELECT CASE YEAR_YN WHEN 'Y' THEN #findYear# ELSE '9999' END FROM BSC_CODE_GRP WHERE CODE_GRP_ID = '015')
                   AND CODE_GRP_ID = '015' AND CODE_ID =  NVL(T.TGT_STATUS_ID, '01') AND DELETE_DT IS NULL) AS TARGET_STATUS_NM
		FROM BSC_METRIC A
			 INNER JOIN BSC_SC_DEPT B ON A.YEAR = B.YEAR AND A.SC_DEPT_ID = B.SC_DEPT_ID AND B.DELETE_DT IS NULL
			 LEFT OUTER JOIN
			 (SELECT YEAR, METRIC_ID, MAX(TGT_STATUS_ID) AS TGT_STATUS_ID
	              FROM BSC_TARGET
	             WHERE 1=1
	               AND YEAR = #findYear#
	             GROUP BY YEAR, METRIC_ID) T
			 ON A.YEAR = T.YEAR AND A.METRIC_ID = T.METRIC_ID
<!--
			 INNER JOIN BSC_KPI_APPROVE C
			 ON A.YEAR = C.YEAR
			 AND A.SC_DEPT_ID = C.SC_DEPT_ID
			 AND C.DELETE_DT IS NULL
 -->
		WHERE A.YEAR = #findYear#

		  <isNotEqual property="findApproveUserId" compareValue="ALL">
			  <isNotEmpty prepend="AND" property="findApproveUserId">
			  	A.APPROVE_USER_ID = #findApproveUserId#
			  </isNotEmpty>
			  <isEmpty prepend="AND" property="findApproveUserId">
			  	A.APPROVE_USER_ID IS NULL
			  </isEmpty>
		  </isNotEqual>

		  <isNotEmpty prepend="AND" property="findScDeptId">
		  	A.SC_DEPT_ID = #findScDeptId#
		  </isNotEmpty>

		  AND A.TYPE_ID = '01'
          AND A.TAM_SHARE_YN = 'N'
          AND A.TGT_INSERT_GUBUN = '02'
          AND A.DELETE_DT IS NULL
<!--
		  AND C.APPROVE_STATUS_ID = '04'
 -->
 		  <isNotEqual property="findTargetStatusId" compareValue="ALLSTATUS">
			  <isNotEmpty prepend="AND" property="findTargetStatusId">
				NVL(T.TGT_STATUS_ID, '01')  = #findTargetStatusId#
			  </isNotEmpty>
		  </isNotEqual>
		 ORDER BY B.LEVEL_ID, B.SORT_ORDER, B.SC_DEPT_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 목표입력 트리 지표 데이터 조회(확인)
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getCheckMetricTree" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
		     , A.METRIC_ID
		     , A.METRIC_NM
		     , A.SC_DEPT_ID
		     , B.SC_DEPT_NM
		     , '2' AS PARAM
		     , NVL(T.TGT_STATUS_ID, '01') AS TARGET_STATUS_ID
		     , (SELECT ETC1
                  FROM BSC_CODE
                 WHERE YEAR = (SELECT CASE YEAR_YN WHEN 'Y' THEN #findYear# ELSE '9999' END FROM BSC_CODE_GRP WHERE CODE_GRP_ID = '015')
                   AND CODE_GRP_ID = '015' AND CODE_ID =  NVL(T.TGT_STATUS_ID, '01') AND DELETE_DT IS NULL) AS TARGET_STATUS_NM
		FROM BSC_METRIC A
			 INNER JOIN BSC_SC_DEPT B ON A.YEAR = B.YEAR AND A.SC_DEPT_ID = B.SC_DEPT_ID AND B.DELETE_DT IS NULL
			 LEFT OUTER JOIN
			 (SELECT YEAR, METRIC_ID, MAX(TGT_STATUS_ID) AS TGT_STATUS_ID
	              FROM BSC_TARGET
	             WHERE 1=1
	               AND YEAR = #findYear#
	             GROUP BY YEAR, METRIC_ID) T
			 ON A.YEAR = T.YEAR AND A.METRIC_ID = T.METRIC_ID
<!--
			 INNER JOIN BSC_KPI_APPROVE C
			 ON A.YEAR = C.YEAR
			 AND A.SC_DEPT_ID = C.SC_DEPT_ID
			 AND C.DELETE_DT IS NULL
 -->
		WHERE A.YEAR = #findYear#

		  <isNotEmpty prepend="AND" property="findApproveUserId">
		  	A.APPROVE_USER_ID = #findApproveUserId#
		  </isNotEmpty>

		  <isNotEmpty prepend="AND" property="findScDeptId">
		  	A.SC_DEPT_ID = #findScDeptId#
		  </isNotEmpty>

		  AND A.TYPE_ID = '01'
          AND A.TAM_SHARE_YN = 'N'
          AND A.TGT_INSERT_GUBUN = '02'
          AND A.DELETE_DT IS NULL
<!--
		  AND C.APPROVE_STATUS_ID = '04'
 -->
		  <isNotEmpty prepend="AND" property="findTargetStatusId">
			NVL(T.TGT_STATUS_ID, '01')  = #findTargetStatusId#
		  </isNotEmpty>
		 ORDER BY B.LEVEL_ID, B.SORT_ORDER, B.SC_DEPT_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 목표입력 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR
			 , MON
			 , METRIC_ID
			 , TGT_VALUE AS TARGET
		  FROM BSC_TARGET
		 WHERE 1 = 1
		   AND ANAL_CYCLE = 'M'
		   AND YEAR = #year#
		   AND MON = #mon#
		   AND METRIC_ID = #metricId#
		   <isNotEmpty prepend="AND" property="findTargetStatusId">
			   NVL(TGT_STATUS_ID, '01') = #findTargetStatusId#
		   </isNotEmpty>
	</select>

	<!--
	==================================================================
	  # 설명	: 목표입력자 엑셀다운로드
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getExcelList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR,
			B.USER_NM,
			A.METRIC_NM,
			(SELECT ETC1
			FROM BSC_CODE
			WHERE YEAR = (SELECT CASE YEAR_YN WHEN 'Y' THEN #findYear# ELSE '9999' END
							FROM BSC_CODE_GRP
							WHERE CODE_GRP_ID = '015')
							AND CODE_GRP_ID = '015'
							AND CODE_ID = NVL (T.TGT_STATUS_ID, '01')
							AND DELETE_DT IS NULL) AS TARGET_STATUS_NM
			FROM BSC_METRIC A
			LEFT OUTER JOIN V_ROLE_USER B
			ON A.INSERT_USER_ID = B.USER_ID
			LEFT OUTER JOIN (  SELECT YEAR,
								METRIC_ID,
								MAX (TGT_STATUS_ID) AS TGT_STATUS_ID
								FROM BSC_TARGET
								WHERE 1 = 1 AND YEAR = #findYear#
								GROUP BY YEAR, METRIC_ID) T
			ON A.YEAR = T.YEAR AND A.METRIC_ID = T.METRIC_ID
			WHERE A.YEAR = #findYear#
			ORDER BY B.USER_NM ASC
	</select>

<!--
	==================================================================
	  # 설명	: 목표확인자 엑셀다운로드
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getExcelList1" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR,
			B.USER_NM,
			A.METRIC_NM,
			(SELECT ETC1
			FROM BSC_CODE
			WHERE YEAR = (SELECT CASE YEAR_YN WHEN 'Y' THEN #findYear# ELSE '9999' END
							FROM BSC_CODE_GRP
							WHERE CODE_GRP_ID = '015')
							AND CODE_GRP_ID = '015'
							AND CODE_ID = NVL (T.TGT_STATUS_ID, '01')
							AND DELETE_DT IS NULL) AS TARGET_STATUS_NM
			FROM BSC_METRIC A
			LEFT OUTER JOIN V_ROLE_USER B
			ON A.APPROVE_USER_ID = B.USER_ID
			LEFT OUTER JOIN (  SELECT YEAR,
								METRIC_ID,
								MAX (TGT_STATUS_ID) AS TGT_STATUS_ID
								FROM BSC_TARGET
								WHERE 1 = 1 AND YEAR = #findYear#
								GROUP BY YEAR, METRIC_ID) T
			ON A.YEAR = T.YEAR AND A.METRIC_ID = T.METRIC_ID
			WHERE A.YEAR = #findYear#
			ORDER BY B.USER_NM ASC
	</select>

	<!--
	==================================================================
	  # 설명	: 목표입력 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<insert id="insertData" parameterClass="hashMap">
		INSERT INTO BSC_TARGET (
			   YEAR
			 , MON
			 , ANAL_CYCLE
			 , METRIC_ID
			 , TGT_VALUE
			 , CREATE_DT
			 ) VALUES (
			   #year#
			 , #mon#
			 , 'M'
			 , #metricId#
			 , #target#
			 , SYSDATE
			 )
	</insert>



	<!--
	==================================================================
	  # 설명	: 파라미터 맵
	  #	기능	: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<parameterMap id="paramMap" class="java.util.HashMap">
		<parameter property="year" 				jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="mon" 				jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="analCycle" 		jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="metricId" 			jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="target" 			jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="targetStatusId" 	jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="loginUserId" 		jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="loginUserNm" 		jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="content" 			jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
	</parameterMap>

	<!--
	==================================================================
	  # 설명	: 실적등록
	  #	기능	: PROCEDURES
	  #	TABLE	: BSC_ACTUAL
	==================================================================
	-->
	<procedure id="insertDataProc" parameterMap="paramMap">
		{CALL BSC_TAM.TARGET_INSERT(?, ?, ?, ?, ?, ?, ?, ?, ?)}
	</procedure>


	<!--
	==================================================================
	  # 설명	: 파라미터 맵
	  #	기능	: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<parameterMap id="paramMap" class="java.util.HashMap">
		<parameter property="year" 			jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="metricId" 		jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
	</parameterMap>

	<!--
	==================================================================
	  # 설명	: 실적등록
	  #	기능	: PROCEDURES
	  #	TABLE	: BSC_ACTUAL
	==================================================================
	-->
	<procedure id="targetTimeRollup" parameterMap="paramMap">
		{CALL SP_BSC_TIME_ROLLUP_PLAN(?, ?)}
	</procedure>


	<!--
	==================================================================
	  # 설명	: 목표상태입력 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<update id="updateData" parameterClass="hashMap">
		UPDATE BSC_TARGET
		   SET TGT_STATUS_ID          = #targetStatusId#
		     , INSERT_USER_ID         = #insertUserId#
		     , INSERT_USER_NM         = #insertUserNm#
		 WHERE YEAR = #year#
		   AND METRIC_ID = #metricId#
	</update>

	<!--
	==================================================================
	  # 설명	: 목표상태 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_ACTUAL
	==================================================================
	-->
	<update id="updateStatusData" parameterClass="hashMap">
		UPDATE BSC_TARGET
		   SET TGT_STATUS_ID = #targetStatusId#
		   	, RETURN_REASON    = #returnReason#
		 WHERE YEAR = #year#
           AND METRIC_ID = #metricId#
	</update>

	<!--
	==================================================================
	  # 설명	: 목표상태 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_ACTUAL
	==================================================================
	-->
	<update id="updateReturnStatusData" parameterClass="hashMap">
		UPDATE BSC_TARGET
		   SET TGT_STATUS_ID = #targetStatusId#
		     , RETURN_REASON    = #returnReason#
		     , RETURN_DT        = SYSDATE
		 WHERE YEAR = #year#
           AND METRIC_ID = #metricId#
	</update>


	<!--
	==================================================================
	  # 설명	: 목표입력 삭제
	  #	기능	: UPDATE
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<update id="deleteData" parameterClass="hashMap">
		DELETE FROM BSC_TARGET
		 WHERE YEAR = #year#
		   AND METRIC_ID = #metricId#
	</update>

	<!--
	==================================================================
	  # 설명	: 목표 첨부파일 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_TARGET_ATTACH
	==================================================================
	-->
	<insert id="insertFileInfo" parameterClass="hashMap">
		<selectKey resultClass="java.lang.String" keyProperty="SEQ" >
			SELECT NVL(MAX(SEQ)+1,1) FROM BSC_TARGET_ATTACH WHERE YEAR=#year# AND METRIC_ID=#metricId#
		</selectKey>
		INSERT INTO BSC_TARGET_ATTACH (
               YEAR
             , METRIC_ID
             , SEQ
             , ATTACH_FILE_NM
             , ATTACH_FILE_FNM
             , ATTACH_FILE_SUFFIX
             , ATTACH_FILE_PATH
             , CREATE_DT
           ) VALUES (
               #year#
             , #metricId#
             , #SEQ#
             , #attachFileNm#
             , #attachFileFnm#
             , #attachFileSuffix#
             , #attachFilePath#
             , SYSDATE
    	   )
	</insert>

	<!--
	==================================================================
	  # 설명	: 목표 첨부파일 삭제
	  #	기능	: INSERT
	  #	TABLE	: BSC_TARGET_ATTACH
	==================================================================
	-->
	<delete id="deleteFileInfo" parameterClass="hashMap">
		DELETE FROM BSC_TARGET_ATTACH
		 WHERE YEAR = #year#
		   AND METRIC_ID = #metricId#
		   AND SEQ = #seq#
	</delete>

	<!--
	==================================================================
	  # 설명	: 목표 파일 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_TARGET_ATTACH
	==================================================================
	-->
	<select id="getFileList" parameterClass="hashMap" resultClass="hashMap">
 		SELECT A.YEAR
	         , A.METRIC_ID
	         , A.SEQ
	         , A.ATTACH_FILE_NM
	         , A.ATTACH_FILE_FNM
	         , A.ATTACH_FILE_SUFFIX
	         , F_ENCRYPT(A.ATTACH_FILE_PATH, #encryptionCode#) ATTACH_FILE_PATH
         FROM BSC_TARGET_ATTACH A
         	  INNER JOIN
              (SELECT YEAR, METRIC_ID,  TGT_STATUS_ID
                 FROM BSC_TARGET
                WHERE 1=1
                  AND YEAR = #year#
                  AND METRIC_ID = #metricId#
                  AND ANAL_CYCLE = 'M'
                  <isNotEqual property="findTargetStatusId" compareValue="ALLSTATUS">
	                  <isNotEmpty prepend="AND" property="findTargetStatusId">
						   NVL(TGT_STATUS_ID, '01') = #findTargetStatusId#
					  </isNotEmpty>
                  </isNotEqual>
                GROUP BY YEAR, METRIC_ID ,TGT_STATUS_ID
               ) T
               ON A.YEAR = T.YEAR
               AND A.METRIC_ID= T.METRIC_ID
        WHERE A.YEAR = #year#
          AND A.METRIC_ID = #metricId#
        ORDER BY A.SEQ
	</select>

	<!--
	==================================================================
	  # 설명	: 목표반려 사유 가져오기
	  #	기능	: SELECT
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<select id="getReturnReason" parameterClass="hashMap" resultClass="java.lang.String">
        SELECT MAX(RETURN_REASON) AS RETURN_REASON
          FROM BSC_TARGET
		 WHERE YEAR = #year#
           AND METRIC_ID = #metricId#
           AND ANAL_CYCLE = 'M'
	</select>

	<!--
	==================================================================
	  # 설명	: 목표값 계산기 저장내역 가져오기
	  #	기능	: SELECT
	  #	TABLE	: BSC_TARGET_AUTO_CAL
	==================================================================
	-->
	<select id="getTargetCalculSetting" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR, METRIC_ID
		     , RES_OF_5_BEF, RES_OF_4_BEF, RES_OF_3_BEF, RES_OF_2_BEF, RES_OF_1_BEF
		     , WEIGHT_OF_3_BEF, WEIGHT_OF_2_BEF, WEIGHT_OF_1_BEF
		     , BEST_TARGET, LOWEST_TARGET, FREE_TARGET
		  FROM BSC_TARGET_AUTO_CAL
		 WHERE 1=1
		   AND YEAR = #year#
		   AND METRIC_ID = #metricId#
	</select>


	<!--
	==================================================================
	  # 설명	: 목표값 계산기 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_TARGET_AUTO_CAL
	==================================================================
	-->
	<insert id="insertTargetCalcul" parameterClass="hashMap">
		INSERT INTO BSC_TARGET_AUTO_CAL (
               YEAR, METRIC_ID
             , RES_OF_5_BEF, RES_OF_4_BEF, RES_OF_3_BEF, RES_OF_2_BEF, RES_OF_1_BEF
             , WEIGHT_OF_3_BEF, WEIGHT_OF_2_BEF, WEIGHT_OF_1_BEF
             , BEST_TARGET, LOWEST_TARGET, FREE_TARGET
             , CREATE_DT
           ) VALUES (
               #year#, #metricId#
             , #resOf5Bef#, #resOf4Bef#, #resOf3Bef#, #resOf2Bef#, #resOf1Bef#
             , #weightOf3Bef#, #weightOf2Bef#, #weightOf1Bef#
             , #bestTarget#, #lowestTarget#, #freeTarget#
             , SYSDATE
           )
	</insert>

	<!--
	==================================================================
	  # 설명	: 목표값 계산기 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_TARGET_AUTO_CAL
	==================================================================
	-->
	<delete id="deleteTargetCalcul" parameterClass="hashMap">
		DELETE FROM BSC_TARGET_AUTO_CAL
		 WHERE YEAR = #year#
		   AND METRIC_ID = #metricId#
	</delete>


</sqlMap>


