<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="mem.base.memUser">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: MEM_USER
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />

	<!--
	==================================================================   
	  # 설명	: 평가대상자관리 변경정보조회 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: MEM_USER
	==================================================================
	-->
	<select id="getModifyEmpList" parameterClass="hashMap" resultClass="hashMap">
		SELECT * FROM(
		    SELECT
		           A.YEAR
		         , A.EMP_NO
		         , A.EMP_NM
		         , A.DEPT_CD
		         , F_DEPT_LEV2_NM(A.YEAR, A.DEPT_CD) AS DEPT_NM
		         , A.CAST_TC
		         , A.POS_TC
		         , F_CODE_NM('170', A.CAST_TC , A.YEAR) AS CAST_NM 
		         , F_CODE_NM('171', A.POS_TC , A.YEAR) AS POS_NM
		         , B.DEPT_CD AS BSC_DEPT_CD
		         , B.CAST_TC AS BSC_CAST_TC
		         , B.POS_TC AS BSC_POS_TC
		         , F_CODE_NM('170', B.CAST_TC , A.YEAR) AS BSC_CAST_NM 
		         , F_CODE_NM('171', B.POS_TC , A.YEAR) AS BSC_POS_NM
		         , F_DEPT_LEV2_NM(A.YEAR, B.DEPT_CD) AS BSC_DEPT_NM
		      FROM MEM_USER A
		         , BSC_INSA B
		     WHERE A.EMP_NO = B.EMPN
		       AND A.YEAR = #findYear#
           <isNotEmpty prepend="AND" property="findEmpNm2">
           		   A.EMP_NM LIKE '%' || TRIM(#findEmpNm2#) || '%'
           </isNotEmpty>
		) WHERE 1 = 1
           <isEmpty prepend="AND" property="findModifyGubun">
		    (
		         DEPT_CD != BSC_DEPT_CD
		    	 OR CAST_TC != BSC_CAST_TC
		    	 OR POS_TC != BSC_POS_TC
		    )
           </isEmpty>
           <isNotEmpty property="findModifyGubun">
           	   <isEqual prepend="AND" property="findModifyGubun" compareValue="01">
           	     DEPT_CD != BSC_DEPT_CD
           	   </isEqual>
           	   <isEqual prepend="AND" property="findModifyGubun" compareValue="02">
           	     CAST_TC != BSC_CAST_TC
           	   </isEqual>
           	   <isEqual prepend="AND" property="findModifyGubun" compareValue="03">
           	     POS_TC != BSC_POS_TC
           	   </isEqual>
           </isNotEmpty>
		ORDER BY EMP_NM
	</select>

	<!--
	==================================================================   
	  # 설명	: 평가대상자관리 변경정보  적용
	  #	기능	: UPDATE
	  #	TABLE	: MEM_USER
	==================================================================
	-->	
	<update id="updateBscApplyData" parameterClass="hashMap">
		UPDATE MEM_USER 
           SET DEPT_CD           = #bscDeptCd#
             , CAST_TC           = #bscCastTc#
             , POS_TC            = #bscPosTc#
		     , MODIFY_DT         = SYSDATE 
		     , BSC_MODIFY_DT     = SYSDATE 
		 WHERE YEAR = #year#
		   AND EMP_NO = #empNo#
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 평가대상자 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: MEM_USER
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
             , A.EMP_NO
             , A.EMP_NM
             , A.DEPT_CD
             , F_DEPT_LEV2_NM(A.YEAR, A.DEPT_CD) AS DEPT_NM
             , A.CAST_TC
             , A.POS_TC
			 , F_CODE_NM('170', A.CAST_TC , A.YEAR) CAST_NM 
			 , F_CODE_NM('171', A.POS_TC , A.YEAR) POS_NM 
             , A.EVAL_GRP_ID
             , (SELECT EVAL_GRP_NM FROM MEM_EVAL_GRP WHERE YEAR = A.YEAR AND EVAL_GRP_ID = A.EVAL_GRP_ID) AS EVAL_GRP_NM
             , A.EVAL_1_EMP_NO
             , A.EVAL_1_EMP_NM
             , A.EVAL_1_DEPT_CD
             , A.EVAL_1_CAST_TC
             , A.EVAL_1_POS_TC
             , A.EVAL_2_EMP_NO
             , A.EVAL_2_EMP_NM
             , A.EVAL_2_DEPT_CD
             , A.EVAL_2_CAST_TC
             , A.EVAL_2_POS_TC
             , A.EVAL_TGT_YN
             , A.EVAL_EXP_RS_ID
             , A.METRIC_STATUS_ID
             , TO_CHAR(A.BSC_MODIFY_DT, 'YYYY.MM.DD') AS BSC_MODIFY_DT
             , (SELECT COUNT(*) FROM MEM_PEER_EVAL_USER WHERE YEAR = A.YEAR AND EVAL_PEER_EMP_NO = A.EMP_NO) AS EVAL_PEER_COUNT
			 , F_CODE_NM('241', A.EVAL_TGT_YN , A.YEAR) EVAL_TGT_YN_NM
			 , F_CODE_NM('242', A.EVAL_EXP_RS_ID , A.YEAR) EVAL_EXP_RS_ID_NM
          FROM MEM_USER A
         WHERE 1 =1
           AND A.YEAR=#findYear#
           <isNotEmpty prepend="AND" property="findDeptCd">
           A.DEPT_CD = #findDeptCd#
           </isNotEmpty>
           <isNotEmpty prepend="AND" property="findCastTc">
           A.CAST_TC = #findCastTc#
           </isNotEmpty>
           <isNotEmpty prepend="AND" property="findPosTc">
           A.POS_TC = #findPosTc#
           </isNotEmpty>
           <isNotEmpty prepend="AND" property="findEmpNm">
           A.EMP_NM LIKE '%' || TRIM(#findEmpNm#) || '%'
           </isNotEmpty>
           <isEqual prepend="AND" property="findBscModifyYn" compareValue="Y">
           A.BSC_MODIFY_DT IS NOT NULL
           </isEqual>
           <isEqual prepend="AND" property="findBscModifyYn" compareValue="N">
           A.BSC_MODIFY_DT IS NULL
           </isEqual>
          ORDER BY A.EMP_NM
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가그룹목록 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: MEM_USER
	==================================================================
	-->
	<select id="getEvalGrpList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.EVAL_GRP_ID
             , A.EVAL_GRP_NM
          FROM MEM_EVAL_GRP A
         WHERE A.YEAR=#findYear#
           AND DELETE_DT IS NULL
          ORDER BY A.SORT_ORDER
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가대상자 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: MEM_USER
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
             , A.EMP_NO
             , A.EMP_NM
             , A.DEPT_CD
             , F_DEPT_LEV2_NM(A.YEAR, A.DEPT_CD) AS DEPT_NM
             , A.CAST_TC
             , A.POS_TC
             , A.EVAL_GRP_ID
             , A.EVAL_1_EMP_NO
             , A.EVAL_1_EMP_NM
             , A.EVAL_1_DEPT_CD
             , A.EVAL_1_CAST_TC
             , A.EVAL_1_POS_TC
             , A.EVAL_2_EMP_NO
             , A.EVAL_2_EMP_NM
             , A.EVAL_2_DEPT_CD
             , A.EVAL_2_CAST_TC
             , A.EVAL_2_POS_TC
             , A.EVAL_TGT_YN
             , A.EVAL_EXP_RS_ID
             , A.METRIC_STATUS_ID 
		  FROM MEM_USER A
		 WHERE YEAR = #year#
		   AND A.EMP_NO = #empNo#	      
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가대상자 그룹ID 조회
	  #	기능	: SELECT
	  #	TABLE	: MEM_USER
	==================================================================
	-->
	<select id="getUserId" parameterClass="hashMap" resultClass="hashMap">
		SELECT 
			   'EGN'||NVL(LPAD(MAX(SUBSTR(EVAL_GUN_ID,4,4))+1,4,'0'),'0001') AS EVAL_GUN_ID
		  FROM MEM_USER
		 WHERE YEAR = #year#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가대상자 등록
	  #	기능	: INSERT
	  #	TABLE	: MEM_USER
	==================================================================
	-->
	<insert id="insertData" parameterClass="hashMap">		
		INSERT INTO MEM_USER (
		       YEAR
             , EMP_NO
             , EMP_NM
             , DEPT_CD
             , DEPT_NM
             , CAST_TC
             , POS_TC
             , EVAL_GRP_ID
             , EVAL_1_EMP_NO
             , EVAL_1_EMP_NM
             , EVAL_1_DEPT_CD
             , EVAL_1_CAST_TC
             , EVAL_1_POS_TC
             , EVAL_2_EMP_NO
             , EVAL_2_EMP_NM
             , EVAL_2_DEPT_CD
             , EVAL_2_CAST_TC
             , EVAL_2_POS_TC
             , EVAL_TGT_YN
             , EVAL_EXP_RS_ID
             , CREATE_DT
			 ) VALUES ( 
			   #year#
             , #empNo#
             , #empNm#
             , #deptCd#
             , F_DEPT_LEV2_NM(#year#, #deptCd#)
             , #castTc#
             , #posTc#
             , #evalGrpId#
             , #eval1EmpNo#
             , #eval1EmpNm#
             , #eval1DeptCd#
             , #eval1CastTc#
             , #eval1PosTc#
             , #eval2EmpNo#
             , #eval2EmpNm#
             , #eval2DeptCd#
             , #eval2CastTc#
             , #eval2PosTc#
             , #evalTgtYn#
             , #evalExpRsId#
			 , SYSDATE			
			 )
	</insert>	
	
	<!--
	==================================================================   
	  # 설명	: 평가대상자 수정
	  #	기능	: UPDATE
	  #	TABLE	: MEM_USER
	==================================================================
	-->	
	<update id="updateData" parameterClass="hashMap">
		UPDATE MEM_USER 
           SET EMP_NM            = #empNm#
             , DEPT_CD           = #deptCd#
             , DEPT_NM           = F_DEPT_LEV2_NM(#year#, #deptCd#)
             , CAST_TC           = #castTc#
             , POS_TC            = #posTc#
             , EVAL_GRP_ID       = #evalGrpId#
             , EVAL_1_EMP_NO     = #eval1EmpNo#
             , EVAL_1_EMP_NM     = #eval1EmpNm#
             , EVAL_1_DEPT_CD    = #eval1DeptCd#
             , EVAL_1_CAST_TC    = #eval1CastTc#
             , EVAL_1_POS_TC     = #eval1PosTc#
             , EVAL_2_EMP_NO     = #eval2EmpNo#
             , EVAL_2_EMP_NM     = #eval2EmpNm#
             , EVAL_2_DEPT_CD    = #eval2DeptCd#
             , EVAL_2_CAST_TC    = #eval2CastTc#
             , EVAL_2_POS_TC     = #eval2PosTc#
             , EVAL_TGT_YN       = #evalTgtYn#
             , EVAL_EXP_RS_ID    = #evalExpRsId#
		     , MODIFY_DT         = SYSDATE 
		 WHERE YEAR = #year#
		   AND EMP_NO = #empNo#
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 평가대상자 정렬순서 일괄 저장
	  #	기능	: UPDATE
	  #	TABLE	: MEM_USER
	==================================================================
	-->	
	<update id="allSaveData" parameterClass="hashMap">
		UPDATE MEM_USER 
		   SET EVAL_GRP_ID            = #evalGrpId#
		     , EVAL_TGT_YN            = #evalTgtYn# 
		     , EVAL_EXP_RS_ID         = #evalExpRsId# 
		     , EVAL_1_EMP_NO          = #eval1EmpNo#
		     , EVAL_1_EMP_NM          = #eval1EmpNm#
		     , EVAL_1_DEPT_CD         = (SELECT DEPT_CD FROM BSC_INSA WHERE YEAR = #year# AND EMPN = #eval1EmpNo#)
		     , EVAL_1_CAST_TC         = (SELECT CAST_TC FROM BSC_INSA WHERE YEAR = #year# AND EMPN = #eval1EmpNo#)
		     , EVAL_1_POS_TC          = (SELECT POS_TC FROM BSC_INSA WHERE YEAR = #year# AND EMPN = #eval1EmpNo#)
		     , EVAL_2_EMP_NO          = #eval2EmpNo#
		     , EVAL_2_EMP_NM          = #eval2EmpNm#
		     , EVAL_2_DEPT_CD         = (SELECT DEPT_CD FROM BSC_INSA WHERE YEAR = #year# AND EMPN = #eval2EmpNo#)
		     , EVAL_2_CAST_TC         = (SELECT CAST_TC FROM BSC_INSA WHERE YEAR = #year# AND EMPN = #eval2EmpNo#)
		     , EVAL_2_POS_TC          = (SELECT POS_TC FROM BSC_INSA WHERE YEAR = #year# AND EMPN = #eval2EmpNo#)
			 , MODIFY_DT              = SYSDATE
		 WHERE YEAR = #year#
		   AND EMP_NO = #empNo#	
	</update>	
	
	<!--
	==================================================================   
	  # 설명	: 평가대상자 삭제
	  #	기능	: UPDATE
	  #	TABLE	: MEM_USER
	==================================================================
	-->	
	<update id="deleteData" parameterClass="hashMap">
		DELETE MEM_USER 
		 WHERE YEAR = #year#
	<isNotEmpty prepend="AND" property="empNo">
		   EMP_NO = #empNo#
	</isNotEmpty>
	</update>
	
	<!--
	==================================================================
	  # 설명	: 사용자정보 조회
	  #	기능	: SELECT
	  #	TABLE	: V_ROLE_USER
	==================================================================
	-->
	<select id="selectUserList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.USER_ID
	         , A.USER_NM
	         , A.DEPT_ID
	         , F_DEPT_LEV2_NM(TO_CHAR(SYSDATE, 'YYYY'), A.DEPT_ID) AS DEPT_NM
	         , A.JIKGUB_CD
	         , A.JIKGUB_NM
	         , A.POS_CD
	         , A.POS_NM
	         , A.EMAIL
		 FROM V_ROLE_USER A
		    , MEM_USER B
		WHERE 1=1
		  AND A.USER_ID = B.EMP_NO
		  AND B.YEAR = #findYear#
		<isNotEmpty prepend="AND" property="userNm">
             UPPER(A.USER_NM) LIKE  '%' || TRIM(UPPER(#userNm#)) ||'%'
		</isNotEmpty>
		<isEmpty prepend="AND" property="userNm">
			 A.DEPT_ID = #deptId#
			<!--  A.DEPT_ID = SUBSTR(#deptId#, 2) -->
		</isEmpty>
		AND A.USER_ID NOT IN (SELECT EVAL_PEER_EMP_NO FROM MEM_PEER_EVAL_USER WHERE YEAR = #findYear# AND EMP_NO = #empNo# AND EVAL_GRP_ID = #evalGrpId#)
		ORDER BY A.SORT_ORDER
	</select>
	
    <!--
    ==================================================================
      # 설명    : 평가군대상자목록
      #    기능    : SELECT
      #    TABLE    : MEM_USER_USER
    ==================================================================
    -->
    <select id="getPeerList" parameterClass="hashMap" resultClass="hashMap">
	        SELECT 
			      A.YEAR
			    , A.EMP_NO
			    , C.KOR_NM AS EMP_NM
			    , A.EVAL_PEER_DEPT_CD AS DEPT_CD
			    , F_DEPT_LEV2_NM(A.YEAR, C.DEPT_CD) AS DEPT_KOR_NM
			    , F_CODE_NM('170', C.CAST_TC , A.YEAR) AS CAST_TC_NM 
			    , F_CODE_NM('171', C.POS_TC , A.YEAR) AS POS_TC_NM 
			FROM MEM_PEER_EVAL_USER A
			    INNER JOIN BSC_INSA C
			        ON A.YEAR = C.YEAR
			        AND A.EMP_NO = C.EMPN
			WHERE A.YEAR = #findYear#
			  AND A.EVAL_PEER_EMP_NO = #findEmpNo#
			ORDER BY EMP_NM
    </select>
    
    <!--
    ==================================================================
      # 설명    : 동료평가 삭제
      #    기능    : UPDATE
      #    TABLE    :
    ==================================================================
    -->
    <update id="deletePeerAll" parameterClass="hashMap">
        DELETE FROM MEM_PEER_EVAL_USER
		WHERE YEAR = #findYear#
		<isNotEmpty prepend="AND" property="findEmpNo">
			EVAL_PEER_EMP_NO = #findEmpNo#
        </isNotEmpty>


    </update>
    
    <!--
    ==================================================================
      # 설명    : 동료평가재설정등록 (그룹별평가그룹이 N일경우)
      #    기능    : INSERT
      #    TABLE    :
    ==================================================================
    -->
    <insert id="insertRePeerNoGroup" parameterClass="hashMap">

	MERGE INTO MEM_PEER_EVAL_USER A
		USING (
			SELECT 
			       A.YEAR
			     , A.EMP_NO
			     , A.EVAL_GRP_ID
			     , B.EMPN AS EVAL_PEER_EMP_NO
			     , B.DEPT_CD AS EVAL_PEER_DEPT_CD
			     , B.CAST_TC AS EVAL_PEER_CAST_TC
			     , B.POS_TC AS EVAL_PEER_POS_TC
			  FROM MEM_USER A
			     , BSC_INSA B
			 WHERE A.YEAR = #year#
			   AND A.YEAR = B.YEAR
			   AND A.EMP_NO != B.EMPN
			   AND A.EVAL_1_EMP_NO != B.EMPN
			   AND A.EVAL_2_EMP_NO != B.EMPN
			   AND A.DEPT_CD = B.DEPT_CD
			   AND A.EVAL_TGT_YN = 'Y'
		)B
		ON (A.YEAR = B.YEAR AND  A.EMP_NO = B.EMP_NO AND A.EVAL_GRP_ID = B.EVAL_GRP_ID)
	WHEN NOT MATCHED THEN
	INSERT ( YEAR , EMP_NO , EVAL_GRP_ID, EVAL_PEER_EMP_NO, EVAL_PEER_DEPT_CD , EVAL_PEER_CAST_TC , EVAL_PEER_POS_TC, CREATE_DT )
	VALUES ( B.YEAR , B.EMP_NO , B.EVAL_GRP_ID, B.EVAL_PEER_EMP_NO , B.EVAL_PEER_DEPT_CD , B.EVAL_PEER_CAST_TC , B.EVAL_PEER_POS_TC , SYSDATE)
    </insert>
    
    <!--
    ==================================================================
      # 설명    : 동료평가재설정등록 (그룹별평가그룹이 Y일경우)
      #    기능    : INSERT
      #    TABLE    :
    ==================================================================
    -->
    <insert id="insertRePeerYesGroup" parameterClass="hashMap">

	MERGE INTO MEM_PEER_EVAL_USER A
		USING (
			SELECT 
			      *
			  FROM(
					SELECT 
					       A.YEAR
					     , A.EMP_NO
					     , A.EVAL_GRP_ID
					     , A.EMP_NO AS EVAL_PEER_EMP_NO
					     , A.DEPT_CD AS EVAL_PEER_DEPT_CD
					     , A.CAST_TC AS EVAL_PEER_CAST_TC
					     , A.POS_TC AS EVAL_PEER_POS_TC
					  FROM MEM_USER A
					     , BSC_INSA B
					 WHERE A.YEAR = #year#
					   AND A.YEAR = B.YEAR
					   AND A.EMP_NO != B.EMPN
					   AND A.EVAL_1_EMP_NO != B.EMPN
					   AND A.EVAL_2_EMP_NO != B.EMPN
					   AND A.DEPT_CD = B.DEPT_CD
					   AND A.EVAL_TGT_YN = 'Y'
				  ) C
			 WHERE C.EVAL_PEER_CAST_TC = #castTc#
			<isNotEmpty property="posTc">
			   AND C.EVAL_PEER_POS_TC = #posTc#
			</isNotEmpty>
	        <isNotEmpty property="yearTc">
	             <isNotEqual property="yearTcGubun" compareValue="99">
	           		<isEqual property="yearTcGubun" compareValue="02">
	           AND #yearTcMon# <![CDATA[<=]]> (
	           			<isEmpty property="applyDt">
							SELECT ROUND(MONTHS_BETWEEN(SYSDATE, TO_DATE(ORG_PCMT_DATE, 'YYYYMMDD')), 0) WORK_MON
						</isEmpty>
	           			<isNotEmpty property="applyDt">
							SELECT ROUND(MONTHS_BETWEEN(TO_DATE(#applyDt#, 'YYYYMMDD'), TO_DATE(ORG_PCMT_DATE, 'YYYYMMDD')), 0) WORK_MON
						</isNotEmpty>
							  FROM BSC_INSA_PCMT B
							 WHERE B.YEAR = #year#
							   AND B.EMPN = A.EMPN
							   AND B.CAST_TC = A.CAST_TC
							   AND B.SER = (
							    SELECT MIN(SER)
							      FROM BSC_INSA_PCMT
							     WHERE EMPN = B.EMPN
							    )
							)
	           		</isEqual>
	           		<isEqual property="yearTcGubun" compareValue="03">
	            AND #yearTcMon# <![CDATA[>]]> (
	           			<isEmpty property="applyDt">
							SELECT ROUND(MONTHS_BETWEEN(SYSDATE, TO_DATE(ORG_PCMT_DATE, 'YYYYMMDD')), 0) WORK_MON
						</isEmpty>
	           			<isNotEmpty property="applyDt">
							SELECT ROUND(MONTHS_BETWEEN(TO_DATE(#applyDt#, 'YYYYMMDD'), TO_DATE(ORG_PCMT_DATE, 'YYYYMMDD')), 0) WORK_MON
						</isNotEmpty>
							  FROM BSC_INSA_PCMT B
							 WHERE B.YEAR = #year#
							   AND B.EMPN = A.EMPN
							   AND B.CAST_TC = A.CAST_TC
							   AND B.SER = (
							    SELECT MIN(SER)
							      FROM BSC_INSA_PCMT
							     WHERE EMPN = B.EMPN
							    )
							)
	           		</isEqual>
	             </isNotEqual>
	         </isNotEmpty>
		)B
		ON (A.YEAR = B.YEAR AND  A.EMP_NO = B.EMP_NO AND A.EVAL_GRP_ID = B.EVAL_GRP_ID)
	WHEN NOT MATCHED THEN
	INSERT ( YEAR , EMP_NO , EVAL_GRP_ID, EVAL_PEER_EMP_NO, EVAL_PEER_DEPT_CD , EVAL_PEER_CAST_TC , EVAL_PEER_POS_TC, CREATE_DT )
	VALUES ( B.YEAR , B.EMP_NO , B.EVAL_GRP_ID, B.EVAL_PEER_EMP_NO , B.EVAL_PEER_DEPT_CD , B.EVAL_PEER_CAST_TC , B.EVAL_PEER_POS_TC , SYSDATE)
    </insert>
    
    <!--
    ==================================================================
      # 설명    : 동료평가 등록
      #    기능    : INSERT
      #    TABLE    :
    ==================================================================
    -->
    <insert id="insertPeerData" parameterClass="hashMap">

	MERGE INTO MEM_PEER_EVAL_USER A
		USING (
			SELECT  A.YEAR
				    , A.EMPN
				    , A.KOR_NM
				    , A.DEPT_CD
				    , A.CAST_TC
				    , A.POS_TC
				    , B.EVAL_GRP_ID
			FROM BSC_INSA A
			   , MEM_USER B
		   WHERE A.YEAR = B.YEAR
		     AND A.EMPN = B.EMP_NO
		     AND A.YEAR = #findYear# AND A.EMPN = #empNo#
		)B
		ON (A.YEAR = B.YEAR AND  A.EMP_NO = B.EMPN AND A.EVAL_PEER_EMP_NO = #findEmpNo# AND A.EVAL_GRP_ID = B.EVAL_GRP_ID)
	WHEN NOT MATCHED THEN
	INSERT ( YEAR, EMP_NO, EVAL_GRP_ID, EVAL_PEER_EMP_NO, EVAL_PEER_DEPT_CD, EVAL_PEER_CAST_TC, EVAL_PEER_POS_TC, CREATE_DT )
	VALUES ( B.YEAR , B.EMPN, B.EVAL_GRP_ID, #findEmpNo# , B.DEPT_CD , B.CAST_TC , B.POS_TC , SYSDATE)
       
    </insert>
    
	<!--
	==================================================================   
	  # 설명	: 권한 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->	
	<update id="deleteAdminDatas" parameterClass="hashMap">
		DELETE FROM BSC_ADMIN
         WHERE ADMIN_GUBUN IN ('50', '51', '52', '53')
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 권한 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->	
	<insert id="insertAdminDatas" parameterClass="hashMap">
		INSERT INTO BSC_ADMIN (ADMIN_GUBUN, USER_ID)
			SELECT DISTINCT ADMIN_GUBUN, A.USER_ID 
              FROM (SELECT DISTINCT EVAL_1_EMP_NO AS USER_ID, '51' AS ADMIN_GUBUN
                      FROM MEM_USER A
                     WHERE A.EVAL_1_EMP_NO IS NOT NULL 
                       AND YEAR = #findYear#
                    UNION
                    SELECT DISTINCT EVAL_2_EMP_NO AS USER_ID, '53' AS ADMIN_GUBUN
                      FROM MEM_USER B
                     WHERE B.EVAL_2_EMP_NO IS NOT NULL 
                       AND YEAR = #findYear#
                    UNION
                    SELECT DISTINCT EVAL_PEER_EMP_NO AS USER_ID, '52' AS ADMIN_GUBUN
                      FROM MEM_PEER_EVAL_USER B
                     WHERE B.EVAL_PEER_EMP_NO IS NOT NULL 
                       AND YEAR = #findYear#
                    UNION ALL
                    SELECT DISTINCT EMP_NO AS USER_ID, '50' AS ADMIN_GUBUN
                      FROM MEM_USER A
                     WHERE A.EMP_NO IS NOT NULL 
                       AND YEAR = #findYear#
                    ) A 
	</insert>
	
	<!--
	==================================================================   
	  # 설명	: 권한 등록(피평가자)
	  #	기능	: INSERT
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->	
	<insert id="insertAdminDatas_P" parameterClass="hashMap">
		INSERT INTO BSC_ADMIN (ADMIN_GUBUN, USER_ID)
			SELECT DISTINCT '50', A.ASSESSOR_EMPN 
              FROM (SELECT DISTINCT EMP_NO AS ASSESSOR_EMPN
                      FROM MEM_USER A
                     WHERE A.EMP_NO IS NOT NULL 
                       AND YEAR = #findYear#
                    ) A 
	</insert>
	
	<!--
	==================================================================   
	  # 설명	: 평가그룹 대상 목록 조회
	  #	기능	: SELECT
	  #	TABLE	: MEM_EVAL_GRP
	==================================================================
	-->
	<select id="getEvalGrpTargetList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
             , A.EVAL_GRP_ID
             , A.EVAL_GRP_TRG_SEQ
             , A.CAST_TC
             , A.POS_TC
             , A.YEAR_TC
             , A.YEAR_TC_GUBUN
             , A.APPLY_DT
          FROM MEM_EVAL_GRP_TARGET A
             , MEM_EVAL_GRP B
         WHERE A.YEAR = #year#
           AND A.YEAR = B.YEAR
           AND A.EVAL_GRP_ID = B.EVAL_GRP_ID
           AND B.DELETE_DT IS NULL
         ORDER BY A.EVAL_GRP_ID, A.EVAL_GRP_TRG_SEQ
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가 대상자 등록
	  #	기능	: INSERT
	  #	TABLE	: MEM_USER
	==================================================================
	-->
	<insert id="insertEmpList" parameterClass="hashMap">
	    MERGE INTO MEM_USER A
	    	  USING (
					SELECT A.YEAR
			             , A.EMPN AS EMP_NO
			             , A.KOR_NM AS EMP_NM
			             , A.DEPT_CD
			             , F_DEPT_LEV2_NM(A.YEAR, A.DEPT_CD) AS DEPT_NM
			             , A.CAST_TC
			             , A.POS_TC
			             , B.EVAL_1_EMP_NO
			             , B.EVAL_1_EMP_NM
			             , B.EVAL_1_DEPT_CD
			             , B.EVAL_1_CAST_TC
			             , B.EVAL_1_POS_TC
			             , B.EVAL_2_EMP_NO
			             , B.EVAL_2_EMP_NM
			             , B.EVAL_2_DEPT_CD
			             , B.EVAL_2_CAST_TC
			             , B.EVAL_2_POS_TC
			          FROM BSC_INSA A
			             , MEM_DEPT_EVAL_USER B
			             , BSC_INSA_DEPT C
			         WHERE A.YEAR = B.YEAR(+)
			           AND A.DEPT_CD = B.DEPT_CD(+)
			           AND A.YEAR = C.YEAR
			           AND A.DEPT_CD = C.DEPT_CD
			           AND A.YEAR = #year#
			           AND A.CAST_TC = #castTc#
			<isNotEmpty property="posTc">
			           AND A.POS_TC = #posTc#
			</isNotEmpty>
			         <isNotEmpty property="yearTc">
			             <isNotEqual property="yearTcGubun" compareValue="99">
			           		<isEqual property="yearTcGubun" compareValue="02">
			           AND #yearTcMon# <![CDATA[<=]]> (
			           			<isEmpty property="applyDt">
									SELECT ROUND(MONTHS_BETWEEN(SYSDATE, TO_DATE(ORG_PCMT_DATE, 'YYYYMMDD')), 0) WORK_MON
								</isEmpty>
			           			<isNotEmpty property="applyDt">
									SELECT ROUND(MONTHS_BETWEEN(TO_DATE(#applyDt#, 'YYYYMMDD'), TO_DATE(ORG_PCMT_DATE, 'YYYYMMDD')), 0) WORK_MON
								</isNotEmpty>
									  FROM BSC_INSA_PCMT B
									 WHERE B.YEAR = #year#
							   		   AND B.EMPN = A.EMPN
									   AND B.CAST_TC = A.CAST_TC
									   AND B.SER = (
									    SELECT MIN(SER)
									      FROM BSC_INSA_PCMT
									     WHERE EMPN = B.EMPN
									    )
									)
			           		</isEqual>
			           		<isEqual property="yearTcGubun" compareValue="03">
			            AND #yearTcMon# <![CDATA[>]]> (
			           			<isEmpty property="applyDt">
									SELECT ROUND(MONTHS_BETWEEN(SYSDATE, TO_DATE(ORG_PCMT_DATE, 'YYYYMMDD')), 0) WORK_MON
								</isEmpty>
			           			<isNotEmpty property="applyDt">
									SELECT ROUND(MONTHS_BETWEEN(TO_DATE(#applyDt#, 'YYYYMMDD'), TO_DATE(ORG_PCMT_DATE, 'YYYYMMDD')), 0) WORK_MON
								</isNotEmpty>
									  FROM BSC_INSA_PCMT B
									 WHERE B.YEAR = #year#
							           AND B.EMPN = A.EMPN
									   AND B.CAST_TC = A.CAST_TC
									   AND B.SER = (
									    SELECT MIN(SER)
									      FROM BSC_INSA_PCMT
									     WHERE EMPN = B.EMPN
									    )
									)
			           		</isEqual>
			             </isNotEqual>
			         </isNotEmpty>
			         ORDER BY A.EMPN
	    	  ) B
	    	  ON (A.YEAR = B.YEAR AND  A.EMP_NO = B.EMP_NO)
		WHEN NOT MATCHED THEN
		INSERT (
		       YEAR
             , EMP_NO
             , EMP_NM
             , DEPT_CD
             , DEPT_NM
             , CAST_TC
             , POS_TC
             , EVAL_GRP_ID
             , EVAL_1_EMP_NO
             , EVAL_1_EMP_NM
             , EVAL_1_DEPT_CD
             , EVAL_1_CAST_TC
             , EVAL_1_POS_TC
             , EVAL_2_EMP_NO
             , EVAL_2_EMP_NM
             , EVAL_2_DEPT_CD
             , EVAL_2_CAST_TC
             , EVAL_2_POS_TC
             , EVAL_TGT_YN
             , EVAL_EXP_RS_ID
             , CREATE_DT
			 ) VALUES ( 
	           B.YEAR
             , B.EMP_NO
             , B.EMP_NM
             , B.DEPT_CD
             , F_DEPT_LEV2_NM(B.YEAR, B.DEPT_CD) AS DEPT_NM
             , B.CAST_TC
             , B.POS_TC
             , #evalGrpId#
             , B.EVAL_1_EMP_NO
             , B.EVAL_1_EMP_NM
             , B.EVAL_1_DEPT_CD
             , B.EVAL_1_CAST_TC
             , B.EVAL_1_POS_TC
             , B.EVAL_2_EMP_NO
             , B.EVAL_2_EMP_NM
             , B.EVAL_2_DEPT_CD
             , B.EVAL_2_CAST_TC
             , B.EVAL_2_POS_TC
             , #evalTgtYn#
             , #evalExpRsId#
			 , SYSDATE			
			 )

	</insert>
	
	<!--
	==================================================================   
	  # 설명	: 평가그룹별(동료평가) 평가여부 조회
	  #	기능	: SELECT
	  #	TABLE	: MEM_EVAL_GRP
	==================================================================
	-->
	<select id="getEvalYnByGroup" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
             , A.EVAL_YN_ID
             , A.EVAL_RATE
             , A.EVAL_METHOD_ID
             , A.EVAL_GIVE_METHOD_ID
          FROM MEM_EVAL_USER_RATE A
         WHERE A.YEAR = #year#
           AND A.EVAL_USER_GUBUN_ID = #evalUserGubunId#
	</select>
</sqlMap>