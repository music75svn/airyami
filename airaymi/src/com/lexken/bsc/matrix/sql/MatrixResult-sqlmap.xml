<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="bsc.matrix.matrixResult">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: BSC_MAT_EVAL_MAPPING
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />
	 

	<!--
	==================================================================   
	  # 설명	: 평가결과 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_MAT_EVAL_MAPPING
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR,
            A.EVAL_USER_GRP_ID ,
            A.METRIC_GRP_ID,
            F_CODE_NM('142', B.POOL_GUBUN, A.YEAR) POOL_GUBUN_NM,
            B.METRIC_GRP_NM,
            <iterate property="itemArray" conjunction=",">
		     	 C.ITEM_$itemArray[]$
		    </iterate>,
            <iterate property="itemGrpArray" conjunction=",">
		     	 D.ITEM_GRP_$itemGrpArray[]$
		    </iterate>,
            E.METRIC_GRP_SCORE,
            RANK() OVER( ORDER BY E.METRIC_GRP_SCORE DESC) KPI_RANK , 
            A.CHOICE_YN
       FROM BSC_MAT_EVAL_MAPPING A
       INNER JOIN BSC_METRIC_GRP B ON A.YEAR = B.YEAR AND A.METRIC_GRP_ID = B.METRIC_GRP_ID 
       <dynamic>
       		<isNotEmpty property="findPoolGubun" prepend="AND">
       			B.POOL_GUBUN = #findPoolGubun#
       		</isNotEmpty>
       </dynamic>  
       LEFT OUTER JOIN
           (SELECT A.YEAR, A.EVAL_USER_GRP_ID, A.METRIC_GRP_ID,
                  <iterate property="itemArray" conjunction=",">
		     		 MAX(CASE WHEN A.ITEM_ID = '$itemArray[]$' THEN A.ITEM_SCORE END) AS ITEM_$itemArray[]$
		     	  </iterate>
             FROM BSC_MAT_ITEM_RESULT A                                       
            WHERE A.YEAR =  #findYear#                                  
              AND A.EVAL_USER_GRP_ID =  #findEvalUserGrpId#
            GROUP BY A.YEAR, A.EVAL_USER_GRP_ID, A.METRIC_GRP_ID ) C 
               ON A.YEAR = C.YEAR 
              AND A.EVAL_USER_GRP_ID = C.EVAL_USER_GRP_ID 
              AND A.METRIC_GRP_ID = C.METRIC_GRP_ID
       LEFT OUTER JOIN
           (SELECT A.YEAR, A.EVAL_USER_GRP_ID, A.METRIC_GRP_ID,
                   <iterate property="itemGrpArray" conjunction=",">
		     	 	 MAX(CASE WHEN A.ITEM_GRP_ID = '$itemGrpArray[]$' THEN A.ITEM_GBN_SCORE END) AS ITEM_GRP_$itemGrpArray[]$
		           </iterate>
              FROM BSC_MAT_ITEM_GRP_RESULT A      
             WHERE A.YEAR =  #findYear#                                      
               AND A.EVAL_USER_GRP_ID =  #findEvalUserGrpId#
             GROUP BY A.YEAR, A.EVAL_USER_GRP_ID, A.METRIC_GRP_ID) D 
                ON A.YEAR = D.YEAR 
               AND A.EVAL_USER_GRP_ID = D.EVAL_USER_GRP_ID 
               AND A.METRIC_GRP_ID = D.METRIC_GRP_ID    
        INNER JOIN BSC_MAT_METRIC_GRP_RESULT E ON A.YEAR=E.YEAR AND A.EVAL_USER_GRP_ID=E.EVAL_USER_GRP_ID AND A.METRIC_GRP_ID=E.METRIC_GRP_ID   
        <dynamic>
       		<isNotEmpty property="findMetricGrpScore" prepend="AND">
       			E.METRIC_GRP_SCORE >= #findMetricGrpScore#
       		</isNotEmpty>
       </dynamic>              
        WHERE A.YEAR = #findYear#
          AND A.EVAL_USER_GRP_ID=#findEvalUserGrpId#
          <dynamic>
       		<isNotEmpty property="findChoiceYn" prepend="AND">
       			A.CHOICE_YN = #findChoiceYn#
       		</isNotEmpty>
       </dynamic> 
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가항목그룹 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_MAT_ITEM_GRP
	==================================================================
	-->
	<select id="getItemGrpList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.ITEM_GRP_ID, A.ITEM_GRP_NM, 'ITEM_GRP_'||A.ITEM_GRP_ID AS COL_NM
		  FROM BSC_MAT_ITEM_GRP A
		 WHERE A.YEAR = #findYear#
		 ORDER BY A.SORT_ORDER
	</select>
	
	
	<!--
	==================================================================   
	  # 설명	: 평가항목 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_MAT_ITEM
	==================================================================
	-->
	<select id="getItemList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.ITEM_ID, A.ITEM_NM, A.ITEM_GRP_ID, 'ITEM_'||A.ITEM_ID AS COL_NM
		FROM BSC_MAT_ITEM A
		     LEFT OUTER JOIN BSC_MAT_ITEM_GRP B 
		          ON A.YEAR = B.YEAR 
		          AND A.ITEM_GRP_ID = B.ITEM_GRP_ID 
		WHERE A.YEAR = #findYear# 
		ORDER BY B.SORT_ORDER, A.SORT_ORDER 
	</select>	
	
	<!--
	==================================================================   
	  # 설명	: 평가항목그룹 정보 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_LEVEL_ITEM
	==================================================================
	-->
	<select id="getItemGrpInfoList" parameterClass="hashMap" resultClass="hashMap">
		SELECT ITEM_ID
		     , ITEM_NM
		     , ITEM_GRP_ID
		     , ITEM_GRP_NM
		     , ITEM_CNT+1 ITEM_CNT
		FROM (          
		        SELECT A.ITEM_ID
		             , A.ITEM_NM
		             , A.ITEM_GRP_ID
		             , B.ITEM_GRP_NM
		             , ROW_NUMBER() OVER(PARTITION BY A.ITEM_GRP_ID ORDER BY A.ITEM_GRP_ID, A.SORT_ORDER) AS ITEM_INDEX
		             , COUNT(A.ITEM_ID) OVER(PARTITION BY A.ITEM_GRP_ID) AS ITEM_CNT
		        FROM BSC_MAT_ITEM A
		        INNER JOIN BSC_MAT_ITEM_GRP B ON A.YEAR = B.YEAR AND A.ITEM_GRP_ID = B.ITEM_GRP_ID
		        WHERE A.YEAR = #findYear#
		        ORDER BY A.ITEM_GRP_ID, A.SORT_ORDER
		)
		WHERE ITEM_INDEX = 1
	</select>	
	
	<!--
	==================================================================   
	  # 설명	: 평가결과 삭제
	  #	기능	: UPDATE
	  #	TABLE	: BSC_MAT_EVAL_MAPPING
	==================================================================
	-->	
	<update id="choiceData" parameterClass="hashMap">
		UPDATE BSC_MAT_EVAL_MAPPING SET CHOICE_YN=#choiceYn#
		 WHERE YEAR = #year#
		   AND EVAL_USER_GRP_ID = #evalUserGrpId#
		   AND METRIC_GRP_ID = #metricGrpId#
	</update>
	
	
</sqlMap>


