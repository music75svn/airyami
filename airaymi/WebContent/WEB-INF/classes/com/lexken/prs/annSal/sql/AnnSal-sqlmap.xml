<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="prs.annSal.annSal">

	<!--
	==================================================================
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />

	<!--
	==================================================================
	  # 설명	: 직원성과급 목록 보기
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		 SELECT A.YEAR
            , A.EMPN
            , B.KOR_NM
            , F.DEPT_CD
            , F_DEPT_FULL_NM(F.YEAR, F.DEPT_CD, 'BSC_INSA_DEPT') AS DEPT_KOR_NM
            , NVL(E.ANN_DAY, 0) ANN_DAY
            , A.EVAL_GRP_ID
	        , D.EVAL_GRP_NM
            , A.WORK_MON
            , E.SCORE
            , E.GRADE
            , H.CODE_NM AS RATE
            , TO_CHAR(NVL(A.BASIC_SAL, 0)) BASIC_SAL
            , TO_CHAR(NVL(A.JOB_SAL, 0)) JOB_SAL
            , TO_CHAR(NVL(A.LUNCH_ALLO, 0)) LUNCH_ALLO
            , TO_CHAR(NVL(A.ANN_ALLO, 0)) ANN_ALLO
            , TO_CHAR(NVL(A.ANN_SAL, 0)) ANN_SAL
            , TO_CHAR(NVL(A.DIF_ANN_SAL, 0)) DIF_ANN_SAL
            , TO_CHAR(NVL(A.SEP_PAY, 0)) SEP_PAY
            , TO_CHAR(NVL(A.LABOR_PAY, 0)) LABOR_PAY
            , TO_CHAR(NVL(A.INSIDE_PAY, 0)) INSIDE_PAY
            , TO_CHAR(NVL(A.GOV_PAY, 0)) GOV_PAY
            , TO_CHAR(NVL((  
                SELECT SUM(BB.DIF_ANN_SAL - BB.LUNCH_ALLO)
                FROM ANN_SAL_SET AA
                LEFT OUTER JOIN ANN_SAL_CONF BB
                    ON AA.YEAR = BB.YEAR
                    AND AA.EMPN = BB.EMPN
                    AND AA.EVAL_GRP_ID = BB.EVAL_GRP_ID
                WHERE AA.EMPN = A.EMPN
                AND AA.YEAR = A.YEAR
                GROUP BY AA.YEAR)
            , 0)) AS ANN_SAL_FIN
            , COUNT(1) OVER (PARTITION BY A.YEAR, A.EMPN) AS EMPN_CNT
            , ROW_NUMBER() OVER (PARTITION BY A.YEAR, A.EMPN ORDER BY A.YEAR, A.EMPN, D.SORT_ORDER) AS EMPN_INDEX
            , COUNT(1) OVER (PARTITION BY F.YEAR, F.EMPN, F.DEPT_CD) AS DEPTCD_CNT
            , ROW_NUMBER() OVER (PARTITION BY F.YEAR, F.DEPT_CD, F.EMPN ORDER BY F.YEAR, F.EMPN, D.SORT_ORDER) AS DEPTCD_INDEX
        FROM ANN_SAL_CONF A
        LEFT OUTER JOIN BSC_INSA B
            ON A.YEAR = B.YEAR
            AND A.EMPN = B.EMPN
        LEFT OUTER JOIN PRS_MNG_EVAL_FINAL_RESULT F
            ON A.YEAR = F.YEAR
            AND A.EMPN = F.EMPN
            AND A.EVAL_GRP_ID = F.EVAL_GRP_ID
        LEFT OUTER JOIN BSC_INSA_DEPT C
            ON A.YEAR = C.YEAR
            AND F.DEPT_CD = C.DEPT_CD
        LEFT OUTER JOIN PRS_EVAL_GRP D
            ON A.YEAR = D.YEAR
	        AND A.EVAL_GRP_ID = D.EVAL_GRP_ID
        LEFT OUTER JOIN ANN_SAL_SET E
            ON A.YEAR = E.YEAR
            AND A.EMPN = E.EMPN
            AND A.EVAL_GRP_ID = E.EVAL_GRP_ID
        LEFT OUTER JOIN BSC_CODE H
            ON E.YEAR = H.YEAR
            AND H.CODE_GRP_ID = '186'
            AND E.GRADE = H.CODE_ID
        WHERE A.YEAR = #findYear#
        AND NOT EXISTS ( SELECT POS_TC FROM (SELECT '06' POS_TC FROM DUAL UNION SELECT '08' POS_TC FROM DUAL) WHERE F.POS_TC = POS_TC )
	    <isNotEqual property="findDeptCd" compareValue="0000">
        AND F.DEPT_CD IN (    SELECT DEPT_CD
                                     FROM BSC_INSA_DEPT
                                    WHERE YEAR = #findYear#
                               START WITH DEPT_CD = #findDeptCd#
                               CONNECT BY PRIOR YEAR = YEAR
                                      AND PRIOR DEPT_CD = UP_DEPT_CD)
        </isNotEqual>
		<isNotEmpty prepend="AND" property="findResult" >
			<isEqual property="findResearch" compareValue="korNms">
				UPPER(B.KOR_NM) LIKE  '%' || TRIM(UPPER(#findResult#)) ||'%'
			</isEqual>
			<isNotEqual  property="findResearch" compareValue="korNms">
			A.EMPN = #findResult#
		</isNotEqual>
		</isNotEmpty>
        ORDER BY B.KOR_NM, A.EMPN , D.SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 직원성과급 목록 보기
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
	    <!--
    	 SELECT   A.YEAR YEAR
				, A.EMPN
         		, B.KOR_NM
         		, A.DEPT_CD
         		, F_DEPT_FULL_NM(A.YEAR, A.DEPT_CD, 'BSC_INSA_DEPT') AS DEPT_KOR_NM
         		, D.CODE_NM AS CAST_TC_NM
         		, E.ANN_DAY
         		, F.CAST_TC
         		, F.WORK_MON
          		, E.SCORE
        		, E.GRADE
        		, H.CODE_NM AS RATE
				, TO_CHAR (NVL (F.BASIC_SAL, 0)) BASIC_SAL
				, TO_CHAR (NVL (F.JOB_SAL, 0)) JOB_SAL
				, TO_CHAR (NVL (F.LUNCH_ALLO, 0)) LUNCH_ALLO
				, TO_CHAR (NVL (F.ANN_ALLO, 0)) ANN_ALLO
				, TO_CHAR (NVL (F.ANN_SAL, 0)) ANN_SAL
				, TO_CHAR (NVL (F.DIF_ANN_SAL, 0)) DIF_ANN_SAL
				, TO_CHAR (NVL (F.SEP_PAY, 0)) SEP_PAY
  			    /**, TO_CHAR (NVL (F.LABOR_PAY, 0)) LABOR_PAY**/
 				, TO_CHAR (NVL (F.DIF_ANN_SAL - F.LUNCH_ALLO - F.INSIDE_PAY - F.GOV_PAY, 0)) LABOR_PAY  
				, TO_CHAR (NVL (F.INSIDE_PAY, 0)) INSIDE_PAY
				, TO_CHAR (NVL (F.GOV_PAY, 0)) GOV_PAY
		   FROM ( SELECT A.YEAR,
						 A.EMPN,
						 A.DEPT_CD,
						 A.CAST_TC,
						 A.WORK_MON,
						 A.POS_TC
					FROM V_PRS_RE_MON A
				   WHERE ( YEAR, EMPN, CAST_TC, END_PCMT_DATE) IN
															(  SELECT   YEAR
																	  , EMPN
																	  , CAST_TC
																	  , MAX (END_PCMT_DATE) END_PCMT_DATE
																 FROM   V_PRS_RE_MON
																WHERE   YEAR = #findYear#
															 GROUP BY   YEAR, EMPN, CAST_TC)
					 										 ORDER BY   START_PCMT_DATE) A
	 LEFT OUTER JOIN BSC_INSA B
			 ON A.YEAR = B.YEAR
			AND A.EMPN = B.EMPN
	 LEFT OUTER JOIN BSC_INSA_DEPT C
			 ON A.YEAR = C.YEAR
			AND A.DEPT_CD = C.DEPT_CD
	 LEFT OUTER JOIN BSC_CODE D
			 ON CODE_GRP_ID = '170' AND D.CODE_ID = A.CAST_TC AND D.YEAR = A.YEAR
	 LEFT OUTER JOIN ANN_SAL_SET E
			 ON A.YEAR = E.YEAR AND A.EMPN = E.EMPN AND A.CAST_TC = E.CAST_TC
	 LEFT OUTER JOIN ANN_SAL_CONF F
			 ON A.YEAR = F.YEAR AND A.EMPN = F.EMPN AND A.CAST_TC = F.CAST_TC
	 LEFT OUTER JOIN ( SELECT YEAR, EMPN, CAST_TC, SUM(WORK_MON) WORK_MON FROM V_PRS_RE_MON WHERE YEAR = #findYear# GROUP BY YEAR, EMPN, CAST_TC ) G
			 ON A.YEAR = G.YEAR
            AND A.EMPN = G.EMPN
            AND A.CAST_TC = G.CAST_TC
     LEFT OUTER JOIN ANN_SAL_SET I
			 ON A.YEAR = I.YEAR AND A.EMPN = I.EMPN AND A.CAST_TC = I.CAST_TC
	 LEFT OUTER JOIN BSC_CODE H
			 ON E.YEAR = H.YEAR
			AND H.CODE_GRP_ID = '186'
			AND E.GRADE = H.CODE_ID
		  WHERE A.YEAR = #findYear#
			AND A.CAST_TC IN ( '10', '20', '30')
            AND A.POS_TC NOT IN ('06', '08')
            AND A.DEPT_CD IN (    SELECT DEPT_CD
                                     FROM BSC_INSA_DEPT
                                    WHERE YEAR = #findYear#
                               START WITH DEPT_CD = #findDeptCd#
                               CONNECT BY PRIOR YEAR = YEAR
                                      AND PRIOR DEPT_CD = UP_DEPT_CD)
            AND A.EMPN = #empn#
ORDER BY B.KOR_NM
	        -->
        SELECT A.YEAR
            , A.EMPN
            , B.KOR_NM
            , A.DEPT_CD
            , F_DEPT_FULL_NM(A.YEAR, A.DEPT_CD, 'BSC_INSA_DEPT') AS DEPT_KOR_NM
            , NVL(E.ANN_DAY, 0) ANN_DAY
            , A.EVAL_GRP_ID
	        , D.EVAL_GRP_NM
            , F.WORK_MON
            , E.SCORE
            , E.GRADE
            , H.CODE_NM AS RATE
            , TO_CHAR(NVL(F.BASIC_SAL, 0)) BASIC_SAL
            , TO_CHAR(NVL(F.JOB_SAL, 0)) JOB_SAL
            , TO_CHAR(NVL(F.LUNCH_ALLO, 0)) LUNCH_ALLO
            , TO_CHAR(NVL(F.ANN_ALLO, 0)) ANN_ALLO
            , TO_CHAR(NVL(F.ANN_SAL, 0)) ANN_SAL
            , TO_CHAR(NVL(F.DIF_ANN_SAL, 0)) DIF_ANN_SAL
            , TO_CHAR(NVL(F.SEP_PAY, 0)) SEP_PAY
            , TO_CHAR (NVL (F.DIF_ANN_SAL - F.LUNCH_ALLO - F.INSIDE_PAY - F.GOV_PAY, 0)) LABOR_PAY
            , TO_CHAR(NVL(F.INSIDE_PAY, 0)) INSIDE_PAY
            , TO_CHAR(NVL(F.GOV_PAY, 0)) GOV_PAY
            , TO_CHAR(NVL((  
                SELECT SUM(BB.DIF_ANN_SAL - BB.LUNCH_ALLO)
                FROM ANN_SAL_SET AA
                LEFT OUTER JOIN ANN_SAL_CONF BB
                    ON AA.YEAR = BB.YEAR
                    AND AA.EMPN = BB.EMPN
                    AND AA.EVAL_GRP_ID = BB.EVAL_GRP_ID
                WHERE AA.EMPN = A.EMPN
                AND AA.YEAR = A.YEAR
                GROUP BY AA.YEAR)
            , 0)) AS ANN_SAL_FIN
            , COUNT(1) OVER (PARTITION BY A.YEAR, A.EMPN) AS EMPN_CNT
            , ROW_NUMBER() OVER (PARTITION BY A.YEAR, A.EMPN ORDER BY A.YEAR, A.EMPN, D.SORT_ORDER) AS EMPN_INDEX
            , COUNT(1) OVER (PARTITION BY A.YEAR, A.EMPN, A.DEPT_CD) AS DEPTCD_CNT
            , ROW_NUMBER() OVER (PARTITION BY A.YEAR, A.DEPT_CD, A.EMPN ORDER BY A.YEAR, A.EMPN, D.SORT_ORDER) AS DEPTCD_INDEX
        FROM PRS_MNG_EVAL_FINAL_RESULT A
        LEFT OUTER JOIN BSC_INSA B
            ON A.YEAR = B.YEAR
            AND A.EMPN = B.EMPN
        LEFT OUTER JOIN ANN_SAL_CONF F
            ON A.YEAR = F.YEAR
            AND A.EMPN = F.EMPN
            AND A.EVAL_GRP_ID = F.EVAL_GRP_ID
        LEFT OUTER JOIN BSC_INSA_DEPT C
            ON A.YEAR = C.YEAR
            AND A.DEPT_CD = C.DEPT_CD
        LEFT OUTER JOIN PRS_EVAL_GRP D
            ON A.YEAR = D.YEAR
	        AND A.EVAL_GRP_ID = D.EVAL_GRP_ID
        LEFT OUTER JOIN ANN_SAL_SET E
            ON A.YEAR = E.YEAR
            AND A.EMPN = E.EMPN
            AND A.EVAL_GRP_ID = E.EVAL_GRP_ID
        LEFT OUTER JOIN BSC_CODE H
            ON E.YEAR = H.YEAR
            AND H.CODE_GRP_ID = '186'
            AND E.GRADE = H.CODE_ID
        WHERE A.YEAR = #findYear#
        AND NOT EXISTS ( SELECT POS_TC FROM (SELECT '06' POS_TC FROM DUAL UNION SELECT '08' POS_TC FROM DUAL) WHERE A.POS_TC = POS_TC )
        AND A.EMPN = #empn#
        ORDER BY B.KOR_NM
	</select>

	<!--
	==================================================================
	  # 설명	: 직원성과급 목록 보기
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getBasic" parameterClass="hashMap" resultClass="hashMap">
		SELECT DECODE(B.UP_DEPT_NM,B.DEPT_NM,'',B.UP_DEPT_NM) UP_DEPT_NM
          	 , B.DEPT_NM
          	 , A.SABUN
          	 , A.CAST_TC_NM
          	 , A.USER_NM
  		  FROM V_ROLE_USER A
  			 , BSC_DEPTINFO B
  		 WHERE A.DEPT_ID = B.DEPT_ID
  		   AND A.SABUN = #empn#
	</select>
	
	<!--
	==================================================================
	  # 설명	: 직원성과급 총합산한 금액 보기
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getTotalCount" parameterClass="hashMap" resultClass="hashMap">
		SELECT  AA.YEAR + 1 YEAR 
			  ,	TO_CHAR(NVL(SUM(BB.DIF_ANN_SAL - BB.LUNCH_ALLO),0)) ANN_SAL_FIN
			  , TO_CHAR(NVL(SUM(BB.LUNCH_ALLO),0)) LUNCH_ALLO
			  , TO_CHAR(NVL(SUM( BB.DIF_ANN_SAL),0)) DIF_ANN_SAL
		  FROM ANN_SAL AA
		  LEFT OUTER JOIN ANN_SAL_CONF BB
			ON AA.YEAR = BB.YEAR
		   AND AA.EMPN = BB.EMPN
		   AND AA.EVAL_GRP_ID = BB.EVAL_GRP_ID
		 WHERE AA.EMPN = #empn#
		   AND AA.YEAR = #findYear#
		 GROUP BY AA.YEAR
 </select>

	<!--
	==================================================================
	  # 설명	: 성과연봉 엑셀다운로드
	  #	기능	: SELECT
	  #	TABLE	: ANN_SAL_SET
	==================================================================
	-->
	<select id="getAnnSalSetExcelList" parameterClass="hashMap" resultClass="hashMap">
		 SELECT A.YEAR
            , A.EMPN
            , B.KOR_NM
            , F.DEPT_CD
            , F_DEPT_FULL_NM(F.YEAR, F.DEPT_CD, 'BSC_INSA_DEPT') AS DEPT_KOR_NM
            , NVL(E.ANN_DAY, 0) ANN_DAY
            , F.EVAL_GRP_ID
	        , D.EVAL_GRP_NM
            , A.WORK_MON
            , E.SCORE
            , E.GRADE
            , H.CODE_NM AS RATE
            , TO_CHAR(NVL(A.BASIC_SAL, 0)) BASIC_SAL
            , TO_CHAR(NVL(A.JOB_SAL, 0)) JOB_SAL
            , TO_CHAR(NVL(A.LUNCH_ALLO, 0)) LUNCH_ALLO
            , TO_CHAR(NVL(A.ANN_ALLO, 0)) ANN_ALLO
            , TO_CHAR(NVL(A.ANN_SAL, 0)) ANN_SAL
            , TO_CHAR(NVL(A.DIF_ANN_SAL, 0)) DIF_ANN_SAL
            , TO_CHAR(NVL(A.SEP_PAY, 0)) SEP_PAY
            , TO_CHAR(NVL(A.LABOR_PAY, 0)) LABOR_PAY
            , TO_CHAR(NVL(A.INSIDE_PAY, 0)) INSIDE_PAY
            , TO_CHAR(NVL(A.GOV_PAY, 0)) GOV_PAY
            , TO_CHAR(NVL((  
                SELECT SUM(BB.DIF_ANN_SAL - BB.LUNCH_ALLO)
                FROM ANN_SAL_SET AA
                LEFT OUTER JOIN ANN_SAL_CONF BB
                    ON AA.YEAR = BB.YEAR
                    AND AA.EMPN = BB.EMPN
                    AND AA.EVAL_GRP_ID = BB.EVAL_GRP_ID
                WHERE AA.EMPN = A.EMPN
                AND AA.YEAR = A.YEAR
                GROUP BY AA.YEAR)
            , 0)) AS ANN_SAL_FIN
            , COUNT(1) OVER (PARTITION BY A.YEAR, A.EMPN) AS EMPN_CNT
            , ROW_NUMBER() OVER (PARTITION BY A.YEAR, A.EMPN ORDER BY A.YEAR, A.EMPN, D.SORT_ORDER) AS EMPN_INDEX
            , COUNT(1) OVER (PARTITION BY F.YEAR, F.EMPN, F.DEPT_CD) AS DEPTCD_CNT
            , ROW_NUMBER() OVER (PARTITION BY F.YEAR, F.DEPT_CD, F.EMPN ORDER BY F.YEAR, F.EMPN, D.SORT_ORDER) AS DEPTCD_INDEX
        FROM ANN_SAL_CONF A
        LEFT OUTER JOIN BSC_INSA B
            ON A.YEAR = B.YEAR
            AND A.EMPN = B.EMPN
        LEFT OUTER JOIN PRS_MNG_EVAL_FINAL_RESULT F
            ON A.YEAR = F.YEAR
            AND A.EMPN = F.EMPN
            AND A.EVAL_GRP_ID = F.EVAL_GRP_ID
        LEFT OUTER JOIN BSC_INSA_DEPT C
            ON A.YEAR = C.YEAR
            AND F.DEPT_CD = C.DEPT_CD
        LEFT OUTER JOIN PRS_EVAL_GRP D
            ON A.YEAR = D.YEAR
	        AND A.EVAL_GRP_ID = D.EVAL_GRP_ID
        LEFT OUTER JOIN ANN_SAL_SET E
            ON A.YEAR = E.YEAR
            AND A.EMPN = E.EMPN
            AND A.EVAL_GRP_ID = E.EVAL_GRP_ID
        LEFT OUTER JOIN BSC_CODE H
            ON E.YEAR = H.YEAR
            AND H.CODE_GRP_ID = '186'
            AND E.GRADE = H.CODE_ID
        WHERE A.YEAR = #findYear#
        AND NOT EXISTS ( SELECT POS_TC FROM (SELECT '06' POS_TC FROM DUAL UNION SELECT '08' POS_TC FROM DUAL) WHERE F.POS_TC = POS_TC )
	    <isNotEqual property="findDeptCd" compareValue="0000">
        AND F.DEPT_CD IN (    SELECT DEPT_CD
                                     FROM BSC_INSA_DEPT
                                    WHERE YEAR = #findYear#
                               START WITH DEPT_CD = #findDeptCd#
                               CONNECT BY PRIOR YEAR = YEAR
                                      AND PRIOR DEPT_CD = UP_DEPT_CD)
        </isNotEqual>
	   ORDER BY B.KOR_NM

	</select>
	
	<!--
	==================================================================
	  # 설명	: 성과연봉 확정여부 보기
	  #	기능	: SELECT
	  #	TABLE	: ANN_SAL_SET
	==================================================================
	-->
	<select id="getConfYn" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT CASE WHEN MAX (CONF_DT) is null
			   THEN 'N'
			   ELSE 'Y'
				END CONF_YN
			FROM ANN_SAL_SET
		 WHERE YEAR = #findYear#
	</select>

	<!--
	==================================================================
	  # 설명	: 성과연봉 집계 실행 여부 보기
	  #	기능	: SELECT
	  #	TABLE	: ANN_SAL_SET
	==================================================================
	-->
	<select id="getModYn" parameterClass="hashMap" resultClass="java.lang.Integer">
		SELECT COUNT(EMPN)
	      FROM ANN_SAL_CONF
	     WHERE YEAR= #findYear#
	</select>

	<!--
	==================================================================
	  # 설명	: 성과연봉 집계 실행가능 여부 보기
	  #	기능	: SELECT
	  #	TABLE	: ANN_SAL_SET
	==================================================================
	-->
	<select id="getCountYn" parameterClass="hashMap" resultClass="java.lang.Integer">
		SELECT COUNT(EMPN)
		  FROM PRS_MNG_EVAL_FINAL_RESULT
		 WHERE YEAR = #findYear#
	</select>

	<!--
    ==================================================================
      # 설명    : 성과연봉 확정 수정
      # 기능    : UPDATE
      # TABLE   : ANN_SAL_SET
    ==================================================================
    -->
    <update id="insertConfYn" parameterClass="hashMap">
        UPDATE ANN_SAL_SET
        <isEqual prepend="SET" property="confYn" compareValue="Y">
        	CONF_DT	= sysdate
        </isEqual>
        <isEqual prepend="SET" property="confYn" compareValue="N">
        	CONF_DT	= ''
        </isEqual>
         WHERE YEAR		= #year#

    </update>

	<!--
    ==================================================================
      # 설명    : 성과연봉 일괄수정
      # 기능    : UPDATE
      # TABLE   : ANN_SAL_SET
    ==================================================================
    -->
    <update id="updateAnnSalConf" parameterClass="hashMap">
        UPDATE ANN_SAL_CONF SET
	           DIF_ANN_SAL 		= #difAnnSal#
	         , BASIC_SAL 		= #basicSal#
	         , JOB_SAL 			= #jobSal#
	         , WORK_MON			= #workMon#
	         , LUNCH_ALLO 		= #lunchAllo#
	         , INSIDE_PAY 		= #insidePay#
	         , GOV_PAY 			= #govPay#
	         , LABOR_PAY		= #laborPay#
	 	 WHERE YEAR 			= #year#
	       AND EMPN 			= #empn#
	       AND EVAL_GRP_ID 	= #evalGrpId#
    </update>
    
	<!--
    ==================================================================
      # 설명    : 확정 결과값 삭제
      # 기능    : DELETE
      # TABLE   : ANN_SAL_CONF
    ==================================================================
    -->
    <delete id="deleteData" parameterClass="hashMap">
        DELETE FROM ANN_SAL_CONF
         WHERE YEAR				= #findYear#

    </delete>

    <!--
    ==================================================================
      # 설명  : 성과연봉 수정
      # 기능  : INSERT
      # TABLE : ANN_SAL_SET
    ==================================================================
    -->
	<insert id="insertData" parameterClass="hashMap">
		INSERT INTO ANN_SAL_SET (YEAR
                       , EMPN
                       , ANN_DAY
                       , BASIC_SAL
                       , JOB_SAL
                       , CRDT)
			     VALUES (#findYear#
			           , #empn#
			           , #annDay#
			           , #basicSal#
			           , #jobSal#
			           , sysdate)
	</insert>

	<!--
	==================================================================
	  # 설명	: 성과연봉 집계
	  #	기능	: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<parameterMap id="paramMap" class="java.util.HashMap">
		<parameter property="year" 		jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
	</parameterMap>

	<!--
	==================================================================
	  # 설명	: 성과연봉 집계 실행
	  #	기능	: PROCEDURES
	  #	TABLE	: ANN_SAL_SET
	==================================================================
	-->
	<procedure id="annSalSet" parameterMap="paramMap">
		{CALL SP_ANN_SAL_SET(?)}
	</procedure>
	
	<!--
	==================================================================
	  # 설명	: 일괄수정 데이터 삭제
	  #	기능	: DELETE
	  #	TABLE	: ANN_SAL_CONF
	==================================================================
	-->
	<delete id="deleteAnnSalConf" parameterClass="hashMap">
		DELETE FROM ANN_SAL_CONF
		WHERE YEAR = #findYear#
		  AND EMPN = #empn#
		  AND EVAL_GRP_ID = #evalGrpId#
	</delete>
	
</sqlMap>