<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="mem.monitor.memEvalProcMonitor">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: MEM_DISSENT
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />
	 

	<!--
	==================================================================   
	  # 설명	: 1차평가진행사항 모니터링
	  #	기능	: SELECT
	  #	TABLE	: BSC_CODE, MEM_USER
	==================================================================
	-->
	<select id="get1EvalInfo" parameterClass="hashMap" resultClass="hashMap">
		SELECT
		       COUNT(A.EVAL_1_EMP_NO) AS TOT_COUNT
		     , NVL(SUM(CASE WHEN A.COM_COUNT = A.TARGET_COUNT THEN 1 ELSE 0 END), 0) AS COM_COUNT
		     , NVL(SUM(CASE WHEN A.TARGET_COUNT <![CDATA[ > ]]> A.COM_COUNT AND A.COM_COUNT = 0 THEN 1 ELSE 0 END), 0) AS NOT_COUNT
		     , NVL(SUM(CASE WHEN A.TARGET_COUNT <![CDATA[ > ]]> A.COM_COUNT AND A.COM_COUNT <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END), 0) AS ING_COUNT
		  FROM(
		        SELECT
		               A.EVAL_1_EMP_NO
		             , (
		                SELECT
		                       COUNT(MEE.EMP_NO) AS COM_COUNT
		                  FROM MEM_EVAL_STATE MES
		                     , MEM_EVAL_EMP MEE
		                     , MEM_USER MU
		                 WHERE MES.YEAR = MEE.YEAR
		                   AND MES.EVAL_GUBUN = MEE.EVAL_GUBUN
		                   AND MES.EVAL_EMP_NO = MEE.EVAL_EMP_NO
		                   AND MES.YEAR = A.YEAR
		                   AND MES.EVAL_GUBUN = '01'
		                   AND MES.EVAL_STATE = 'Y'
		                   AND MES.EVAL_EMP_NO = A.EVAL_1_EMP_NO
                           AND MEE.YEAR = MU.YEAR
                           AND MEE.EMP_NO = MU.EMP_NO
				    <isEqual property="eval1YnByGroup" compareValue="Y">
				             AND MES.EVAL_GRP_ID = MU.EVAL_GRP_ID
				    </isEqual>
				    <isEqual property="eval1YnByGroup" compareValue="N">
				             AND MES.EVAL_GRP_ID = 'ALL'
				    </isEqual>
		             ) AS COM_COUNT
		             , (
		                SELECT
		                       COUNT(MU.EMP_NO) AS TARGET_COUNT
		                  FROM MEM_USER MU
		                 WHERE MU.YEAR = A.YEAR
		                   AND MU.EVAL_1_EMP_NO = A.EVAL_1_EMP_NO
		             ) AS TARGET_COUNT
		          FROM MEM_USER A
		         WHERE A.YEAR = #findYear#
		           AND A.EVAL_1_EMP_NO IS NOT NULL
		         GROUP BY A.YEAR, A.EVAL_1_EMP_NO
		 ) A
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 2차평가진행사항 모니터링
	  #	기능	: SELECT
	  #	TABLE	: BSC_CODE, MEM_USER
	==================================================================
	-->
	<select id="get2EvalInfo" parameterClass="hashMap" resultClass="hashMap">
		SELECT
		       COUNT(A.EVAL_2_EMP_NO) AS TOT_COUNT
		     , NVL(SUM(CASE WHEN A.COM_COUNT = A.TARGET_COUNT THEN 1 ELSE 0 END), 0) AS COM_COUNT
		     , NVL(SUM(CASE WHEN A.TARGET_COUNT <![CDATA[ > ]]> A.COM_COUNT AND A.COM_COUNT = 0 THEN 1 ELSE 0 END), 0) AS NOT_COUNT
		     , NVL(SUM(CASE WHEN A.TARGET_COUNT <![CDATA[ > ]]> A.COM_COUNT AND A.COM_COUNT <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END), 0) AS ING_COUNT
		  FROM(
		        SELECT
		               A.EVAL_2_EMP_NO
		             , (
		                SELECT
		                       COUNT(MEE.EMP_NO) AS COM_COUNT
		                  FROM MEM_EVAL_STATE MES
		                     , MEM_EVAL_EMP MEE
		                     , MEM_USER MU
		                 WHERE MES.YEAR = MEE.YEAR
		                   AND MES.EVAL_GUBUN = MEE.EVAL_GUBUN
		                   AND MES.EVAL_EMP_NO = MEE.EVAL_EMP_NO
		                   AND MES.YEAR = A.YEAR
		                   AND MES.EVAL_GUBUN = '02'
		                   AND MES.EVAL_STATE = 'Y'
		                   AND MES.EVAL_EMP_NO = A.EVAL_2_EMP_NO
                           AND MEE.YEAR = MU.YEAR
                           AND MEE.EMP_NO = MU.EMP_NO
				    <isEqual property="eval2YnByGroup" compareValue="Y">
				             AND MES.EVAL_GRP_ID = MU.EVAL_GRP_ID
				    </isEqual>
				    <isEqual property="eval2YnByGroup" compareValue="N">
				             AND MES.EVAL_GRP_ID = 'ALL'
				    </isEqual>
		             ) AS COM_COUNT
		             , (
		                SELECT
		                       COUNT(MU.EMP_NO) AS TARGET_COUNT
		                  FROM MEM_USER MU
		                 WHERE MU.YEAR = A.YEAR
		                   AND MU.EVAL_2_EMP_NO = A.EVAL_2_EMP_NO
		             ) AS TARGET_COUNT
		          FROM MEM_USER A
		         WHERE A.YEAR = #findYear#
		           AND A.EVAL_2_EMP_NO IS NOT NULL
		         GROUP BY A.YEAR, A.EVAL_2_EMP_NO
		 ) A
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 동료평가진행사항 모니터링
	  #	기능	: SELECT
	  #	TABLE	: BSC_CODE, MEM_USER
	==================================================================
	-->
	<select id="get3EvalInfo" parameterClass="hashMap" resultClass="hashMap">
		SELECT
		       COUNT(A.EVAL_PEER_EMP_NO) AS TOT_COUNT
		     , NVL(SUM(CASE WHEN A.COM_COUNT = A.TARGET_COUNT THEN 1 ELSE 0 END), 0) AS COM_COUNT
		     , NVL(SUM(CASE WHEN A.TARGET_COUNT <![CDATA[ > ]]> A.COM_COUNT AND A.COM_COUNT = 0 THEN 1 ELSE 0 END), 0) AS NOT_COUNT
		     , NVL(SUM(CASE WHEN A.TARGET_COUNT <![CDATA[ > ]]> A.COM_COUNT AND A.COM_COUNT <![CDATA[ > ]]> 0 THEN 1 ELSE 0 END), 0) AS ING_COUNT
		  FROM(
		        SELECT
		               A.EVAL_PEER_EMP_NO
		             , (
		                SELECT
		                       COUNT(MEE.EMP_NO) AS COM_COUNT
		                  FROM MEM_EVAL_STATE MES
		                     , MEM_EVAL_EMP MEE
		                     , MEM_USER MU
		                 WHERE MES.YEAR = MEE.YEAR
		                   AND MES.EVAL_GUBUN = MEE.EVAL_GUBUN
		                   AND MES.EVAL_EMP_NO = MEE.EVAL_EMP_NO
		                   AND MES.YEAR = A.YEAR
		                   AND MES.EVAL_GUBUN = '03'
		                   AND MES.EVAL_STATE = 'Y'
		                   AND MES.EVAL_EMP_NO = A.EVAL_PEER_EMP_NO
                           AND MEE.YEAR = MU.YEAR
                           AND MEE.EMP_NO = MU.EMP_NO
				    <isEqual property="peerYnByGroup" compareValue="Y">
				             AND MES.EVAL_GRP_ID = MU.EVAL_GRP_ID
				    </isEqual>
				    <isEqual property="peerYnByGroup" compareValue="N">
				             AND MES.EVAL_GRP_ID = 'ALL'
				    </isEqual>
		             ) AS COM_COUNT
		             , (
		                SELECT
		                       COUNT(DISTINCT MPEU.EMP_NO) AS TARGET_COUNT
		                  FROM MEM_PEER_EVAL_USER MPEU
		                 WHERE MPEU.YEAR = A.YEAR
		                   AND MPEU.EVAL_PEER_EMP_NO = A.EVAL_PEER_EMP_NO
		             ) AS TARGET_COUNT
		          FROM MEM_PEER_EVAL_USER A
		         WHERE A.YEAR = #findYear#
		         GROUP BY A.YEAR, A.EVAL_PEER_EMP_NO
		 ) A
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 이의신청현황 모니터링
	  #	기능	: SELECT
	  #	TABLE	: BSC_CODE, MEM_USER
	==================================================================
	-->
	<select id="getDissentInfo" parameterClass="hashMap" resultClass="hashMap">
		SELECT COUNT(A.EMP_NO) TOT_COUNT
		     , NVL(MAX(B.REQ_COUNT), 0) AS REQ_COUNT
		     , NVL(MAX(B.NOT_COUNT), 0) AS NOT_COUNT
		     , NVL(MAX(B.ALO_COUNT), 0) AS ALO_COUNT
		     , NVL(MAX(B.PRT_COUNT), 0) AS PRT_COUNT
		     , NVL(MAX(B.NO_COUNT), 0) AS NO_COUNT
		  FROM MEM_USER A 
		     , (
				SELECT
		               A.YEAR
				     , SUM(A.PROC_COUNT) AS REQ_COUNT
					 , SUM(DECODE(A.PROC_STATUS_ID, '01', A.PROC_COUNT, 0)) AS NOT_COUNT
				     , SUM(DECODE(A.PROC_STATUS_ID, '02', A.PROC_COUNT, 0)) AS ALO_COUNT
				     , SUM(DECODE(A.PROC_STATUS_ID, '03', A.PROC_COUNT, 0)) AS PRT_COUNT
				     , SUM(DECODE(A.PROC_STATUS_ID, '04', A.PROC_COUNT, 0)) AS NO_COUNT
				  FROM(
				      SELECT
		                     A.YEAR
				           , A.PROC_STATUS_ID
				           , COUNT(A.PROC_STATUS_ID) AS PROC_COUNT
				        FROM MEM_DISSENT A
				       WHERE A.YEAR = #findYear#
				         AND A.DELETE_DT IS NULL
				       GROUP BY A.YEAR, A.PROC_STATUS_ID
				) A
		        GROUP BY A.YEAR
		     ) B
		 WHERE A.YEAR = #findYear#
		   AND A.YEAR = B.YEAR(+)
		 GROUP BY A.YEAR
	</select>	
	
	<!--
	==================================================================   
	  # 설명	: 1차평가자 평가완료 직원목록
	  #	기능	: SELECT
	  #	TABLE	: MEM_USER, V_ROLE_USER, MEM_EVAL_STATE, MEM_EVAL_EMP
	==================================================================
	-->
	<select id="getEval1EmpList" parameterClass="hashMap" resultClass="hashMap">
		SELECT DISTINCT
		       A.EVAL_1_EMP_NO AS EMP_NO
		     , A.EVAL_1_EMP_NM AS EMP_NM
		     , A.EVAL_1_DEPT_CD AS DEPT_CD
		     , F_DEPT_LEV2_NM(A.YEAR, A.EVAL_1_DEPT_CD) AS DEPT_NM
		     , A.EVAL_1_CAST_TC AS CAST_TC
		     , F_CODE_NM('170', A.EVAL_1_CAST_TC , A.YEAR) AS CAST_NM 
		     , A.EVAL_1_POS_TC AS POS_TC
		     , F_CODE_NM('171', A.EVAL_1_POS_TC , A.YEAR) AS POS_NM
		     , B.EMAIL
		     , C.TARGET_COUNT
		     , C.COM_COUNT
		     , C.TARGET_COUNT- C.COM_COUNT AS NOT_COUNT
		  FROM 
		       (SELECT A.YEAR
		             , A.EVAL_1_EMP_NO AS EVAL_EMP_NO, 
		              (SELECT COUNT(MEE.EMP_NO) AS COM_COUNT 
		                 FROM MEM_EVAL_STATE MES 
		                    , MEM_EVAL_EMP MEE 
		                    , MEM_USER MU
		               WHERE MES.YEAR = MEE.YEAR 
		                     AND MES.EVAL_GUBUN = MEE.EVAL_GUBUN 
		                     AND MES.EVAL_EMP_NO = MEE.EVAL_EMP_NO 
		                     AND MES.YEAR = A.YEAR 
		                     AND MES.EVAL_GUBUN = '01' 
		                     AND MES.EVAL_STATE = 'Y' 
		                     AND MES.EVAL_EMP_NO = A.EVAL_1_EMP_NO 
                             AND MEE.YEAR = MU.YEAR
                             AND MEE.EMP_NO = MU.EMP_NO
				    <isEqual property="eval1YnByGroup" compareValue="Y">
				             AND MES.EVAL_GRP_ID = MU.EVAL_GRP_ID
				    </isEqual>
				    <isEqual property="eval1YnByGroup" compareValue="N">
				             AND MES.EVAL_GRP_ID = 'ALL'
				    </isEqual>
		              ) AS COM_COUNT , 
		              (SELECT COUNT(MU.EMP_NO) AS TARGET_COUNT 
		                FROM MEM_USER MU 
		               WHERE MU.YEAR = A.YEAR 
		                     AND MU.EVAL_1_EMP_NO = A.EVAL_1_EMP_NO 
		              ) AS TARGET_COUNT 
		         FROM MEM_USER A 
		        WHERE A.YEAR = #findYear# 
		              /**P*/ 
		              AND A.EVAL_1_EMP_NO IS NOT NULL 
		        GROUP BY A.YEAR, 
		              A.EVAL_1_EMP_NO 
		       ) C
		      , MEM_USER A
			  , V_ROLE_USER B
		  WHERE 1 = 1
		    AND A.YEAR = C.YEAR
		    AND A.EVAL_1_EMP_NO = C.EVAL_EMP_NO
		    AND A.EVAL_1_EMP_NO = B.USER_ID(+)
		<isEqual property="gubun" compareValue="E1_COM">
		    AND C.TARGET_COUNT = C.COM_COUNT
		</isEqual>
		<isEqual property="gubun" compareValue="E1_NOT">
		    AND C.TARGET_COUNT <![CDATA[ > ]]> C.COM_COUNT
		    AND C.COM_COUNT = 0
		</isEqual>
		<isEqual property="gubun" compareValue="E1_ING">
		    AND C.TARGET_COUNT <![CDATA[ > ]]> C.COM_COUNT
		    AND C.COM_COUNT <![CDATA[ > ]]> 0
		</isEqual>
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 2차평가자 평가완료 직원목록
	  #	기능	: SELECT
	  #	TABLE	: MEM_USER, V_ROLE_USER, MEM_EVAL_STATE, MEM_EVAL_EMP
	==================================================================
	-->
	<select id="getEval2EmpList" parameterClass="hashMap" resultClass="hashMap">
		SELECT DISTINCT
		       A.EVAL_2_EMP_NO AS EMP_NO
		     , A.EVAL_2_EMP_NM AS EMP_NM
		     , A.EVAL_2_DEPT_CD AS DEPT_CD
		     , F_DEPT_LEV2_NM(A.YEAR, A.EVAL_2_DEPT_CD) AS DEPT_NM
		     , A.EVAL_2_CAST_TC AS CAST_TC
		     , F_CODE_NM('170', A.EVAL_2_CAST_TC , A.YEAR) AS CAST_NM 
		     , A.EVAL_2_POS_TC AS POS_TC
		     , F_CODE_NM('171', A.EVAL_2_POS_TC , A.YEAR) AS POS_NM
		     , B.EMAIL
		     , C.TARGET_COUNT
		     , C.COM_COUNT
		     , C.TARGET_COUNT- C.COM_COUNT AS NOT_COUNT
		  FROM 
		       (SELECT A.YEAR
		             , A.EVAL_2_EMP_NO AS EVAL_EMP_NO, 
		              (SELECT COUNT(MEE.EMP_NO) AS COM_COUNT 
		                 FROM MEM_EVAL_STATE MES  
		                    , MEM_EVAL_EMP MEE 
		                    , MEM_USER MU
		               WHERE MES.YEAR = MEE.YEAR 
		                     AND MES.EVAL_GUBUN = MEE.EVAL_GUBUN 
		                     AND MES.EVAL_EMP_NO = MEE.EVAL_EMP_NO 
		                     AND MES.YEAR = A.YEAR 
		                     AND MES.EVAL_GUBUN = '02' 
		                     AND MES.EVAL_STATE = 'Y' 
		                     AND MES.EVAL_EMP_NO = A.EVAL_2_EMP_NO 
                             AND MEE.YEAR = MU.YEAR
                             AND MEE.EMP_NO = MU.EMP_NO
				    <isEqual property="eval2YnByGroup" compareValue="Y">
				             AND MES.EVAL_GRP_ID = MU.EVAL_GRP_ID
				    </isEqual>
				    <isEqual property="eval2YnByGroup" compareValue="N">
				             AND MES.EVAL_GRP_ID = 'ALL'
				    </isEqual>
		              ) AS COM_COUNT , 
		              (SELECT COUNT(MU.EMP_NO) AS TARGET_COUNT 
		                FROM MEM_USER MU 
		               WHERE MU.YEAR = A.YEAR 
		                     AND MU.EVAL_2_EMP_NO = A.EVAL_2_EMP_NO 
		              ) AS TARGET_COUNT 
		         FROM MEM_USER A 
		        WHERE A.YEAR = #findYear# 
		              /**P*/ 
		              AND A.EVAL_2_EMP_NO IS NOT NULL 
		        GROUP BY A.YEAR, 
		              A.EVAL_2_EMP_NO 
		       ) C
		      , MEM_USER A
			  , V_ROLE_USER B
		  WHERE 1 = 1
		    AND A.YEAR = C.YEAR
		    AND A.EVAL_2_EMP_NO = C.EVAL_EMP_NO
		    AND A.EVAL_2_EMP_NO = B.USER_ID(+)
		<isEqual property="gubun" compareValue="E2_COM">
		    AND C.TARGET_COUNT = C.COM_COUNT
		</isEqual>
		<isEqual property="gubun" compareValue="E2_NOT">
		    AND C.TARGET_COUNT <![CDATA[ > ]]> C.COM_COUNT
		    AND C.COM_COUNT = 0
		</isEqual>
		<isEqual property="gubun" compareValue="E2_ING">
		    AND C.TARGET_COUNT <![CDATA[ > ]]> C.COM_COUNT
		    AND C.COM_COUNT <![CDATA[ > ]]> 0
		</isEqual>
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 동료평가자 평가완료 직원목록
	  #	기능	: SELECT
	  #	TABLE	: MEM_USER, V_ROLE_USER, MEM_EVAL_STATE, MEM_EVAL_EMP
	==================================================================
	-->
	<select id="getEval3EmpList" parameterClass="hashMap" resultClass="hashMap">
		SELECT DISTINCT 
		       A.EVAL_PEER_EMP_NO AS EMP_NO , 
		       B.USER_NM AS EMP_NM , 
		       A.EVAL_PEER_DEPT_CD AS DEPT_CD , 
		       F_DEPT_LEV2_NM(A.YEAR, A.EVAL_PEER_DEPT_CD) AS DEPT_NM, 
		       A.EVAL_PEER_CAST_TC AS CAST_TC , 
		       F_CODE_NM('170', A.EVAL_PEER_CAST_TC , A.YEAR) AS CAST_NM , 
		       A.EVAL_PEER_POS_TC AS POS_TC , 
		       F_CODE_NM('171', A.EVAL_PEER_POS_TC , A.YEAR) AS POS_NM , 
		       B.EMAIL , 
		       C.TARGET_COUNT , 
		       C.COM_COUNT , 
		       C.TARGET_COUNT- C.COM_COUNT AS NOT_COUNT 
		  FROM 
		       (SELECT A.YEAR , 
		              A.EVAL_PEER_EMP_NO AS EVAL_EMP_NO, 
		              (SELECT COUNT(MEE.EMP_NO) AS COM_COUNT 
		                 FROM MEM_EVAL_STATE MES 
		                    , MEM_EVAL_EMP MEE 
		                    , MEM_USER MU
		               WHERE MES.YEAR = MEE.YEAR 
		                     AND MES.EVAL_GUBUN = MEE.EVAL_GUBUN 
		                     AND MES.EVAL_EMP_NO = MEE.EVAL_EMP_NO 
		                     AND MES.YEAR = A.YEAR 
		                     AND MES.EVAL_GUBUN = '03' 
		                     AND MES.EVAL_STATE = 'Y' 
		                     AND MES.EVAL_EMP_NO = A.EVAL_PEER_EMP_NO 
                             AND MEE.YEAR = MU.YEAR
                             AND MEE.EMP_NO = MU.EMP_NO
				    <isEqual property="peerYnByGroup" compareValue="Y">
				             AND MES.EVAL_GRP_ID = MU.EVAL_GRP_ID
				    </isEqual>
				    <isEqual property="peerYnByGroup" compareValue="N">
				             AND MES.EVAL_GRP_ID = 'ALL'
				    </isEqual>
		              ) AS COM_COUNT , 
		              (SELECT COUNT(MP.EMP_NO) AS TARGET_COUNT 
		                FROM MEM_PEER_EVAL_USER MP 
		               WHERE MP.YEAR = A.YEAR 
		                     AND MP.EVAL_PEER_EMP_NO = A.EVAL_PEER_EMP_NO 
		              ) AS TARGET_COUNT 
		         FROM MEM_PEER_EVAL_USER A 
		        WHERE A.YEAR = #findYear#
		              AND A.EVAL_PEER_EMP_NO IS NOT NULL 
		        GROUP BY A.YEAR, 
		              A.EVAL_PEER_EMP_NO 
		       ) C , 
		       MEM_PEER_EVAL_USER A , 
		       V_ROLE_USER B
		 WHERE 1 = 1 
		       AND A.YEAR = C.YEAR 
		       AND A.EVAL_PEER_EMP_NO = C.EVAL_EMP_NO 
		       AND A.EVAL_PEER_EMP_NO = B.USER_ID(+) 
		<isEqual property="gubun" compareValue="E3_COM">
		    AND C.TARGET_COUNT = C.COM_COUNT
		</isEqual>
		<isEqual property="gubun" compareValue="E3_NOT">
		    AND C.TARGET_COUNT <![CDATA[ > ]]> C.COM_COUNT
		    AND C.COM_COUNT = 0
		</isEqual>
		<isEqual property="gubun" compareValue="E3_ING">
		    AND C.TARGET_COUNT <![CDATA[ > ]]> C.COM_COUNT
		    AND C.COM_COUNT <![CDATA[ > ]]> 0
		</isEqual>
	</select>
</sqlMap>