<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="gov.bos.actualMon">

	<!--
	==================================================================
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: BOSS_METRIC_MAPPING
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />


	<!--
	==================================================================
	  # 설명	: 기관장평가실적 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BOSS_METRIC_MAPPING
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
            WITH SIGNAL AS (SELECT A.CODE_ID, B.FROM_VALUE, B.TO_VALUE ,B.COLOR
                              FROM BSC_CODE A
                                   LEFT OUTER JOIN BSC_COMMON_STATUS B ON A.CODE_ID = B.STATUS_ID AND B.YEAR = A.YEAR
                             WHERE A.CODE_GRP_ID = '021'
                               AND A.DELETE_DT IS NULL
                               AND A.YEAR = (SELECT CASE YEAR_YN WHEN 'Y' THEN #findYear# ELSE '9999' END
                                               FROM BSC_CODE_GRP WHERE CODE_GRP_ID = '021'))
             SELECT X.YEAR,
		            X.EVAL_CAT_GRP_ID,
		            X.EVAL_CAT_GRP_NM,
		            X.BOSS_METRIC_ID,
		            X.BOSS_METRIC_NM,
		            Z1.CODE_ID AS GRP_STATUS,
		            Z2.CODE_ID AS BOSS_METRIC_STATUS,
		            X.WEIGHT,
		            X.GOV_METRIC_ID,
		            X.EVAL_SCORE,
		            X.CAT_GRP_WEIGHT,
		            X.CAT_GRP_SCORE,
		            X.METRIC_SCORE,
		            X.GRP_SCORE,
		            X.METRIC_ID,
		            BM.METRIC_NM,
		            BM.SC_DEPT_ID,
		            ROUND(NVL(Y.SCORE,''),3) SCORE,
		            X.GRP_SORT_ORDER,
		            X.BOSS_SORT_ORDER,
		            COUNT(1) OVER(PARTITION BY X.YEAR, X.EVAL_CAT_GRP_ID) GRP_CNT,
		            ROW_NUMBER() OVER(PARTITION BY X.YEAR, X.EVAL_CAT_GRP_ID ORDER BY X.GRP_SORT_ORDER, X.EVAL_CAT_GRP_ID, X.BOSS_SORT_ORDER,  X.BOSS_METRIC_ID, BM.SORT_ORDER, BM.SC_DEPT_ID) GRP_NUM,
		            COUNT(1) OVER(PARTITION BY X.YEAR, X.EVAL_CAT_GRP_ID,X.BOSS_METRIC_ID) METRIC_CNT,
		            ROW_NUMBER() OVER(PARTITION BY X.YEAR, X.EVAL_CAT_GRP_ID,X.BOSS_METRIC_ID ORDER BY X.GRP_SORT_ORDER, X.EVAL_CAT_GRP_ID, X.BOSS_SORT_ORDER,  X.BOSS_METRIC_ID, BM.SORT_ORDER, BM.SC_DEPT_ID) METRIC_NUM
			   FROM (SELECT A.YEAR,
				            A.EVAL_CAT_GRP_ID,
				            CG.EVAL_CAT_GRP_NM,
				            A.BOSS_METRIC_ID,
				            A.BOSS_METRIC_NM,
				            A.WEIGHT,
				            A.GOV_METRIC_ID,
				            A.EVAL_SCORE,
				            A.CAT_GRP_WEIGHT,
				            A.CAT_GRP_SCORE,
				            CG.SORT_ORDER AS GRP_SORT_ORDER,
				            A.BOSS_SORT_ORDER,
				            ROUND( (A.EVAL_SCORE/A.WEIGHT)*100,3) AS METRIC_SCORE,
				            ROUND((A.CAT_GRP_SCORE/A.CAT_GRP_WEIGHT)*100,3) AS GRP_SCORE,
				            CASE WHEN A.GOV_METRIC_ID IS NULL THEN C.METRIC_ID
				            ELSE B.METRIC_ID END METRIC_ID
                       FROM (SELECT A.YEAR,
						            A.EVAL_CAT_GRP_ID,
						            A.BOSS_METRIC_ID,
						            A.BOSS_METRIC_NM,
						            A.WEIGHT,
						            A.GOV_METRIC_ID,
						            A.EVAL_SCORE,
						            A.SORT_ORDER AS BOSS_SORT_ORDER,
						            SUM(A.WEIGHT) OVER(PARTITION BY A.YEAR, A.EVAL_CAT_GRP_ID) CAT_GRP_WEIGHT,
						            SUM(A.EVAL_SCORE) OVER(PARTITION BY A.YEAR, A.EVAL_CAT_GRP_ID) CAT_GRP_SCORE
							   FROM BOSS_METRIC A
							  WHERE A.YEAR = #findYear#
							    AND A.DELETE_DT IS NULL
							 ) A
							 LEFT OUTER JOIN BOSS_CAT_GRP CG
							 ON A.YEAR = CG.YEAR
							 AND A.EVAL_CAT_GRP_ID = CG.EVAL_CAT_GRP_ID
							 LEFT OUTER JOIN GOV_METRIC_MAPPING B
							 ON A.YEAR = B.YEAR
							 AND A.GOV_METRIC_ID  = B.GOV_METRIC_ID
							 AND B.METRIC_ID IN (SELECT METRIC_ID FROM BSC_METRIC WHERE YEAR = #findYear# AND DELETE_DT IS NULL)
							 LEFT OUTER JOIN BOSS_METRIC_MAPPING C
							 ON A.YEAR = C.YEAR
							 AND A.BOSS_METRIC_ID = C.BOSS_METRIC_ID
							 AND C.METRIC_ID IN (SELECT METRIC_ID FROM BSC_METRIC WHERE YEAR = #findYear# AND DELETE_DT IS NULL)
                    ) X
					LEFT OUTER JOIN BSC_METRIC BM
					ON X.YEAR = BM.YEAR
					AND X.METRIC_ID = BM.METRIC_ID
					AND BM.DELETE_DT IS NULL
					LEFT OUTER JOIN BSC_METRICSCORE Y
					ON X.YEAR = Y.YEAR
					AND Y.MON = '12'
					AND Y.ANAL_CYCLE = 'Y'
					AND X.METRIC_ID = Y.METRIC_ID
					LEFT OUTER JOIN SIGNAL Z1 ON  ( Z1.FROM_VALUE  <![CDATA[ < ]]> X.GRP_SCORE AND X.GRP_SCORE <![CDATA[ <= ]]>  Z1.TO_VALUE )
					LEFT OUTER JOIN SIGNAL Z2 ON  ( Z2.FROM_VALUE  <![CDATA[ < ]]> X.METRIC_SCORE AND X.METRIC_SCORE <![CDATA[ <= ]]>  Z2.TO_VALUE )
           ORDER BY X.GRP_SORT_ORDER, X.EVAL_CAT_GRP_ID, GRP_NUM,
                    X.BOSS_SORT_ORDER,  X.BOSS_METRIC_ID,
                    BM.SORT_ORDER, BM.SC_DEPT_ID

	</select>

	<!--
	==================================================================
	  # 설명	: 기관장평가실적 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: BOSS_METRIC_MAPPING
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR
			 , BOSS_METRIC_ID
			 , METRIC_ID
		  FROM BOSS_METRIC_MAPPING
		 WHERE 1 = 1
		   AND YEAR = #year#
		   AND BOSS_METRIC_ID = #bossMetricId#
		   AND METRIC_ID = #metricId#
	</select>

	<!--
	==================================================================
	  # 설명	: 기관장평가실적 등록
	  #	기능	: INSERT
	  #	TABLE	: BOSS_METRIC_MAPPING
	==================================================================
	-->
	<insert id="insertData" parameterClass="hashMap">
		<selectKey resultClass="java.lang.String" keyProperty="SEQ" >
			SELECT F_PGM_SERI('BOSS_METRIC_MAPPING','','','','','') SEQ FROM DUAL
		</selectKey>
		INSERT INTO BOSS_METRIC_MAPPING (
			   YEAR
			 , BOSS_METRIC_ID
			 , METRIC_ID
			 , CREATE_DT
			 ) VALUES (
			   #year#
			 , #SEQ#
			 , #metricId#
			 , SYSDATE
			 )
	</insert>

	<!--
	==================================================================
	  # 설명	: 기관장평가실적 수정
	  #	기능	: UPDATE
	  #	TABLE	: BOSS_METRIC_MAPPING
	==================================================================
	-->
	<update id="updateData" parameterClass="hashMap">
		UPDATE BOSS_METRIC_MAPPING
		   SET 		 WHERE 1 = 1
		   AND YEAR = #year#
		   AND BOSS_METRIC_ID = #bossMetricId#
		   AND METRIC_ID = #metricId#
	</update>


	<!--
	==================================================================
	  # 설명	: 기관장평가실적 삭제
	  #	기능	: UPDATE
	  #	TABLE	: BOSS_METRIC_MAPPING
	==================================================================
	-->
	<update id="deleteData" parameterClass="hashMap">
		DELETE FROM BOSS_METRIC_MAPPING
		 WHERE 1 = 1
		   AND YEAR = #year#
		   AND BOSS_METRIC_ID = #bossMetricId#
		   AND METRIC_ID = #metricId#
	</update>


</sqlMap>


