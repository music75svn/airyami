<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="man.mon.metricMappingTab">

	<!--
	==================================================================
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />


	<!--
	==================================================================
	  # 설명	: 내부평가지표연계표 목록 보기
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
				SELECT
		               A.YEAR
		             , A.MAN_ID, A.MAN_NM
		             , A.STRAT_ID, A.STRAT_NM
		             , A.STRAT_ORDER
		             , COUNT(A.STRAT_ID) OVER(PARTITION BY A.YEAR, A.STRAT_ID) AS STRAT_CNT
		             , ROW_NUMBER() OVER(PARTITION BY A.YEAR, A.STRAT_ID
		                                                ORDER BY A.STRAT_ORDER NULLS LAST
		                                                       , A.STRAT_ID, A.CSF_ORDER NULLS LAST
		                                                       , A.CSF_ID, A.MAN_ORDER NULLS LAST
		                                                       , A.MAN_KPI_ID , A.MAN_ORDER NULLS LAST, C.METRIC_ID) AS STRAT_INDEX
		             , A.CSF_ID
		             , A.CSF_NM
		             , A.CSF_ORDER
		             , COUNT(A.STRAT_ID) OVER(PARTITION BY A.YEAR, A.STRAT_ID, A.CSF_ID) AS CSF_CNT
		             , ROW_NUMBER() OVER(PARTITION BY A.YEAR, A.STRAT_ID, A.CSF_ID
		                                                ORDER BY A.STRAT_ORDER NULLS LAST
		                                                	   , A.STRAT_ID , A.CSF_ORDER NULLS LAST
		                                                	   , A.CSF_ID, A.MAN_ORDER NULLS LAST
		                                                	   , A.MAN_KPI_ID , A.MAN_ORDER NULLS LAST, C.METRIC_ID) AS CSF_INDEX
		             , A.MAN_KPI_ID
		             , A.MAN_KPI_NM
		             , D.TGT_TARGET
		             , E.VALUE
		             , E.STATUS_ID
		             , A.MAN_ORDER
		             , COUNT(A.STRAT_ID) OVER(PARTITION BY A.YEAR, A.STRAT_ID, A.CSF_ID, A.MAN_KPI_ID) AS MAN_KPI_CNT
		             , ROW_NUMBER() OVER(PARTITION BY A.YEAR,A.STRAT_ID, A.CSF_ID, A.MAN_KPI_ID
		                                                ORDER BY A.STRAT_ORDER NULLS LAST
		                                                	   , A.STRAT_ID , A.CSF_ORDER NULLS LAST
		                                                	   , A.CSF_ID, A.MAN_ORDER NULLS LAST
		                                                	   , A.MAN_KPI_ID , A.MAN_ORDER NULLS LAST, C.METRIC_ID) AS MAN_KPI_INDEX
		             , B.METRIC_ID
		             , C.METRIC_NM
		             , C.SC_DEPT_ID
		             , G.SC_DEPT_NM
		             , TO_CHAR(F.TARGET) AS METRIC_TARGET
		             , TO_CHAR(F.ACTUAL) AS METRIC_ACTUAL
		             , TO_CHAR(F.SCORE) AS METRIC_SCORE
		             , F.STATUS AS METRIC_STATUS_ID
		             , C.SORT_ORDER AS METRIC_SORT_ORDER
		FROM V_MAN_METRIC A
		LEFT OUTER JOIN  MAN_METRIC_MAPPING B
		ON A.YEAR = B.YEAR
		AND A.MAN_KPI_ID = B.MAN_KPI_ID
		INNER JOIN BSC_METRIC C
		ON B.YEAR = C.YEAR
		AND B.METRIC_ID = C.METRIC_ID
		INNER JOIN MAN_METRIC_TARGET D
		ON A.YEAR = D.YEAR
		AND A.MAN_KPI_ID = D.MAN_KPI_ID
		LEFT OUTER JOIN MAN_METRICSCORE E
		ON A.YEAR = E.YEAR
		AND A.MAN_KPI_ID = E.MAN_KPI_ID
		AND D.MON = E.MON
		AND D.ANAL_CYCLE = E.ANAL_CYCLE
		LEFT OUTER JOIN BSC_METRICSCORE F
		ON E.YEAR = F.YEAR
		AND E.MON = F.MON
		AND E.ANAL_CYCLE = F.ANAL_CYCLE
		AND C.METRIC_ID = F.METRIC_ID
		LEFT OUTER JOIN BSC_SC_DEPT G
		ON C.YEAR = G.YEAR
		AND C.SC_DEPT_ID = G.SC_DEPT_ID
		AND G.DELETE_DT IS NULL
		LEFT OUTER JOIN MAN_METRIC H
		ON A.YEAR = H.YEAR
		AND A.MAN_KPI_ID = H.MAN_KPI_ID
		AND A.MAN_KPI_GRP_ID = H.MAN_KPI_GRP_ID
		WHERE 1=1
		AND D.YEAR = #findYear#
		AND D.MON =#findMon#
		AND C.DELETE_DT IS NULL
		AND F.ANAL_CYCLE = 'Y'
		AND H.MONITORING_YN  = 'Y'
		<dynamic>
			<isNotEmpty prepend="AND" property="findStratId">
	           	A.STRAT_ID = #findStratId#
		   		</isNotEmpty>
				<isNotEmpty prepend="AND" property="findCsfId">
                A.CSF_ID = #findCsfId#
                </isNotEmpty>
	    </dynamic>
	</select>

	<!--
	==================================================================
	  # 설명	: 조회조건(전략과제) 목록
	  #	기능	: SELECT
	  #	TABLE	: STR_STRAT_SUBJECT
	==================================================================
	-->
	<select id="getSubjectList" parameterClass="hashMap" resultClass="hashMap">
		 SELECT STRAT_ID, STRAT_NM
         FROM MAN_STRATEGY
         WHERE 1=1
         AND YEAR =#findYear#
         ORDER BY SORT_ORDER, STRAT_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 조회조건(CSF) 목록
	  #	기능	: SELECT
	  #	TABLE	: MAN_CSF
	==================================================================
	-->
	<select id="getCsfList" parameterClass="hashMap" resultClass="hashMap">
		SELECT CSF_ID,CSF_NM
        FROM MAN_CSF
        WHERE 1=1
        AND YEAR = #findYear#
	<dynamic prepend="AND">
		<isNotEmpty property="findStratId">
                STRAT_ID = #findStratId#
		</isNotEmpty>
	</dynamic>
		ORDER BY SORT_ORDER, CSF_ID
	</select>

</sqlMap>


