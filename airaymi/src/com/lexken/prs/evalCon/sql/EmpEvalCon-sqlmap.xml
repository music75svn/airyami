<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="prs.evalCon.empEvalCon">

    <!--
    ==================================================================   
      # 설명    : typeAlias 선언
      #    기능    : SETTING
      #    TABLE    : 
    ==================================================================
    -->
    <typeAlias alias="hashMap"             type="java.util.HashMap" />
    <typeAlias alias="detailContentMap"    type="java.util.HashMap"/>
     

    <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 평가 목록 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getList" parameterClass="hashMap" resultClass="hashMap">
         SELECT   YEAR
		        , DEPT_CD
		        , DEPT_KOR_NM
		        , ASSESSOR_EMPN
		        , KOR_NM
		        , EVAL_COUNT
		        , EVAL_GRP_YN
		        , CASE             
		            WHEN EVAL_SUBMIT_YN = EVAL_COUNT THEN 'Y'             
		            WHEN EVAL_SUBMIT_YN = 0 THEN 'N'             
		            WHEN EVAL_COUNT = 0 
		            OR EVAL_SUBMIT_YN = (EVAL_COUNT*2) THEN 'C'             
		            ELSE 'N'          
		        END EVAL_SUBMIT_YN
    FROM
        (  SELECT A.YEAR    
             	, A.DEPT_CD 
            	, F_DEPT_FULL_NM (A.YEAR, A.DEPT_CD,'BSC_INSA_DEPT') DEPT_KOR_NM
           		, A.ASSESSOR_EMPN
           		, A.KOR_NM
            	, A.EVAL_COUNT
            	, DECODE(EVAL_GRP_CNT, 0,'N','Y') AS EVAL_GRP_YN
            	, SUM(A.EVAL_SUBMIT_YN) AS EVAL_SUBMIT_YN  
        FROM
            (  SELECT A.YEAR
                , A.DEPT_CD
                , A.DEPT_KOR_NM
                , I.KOR_NM 
                , B.ASSESSOR_EMPN
                , CASE 
                    WHEN C.EVAL_SUBMIT_YN = 'Y' THEN 1                                
                    WHEN C.EVAL_SUBMIT_YN = 'N' THEN 0                                
                    WHEN C.EVAL_SUBMIT_YN IS NULL THEN 2                                
                    ELSE -1                          
                 END EVAL_SUBMIT_YN
                 , (SELECT COUNT(1) FROM CON_EMP_MEMBER WHERE YEAR = A.YEAR AND DEPT_CD = A.DEPT_CD  AND EVAL_YN = 'Y') AS EVAL_COUNT
                 , (SELECT COUNT(EVAL_GRP_ID) FROM PRS_EVAL_GRP WHERE YEAR = D.YEAR AND EVAL_GRP_ID = D.EVAL_GRP_ID AND DELETE_DT IS NULL) AS EVAL_GRP_CNT         
            FROM BSC_INSA_DEPT A    
            LEFT OUTER JOIN CON_EMP_EVAL_ASSESSOR B ON A.YEAR = B.YEAR AND A.DEPT_CD = B.DEPT_CD    
            LEFT OUTER JOIN BSC_INSA I ON B.YEAR = I.YEAR AND B.ASSESSOR_EMPN  = I.EMPN         
            LEFT OUTER JOIN CON_EMP_MEMBER C ON B.YEAR = C.YEAR AND B.DEPT_CD = C.DEPT_CD AND EVAL_YN = 'Y'     
            LEFT OUTER JOIN CON_EMP_DEPT_EVAL_GRP D ON B.YEAR = D.YEAR AND B.DEPT_CD = D.DEPT_CD   
            LEFT OUTER JOIN PRS_EVAL_GRP E ON D.YEAR = E.YEAR AND D.EVAL_GRP_ID = E.EVAL_GRP_ID AND E.DELETE_DT IS NULL
            WHERE A.YEAR =  #findYear#  AND B.ASSESSOR_EMPN IS NOT NULL) A     
        <!-- LEFT OUTER JOIN CON_EMP_EVAL_MEMBER B ON A.YEAR = B.YEAR  
        <isNotEmpty prepend="AND" property="findAssessorEmpn">
         B.EMPN = #findAssessorEmpn#       
        </isNotEmpty>
        -->
        WHERE A.YEAR =  #findYear# 
        <isNotEmpty prepend="AND" property="findAssessorEmpn">
          A.ASSESSOR_EMPN =  #findAssessorEmpn#
        </isNotEmpty>  
          AND A.DEPT_CD IN ( SELECT A.DEPT_CD
                                 FROM BSC_INSA_DEPT A
                                 LEFT OUTER JOIN BSC_INSA_DEPT B
                                   ON A.YEAR = B.YEAR AND A.USE_YN = B.USE_YN AND A.DEPT_CD = B.UP_DEPT_CD
                                WHERE A.YEAR = #findYear# 
                                  AND A.DEPT_CD > '1090'
                                GROUP BY A.DEPT_CD
                               HAVING COUNT(B.DEPT_CD) = 0
                          )                    
        GROUP BY  A.YEAR
	            , A.DEPT_CD
	            , A.DEPT_KOR_NM
	            , A.ASSESSOR_EMPN
	            , A.KOR_NM
	            , A.EVAL_COUNT
	            , EVAL_GRP_CNT       
        ORDER BY KOR_NM )  
    </select>
    
    
     <!--
	==================================================================
	  # 설명	: 직원개인 기여도평가기간 조회
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_SCHEDULE
	==================================================================
	-->
	<select id="getEvalSchedule" parameterClass="hashMap" resultClass="hashMap">
		SELECT EMP_START_DT, EMP_END_DT
		     , CASE WHEN SYSDATE BETWEEN TO_DATE(EMP_START_DT, 'rrrr-mm-dd') AND TO_DATE(EMP_END_DT || '23:59:59', 'rrrr-mm-dd hh24:mi:ss') THEN 'T'
		            ELSE 'N' END EVAL_YN
		  FROM PRS_EVAL_SCHEDULE
		 WHERE 1 = 1
		 <isNotEmpty prepend="AND" property="findYear">
			YEAR = #findYear#
		 </isNotEmpty>
		 <isNotEmpty prepend="AND" property="year">
			YEAR = #year#
		 </isNotEmpty>
	</select>
	
	<!--
    ==================================================================
      # 설명    : 직원개인 기여도평가자 목록 보기
      #    기능    : SELECT
      #    TABLE    :
    ==================================================================
    -->
    <select id="getEvalAssessor" parameterClass="hashMap" resultClass="hashMap">
		SELECT DISTINCT 
		      A.YEAR
		    , A.ASSESSOR_EMPN
		    , B.KOR_NM
		FROM CON_EMP_EVAL_ASSESSOR A
		 INNER JOIN BSC_INSA B
		            ON A.YEAR = B.YEAR
		            AND A.ASSESSOR_EMPN = B.EMPN
		  WHERE A.YEAR = #findYear#          
		   ORDER BY KOR_NM ASC         
    </select>
 
 	<!--
	==================================================================
	  # 설명	: 직원개인기여도평가 평가군 가져오기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getEmpEvalConDeptNm" remapResults="true" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT F_DEPT_FULL_NM(YEAR, DEPT_CD,'BSC_INSA_DEPT') AS DEPT_NM
          FROM BSC_INSA_DEPT
         WHERE YEAR = #findYear#
           AND DEPT_CD = #deptCd#
	</select>
	
    <!--
	==================================================================
	  # 설명	: 직원개인기여도평가 평가군 가져오기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getEmpEvalConGroupCd" remapResults="true" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT
		      EVAL_GRP_ID
		FROM CON_EMP_DEPT_EVAL_GRP
		WHERE YEAR = #findYear#
		  AND DEPT_CD = #deptCd#
	</select>
	
	<!--
	==================================================================
	  # 설명	: 직원개인기여도평가 평가군 정보 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getEmpEvalConGrp" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR, EVAL_GRP_ID, EVAL_GRP_NM, EVAL_METHOD_ID, EVAL_TYPE FROM PRS_EVAL_GRP WHERE YEAR = #findYear# AND EVAL_GRP_ID = #findEvalGrpId#
	</select>
	
    <!--
	==================================================================
	  # 설명	: 직원개인기여도평가 평가항목 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getEmpEvalConItemList" remapResults="true" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
			 , A.EVAL_ITEM_ID
			 , 'GAE'|| A.EVAL_ITEM_ID || 'SCORE_ETC' AS EVAL_ITEM_SCORE
			 , A.EVAL_ITEM_NM
			 , A.CONTENT
			 , A.EVAL_GBN
			 , A.WEIGHT
		  FROM CON_EVAL_ITEM A
		 WHERE A.YEAR = #findYear#
		 ORDER BY A.SORT_ORDER
	</select>
	
	<!--
	==================================================================
	  # 설명	: 직원개인기여도평가 평가등급가져오기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getEmpEvalConGrade" remapResults="true" parameterClass="hashMap" resultClass="hashMap">
		 SELECT A.YEAR
		      , A.GRADE_ITEM_ID
		      , B.CODE_NM AS GRADE_ITEM_NM
		      , B.ETC1 AS GRADE_ITEM_RATE
		      , (SELECT COUNT(1) FROM CON_EMP_MEMBER WHERE YEAR =  #findYear# AND DEPT_CD =  #deptCd# AND EVAL_YN = 'Y') ITEM_CNT
		      , NVL(A.ITEM_DISTRI_CNT, 0) * FLOOR((SELECT COUNT (1) FROM CON_EMP_MEMBER WHERE YEAR = #findYear# AND DEPT_CD =  #deptCd# AND EVAL_YN = 'Y') / A.ITEM_CNT)  + NVL (C.ITEM_DISTRI_CNT, 0) ITEM_DISTRI_CNT
		   FROM (
		                    SELECT YEAR, GRADE_ITEM_ID, ITEM_CNT, ITEM_DISTRI_CNT
		                      FROM CON_ECM_GRADE_DISTRI_TAB
		                     WHERE (YEAR, ITEM_CNT) IN (
		                                                                SELECT YEAR, MAX(ITEM_CNT)
		                                                                  FROM CON_ECM_GRADE_DISTRI_TAB
		                                                                 WHERE YEAR= #findYear# 
		                                                                   AND DISTRI_GUBUN = '01'
		                                                                 GROUP BY YEAR
		                                                               )
		                       AND DISTRI_GUBUN = '01'
		        ) A
		        LEFT OUTER JOIN BSC_CODE B
		          ON A.YEAR = B.YEAR
		         AND A.GRADE_ITEM_ID = B.CODE_ID
		         AND B.CODE_GRP_ID = '224'
		        LEFT OUTER JOIN (
		                    SELECT YEAR, GRADE_ITEM_ID, ITEM_CNT, ITEM_DISTRI_CNT
		                      FROM CON_ECM_GRADE_DISTRI_TAB
		                     WHERE YEAR = #findYear#
		                       AND DISTRI_GUBUN = '01' 
		                       AND ITEM_CNT = MOD(  (
		                                                SELECT COUNT(1)
		                                                  FROM CON_EMP_MEMBER
		                                                 WHERE YEAR =  #findYear# AND DEPT_CD =  #deptCd# AND EVAL_YN = 'Y'),
		                                            (
		                                                SELECT MAX(ITEM_CNT)
		                                                  FROM CON_ECM_GRADE_DISTRI_TAB
		                                                 WHERE YEAR= #findYear#
		                                                   AND DISTRI_GUBUN = '01' ))
		        ) C
		     ON A.YEAR = C.YEAR AND A.GRADE_ITEM_ID = C.GRADE_ITEM_ID
		  WHERE A.YEAR =  #findYear#
		  ORDER BY B.SORT_ORDER ASC 
		  
	</select>
	
	<!--
	==================================================================
	  # 설명	: 직원개인기여도평가 평가제출여부(부서별)
	  #	기능	: SELECT
	  #	TABLE	: CON_EMP_MEMBER
	==================================================================
	-->
	<select id="getDeptEmpEvalConSubmitYn" remapResults="true" parameterClass="hashMap" resultClass="java.lang.String">
         SELECT EVAL_SUBMIT_YN 
          FROM CON_EMP_MEMBER 
         WHERE YEAR = #findYear# 
           AND DEPT_CD =#deptCd# 
           AND EVAl_YN = 'Y' 
         GROUP BY YEAR
             , DEPT_CD
             , EVAL_SUBMIT_YN
        <!-- 
        SELECT CASE WHEN  ( SELECT COUNT(1) 
				              FROM CON_EMP_MEMBER 
				             WHERE YEAR = #findYear#
				               AND DEPT_CD =#deptCd# 
				               AND EVAl_YN = 'Y' 
				             GROUP BY YEAR, DEPT_CD
				             )   = (SELECT COUNT(1) SUBMIT_CNT
				             		  FROM CON_EMP_MEMBER 
						             WHERE YEAR = #findYear#
						               AND DEPT_CD =#deptCd# 
						               AND EVAl_YN = 'Y' 
						               AND EVAL_SUBMIT_YN = 'Y'
						             GROUP BY YEAR
						             		,DEPT_CD
						                    ,EVAL_SUBMIT_YN
						   ) THEN 'Y'
					  ELSE 'N'
					  END AS EVAL_SUBMIT_YN
		   FROM DUAL
		    -->
	</select>
	
	<!--
    ==================================================================
      # 설명    : 평가군
      # 기능    : SELECT
      # TABLE   : PRS_CLOSING
    ==================================================================
    -->
    <select id="getEmpSubmitYn" parameterClass="hashMap" resultClass="java.lang.String">
        SELECT
		      EMP_EVAL_YN
		FROM PRS_CLOSING
		WHERE YEAR = #findYear#
    </select>
    
    <select id="getEmpEvalConAssesorDeptCd" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT DEPT_ID FROM V_ROLE_USER WHERE SABUN NOT IN (SELECT CODE_ID FROM BSC_CODE WHERE CODE_GRP_ID= '181') AND SABUN = #assessorEmpn#
    </select>
    
    <!--
    ==================================================================
      # 설명    : 직원개인기여도평가 상세 보기
      # 기능    : SELECT
      # TABLE    :
    ==================================================================
    -->
    <select id="getEmpEvalConMemberList" remapResults="true" parameterClass="hashMap" resultClass="hashMap">
        SELECT
		      T1.YEAR
		    , T1.EMPN
		    , T1.KOR_NM
		    , T1.DEPT_CD
		    , CASE WHEN (SELECT COUNT(1) FROM PRS_EMP_TARGET WHERE YEAR = T1.YEAR AND EVAL_MEMB_EMPN = T1.EMPN) > 0 THEN 'Y'
		           WHEN (SELECT COUNT(1) FROM PRS_EMP_RPT WHERE YEAR = T1.YEAR AND EVAL_MEMB_EMPN = T1.EMPN) > 0 THEN 'Y'
		      ELSE 'N'    
		      END AS RPT_YN
		    , <iterate property="itemArray" conjunction=",">
		     	 MAX($itemArray[]$) $itemArray[]$
		      </iterate>
		    , <iterate property="itemArray" conjunction=",">
		     	 MAX($itemArray[]$EVAL_GBN) $itemArray[]$EVAL_GBN
		      </iterate>
		    , <iterate property="itemArray" conjunction=",">
		     	 MAX($itemArray[]$SCORE_ETC) GAE$itemArray[]$SCORE_ETC
		      </iterate>
		    , <iterate property="itemArray" conjunction="+">
		     	 NVL(MAX($itemArray[]$SCORE_WEIGHT), 0) 
		      </iterate> AS SCORE_ETC
		    , T1.EVAL_SUBMIT_YN
            , T1.GRADE
            , T1.SCORE
            , T1.RANK
		FROM (
		        SELECT
		              A.YEAR
		            , A.EMPN
		            , A.KOR_NM
		            , A.DEPT_CD
		            , B.EVAL_ITEM_ID
		            , B.EVAL_ITEM_NM
		            , <iterate property="itemArray" conjunction=",">
					  CASE WHEN B.EVAL_ITEM_ID = '$itemArray[]$' THEN C.GRADE ELSE NULL END $itemArray[]$
					</iterate>
					, <iterate property="itemArray" conjunction=",">
					  CASE WHEN B.EVAL_ITEM_ID = '$itemArray[]$' THEN B.EVAL_GBN ELSE NULL END $itemArray[]$EVAL_GBN
					</iterate>
					, <iterate property="itemArray" conjunction=",">
					  CASE WHEN B.EVAL_GBN = '02' AND B.EVAL_ITEM_ID = '$itemArray[]$' THEN C.SCORE ELSE NULL END $itemArray[]$SCORE_ETC
					</iterate>
					, <iterate property="itemArray" conjunction=",">
					  CASE WHEN B.EVAL_GBN = '02' AND B.EVAL_ITEM_ID = '$itemArray[]$' THEN C.SCORE * B.WEIGHT / 100 ELSE NULL END $itemArray[]$SCORE_WEIGHT
					</iterate>
					<!-- , CASE WHEN B.EVAL_GBN = '02' THEN C.SCORE ELSE NULL END SCORE_ETC -->
		            , E.GRADE
					, A.SCORE AS SCORE
            		, A.RANKING AS RANK
            		, A.EVAL_SUBMIT_YN
		        FROM CON_EMP_MEMBER A
		            INNER JOIN (SELECT
		                              T1.YEAR
		                            , T1.EVAL_ITEM_ID
		                            , T1.EVAL_ITEM_NM
		                            , T1.EVAL_GBN
		                            , T1.WEIGHT
		                        FROM CON_EVAL_ITEM T1
		                        WHERE T1.YEAR = #findYear#) B
		                ON A.YEAR = B.YEAR
		            LEFT OUTER JOIN CON_EMP_EVAL_GRADE C
		                ON A.YEAR = C.YEAR
		                AND A.EMPN = C.EMPN
		                AND B.EVAL_ITEM_ID = C.EVAL_ITEM_ID
		            LEFT OUTER JOIN CON_EMP_EVAL_ASSESSOR D
		                ON A.YEAR = D.YEAR
		                AND A.DEPT_CD = D.DEPT_CD
		            LEFT OUTER JOIN CON_EMP_EVAL_MEMBER E
			            ON A.YEAR = E.YEAR
			            AND A.EMPN = E.EMPN
		        WHERE A.YEAR = #findYear#
		          AND A.DEPT_CD = #deptCd#
		          AND A.EVAL_YN = 'Y'
		        ORDER BY A.EMPN, B.EVAL_ITEM_ID
		) T1
		WHERE T1.YEAR = #findYear#
		GROUP BY T1.YEAR, T1.EMPN, T1.KOR_NM, T1.DEPT_CD
		       , T1.EVAL_SUBMIT_YN, T1.GRADE, T1.SCORE, T1.RANK
		ORDER BY T1.RANK, T1.KOR_NM
    </select>
    
    <!--
	==================================================================
	  # 설명	: 직원개인기여도평가 평가항목별 등급별 인원수
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getEmpEvalConItemGradeCount" parameterClass="hashMap" resultClass="hashMap">
		SELECT EVAL_ITEM_ID
			 , EVAL_ITEM_NM
			 , WEIGHT AS SCORE
			 , CONTENT
		     , <iterate property="itemArray" conjunction=",">
		     	 SUM($itemArray[]$) $itemArray[]$
		       </iterate>
		  FROM (
		        SELECT A.EVAL_ITEM_ID
		             , A.EVAL_ITEM_NM
		             , A.SORT_ORDER
		             , A.WEIGHT
		             , A.CONTENT
					 , <iterate property="itemArray" conjunction=",">
					   CASE WHEN B.GRADE = '$itemArray[]$' THEN 1 ELSE 0 END $itemArray[]$
					   </iterate>
		          FROM (
		                SELECT T1.YEAR
		                     , T1.EVAL_ITEM_ID
		                     , T1.EVAL_ITEM_NM
		                     , T1.SORT_ORDER
		                     , T1.WEIGHT
		                     , T1.CONTENT
		                  FROM CON_EVAL_ITEM T1
		                 WHERE T1.YEAR = #findYear#
		                   AND T1.EVAL_GBN = '01'
		               ) A
		          LEFT OUTER JOIN CON_EMP_EVAL_GRADE B
          			ON A.YEAR = B.YEAR 
          		   AND A.EVAL_ITEM_ID = B.EVAL_ITEM_ID
				   AND B.ASSESSOR_EMPN = #assessorEmpn#
			       AND B.EMPN IN (SELECT EMPN FROM CON_EMP_MEMBER 
			                       WHERE YEAR = A.YEAR 
			                         AND DEPT_CD = #deptCd# 
			                         AND EVAL_YN = 'Y') 
			     <!-- WHERE B.EVAL_GRP_ID = #evalGrpId# -->
		       ) 
		 GROUP BY EVAL_ITEM_ID, EVAL_ITEM_NM, WEIGHT, CONTENT, SORT_ORDER
		 ORDER BY SORT_ORDER
	</select>
	
	<!--
    ==================================================================
      # 설명    : 직원개인기여도평가 점수 수정
      #    기능    : UPDATE
      #    TABLE    :
    ==================================================================
    -->
    <update id="saveEvalScore" parameterClass="hashMap">
        UPDATE CON_EMP_MEMBER SET
		      SCORE = #score#
		    , RANKING = #rank#
		    , EVAL_SUBMIT_YN = #evalSubmitYn#
		WHERE YEAR = #year#
		  AND EMPN = #empn#
    </update>
    
    <!--
	==================================================================
	  # 설명	: 직원개인기여도평가 저장
	  #	기능	: MERGE INTO
	  #	TABLE	: PRS_MNG_EVAL
	==================================================================
	-->
	<insert id="saveEvalGrade" parameterClass="hashMap">
        MERGE INTO CON_EMP_EVAL_GRADE A
		    USING (SELECT #year# AS YEAR
		    		    , #evalGrpId# AS EVAL_GRP_ID
		    			, #empn# AS EMPN
		    			, #evalItemId# AS EVAL_ITEM_ID
		                , #assessorEmpn# AS ASSESSOR_EMPN
		                , #evalGrade# AS GRADE
		                , (SELECT ETC1 FROM BSC_CODE WHERE YEAR = #year# AND CODE_GRP_ID = '224' AND CODE_ID = #evalGrade#) AS SCORE
		           FROM DUAL)B
		    ON (A.YEAR = B.YEAR AND A.EVAL_GRP_ID = B.EVAL_GRP_ID AND A.EMPN = B.EMPN AND A.EVAL_ITEM_ID = B.EVAL_ITEM_ID)
		    WHEN MATCHED THEN
		        UPDATE SET A.GRADE = B.GRADE, A.ASSESSOR_EMPN = B.ASSESSOR_EMPN, A.SCORE = B.SCORE
		    WHEN NOT MATCHED THEN
		        INSERT (A.YEAR, A.EVAL_GRP_ID, A.EMPN, A.EVAL_ITEM_ID, A.ASSESSOR_EMPN, A.GRADE, A.CREATE_DT, A.SCORE)
		        VALUES(B.YEAR, B.EVAL_GRP_ID, B.EMPN, B.EVAL_ITEM_ID, B.ASSESSOR_EMPN, B.GRADE, SYSDATE, B.SCORE)
	</insert>
	
	 <!--
	==================================================================
	  # 설명	: 직원개인기여도평가 평가제출
	  #	기능	: UPDATE
	  #	TABLE	: CON_EMP_EVAL_MEMBER
	==================================================================
	-->
	<update id="updateEmpEvalConSubmitYn" parameterClass="hashMap">
        MERGE INTO CON_EMP_EVAL_MEMBER A
            USING (SELECT #year# AS YEAR, #findEvalGrpId# AS EVAL_GRP_ID, #empn# AS EMPN, #score# AS SCORE, #rank# AS RANKING, #finalGrade# AS GRADE, #evalSubmitYn# AS EVAL_SUBMIT_YN
                   FROM DUAL)B
            ON (A.YEAR = B.YEAR AND A.EVAL_GRP_ID = B.EVAL_GRP_ID AND A.EMPN = B.EMPN)
            WHEN MATCHED THEN
                UPDATE SET A.SCORE = #score#
                	     , A.RANKING = #rank#
                	     , A.GRADE = #finalGrade#
            WHEN NOT MATCHED THEN
                INSERT (A.YEAR, A.EVAL_GRP_ID, A.EMPN, A.SCORE, A.RANKING, A.GRADE, A.CREATE_DT)
                VALUES(B.YEAR, B.EVAL_GRP_ID, B.EMPN, B.SCORE, B.RANKING, B.GRADE, SYSDATE)
	</update>
	
	<!--
	==================================================================
	  # 설명	: 직원개인기여도평가 평가N으로 변경
	  #	기능	: UPDATE
	  #	TABLE	: CON_EMP_MEMBER
	==================================================================
	-->
	<update id="updateEvalSubmitYn" parameterClass="hashMap">
         MERGE INTO CON_EMP_MEMBER A
            USING (SELECT #year# AS YEAR, #evalSubmitYn# AS EVAL_SUBMIT_YN, #deptCd# as DEPT_CD
                   FROM DUAL)B
            ON (A.YEAR = B.YEAR AND A.DEPT_CD = B.DEPT_CD AND EVAL_YN = 'Y')
            WHEN MATCHED THEN
				UPDATE SET A.EVAL_SUBMIT_YN = B.EVAL_SUBMIT_YN
	</update>
	
	<!--
    ==================================================================
      # 설명    : 내부평가결과 조직등급 가져오기
      # 기능    : SELECT
      # TABLE   :
    ==================================================================
    -->
    <select id="getDeptGrade" parameterClass="hashMap" resultClass="java.lang.String">
        SELECT GRADE 
          FROM BSC_DEPT_FINAL_SCORE T1
         WHERE T1.YEAR = #year#
           AND T1.SC_DEPT_ID = (SELECT SC_DEPT_ID
						          FROM BSC_SC_DEPT_MAPPING 
						   	     WHERE SC_DEPT_ID = T1.SC_DEPT_ID
						           AND YEAR = T1.YEAR
						           AND DEPT_ID = #deptCd#
                                )
    </select>
    
	<!--
	==================================================================
	  # 설명	: 직원개인기여도평가 최종등급
	  #	기능	: SELECT
	  #	TABLE	: CON_EMP_MEMBER
	==================================================================
	-->
	<select id="getFinalGrade" remapResults="true" parameterClass="hashMap" resultClass="java.lang.String">
        SELECT GRADE_ITEM_ID AS FINAL_GRADE
        	<!-- 
        	CASE WHEN (#deptGrade# = 'C' OR #deptGrade# = 'D') THEN #deptGrade# || 'M'
                    ELSE  #deptGrade# || GRADE_ITEM_ID 
                     END AS FINAL_GRADE 
                      -->
          FROM ( SELECT T2.YEAR
                	  , T2.EMPN
                	  , T2.SCORE
                	  , T3.GRADE_ITEM_ID
                	  , T2.RANKING
                	  , T2.EVAL_SUBMIT_YN
                	  , SYSDATE 
               	   FROM ( SELECT T0.YEAR
                	 	       , T0.EMPN
                        	   , T0.KOR_NM
                        	   , T0.DEPT_CD
                        	   , T0.SCORE
					           , RANK() OVER(ORDER BY T0.SCORE DESC) RANKING
					           , COUNT(T0.SCORE) OVER(PARTITION BY T0.YEAR) AS EVAL_TOT_CNT
					           , 'Y' AS EVAL_SUBMIT_YN
                         FROM ( SELECT A.YEAR
					                 , A.EMPN
					                 , A.KOR_NM
					                 , A.DEPT_CD
					                 , A.POS_TC
					                 , NVL(A.SCORE, 0) AS SCORE
					                 , COUNT(A.EMPN) OVER(PARTITION BY A.YEAR, A.DEPT_CD, A.EMPN) TOT_COUNT
					              FROM CON_EMP_MEMBER A
					             WHERE 1=1
					               AND A.SCORE IS NOT NULL
					               <!-- AND A.EVAL_SUBMIT_YN = 'Y' -->
					               AND A.DEPT_CD = #deptCd#
					               AND A.YEAR = #year#
					             ORDER BY A.RANKING, A.POS_TC
                 			   ) T0
                 		 ) T2
                     LEFT OUTER JOIN ( SELECT T1.YEAR
					                        , T1.GRADE_ITEM_ID
					                        , T1.ITEM_CNT
					                        , T1.ITEM_DISTRI_CNT
					                        , T1.ITEM_DISTRI_END_CNT - ITEM_DISTRI_CNT + 1 AS ITEM_DISTRI_START_CNT
					                        , T1.ITEM_DISTRI_END_CNT
						                 FROM ( SELECT YEAR
								                     , GRADE_ITEM_ID
								                     , ITEM_CNT
								                     , ITEM_DISTRI_CNT
								                     , SUM ( ITEM_DISTRI_CNT) OVER ( PARTITION BY YEAR, ITEM_CNT ORDER BY SORT_ORDER RANGE UNBOUNDED PRECEDING) AS ITEM_DISTRI_END_CNT
								                  FROM (SELECT YEAR
								                  			 , GRADE_ITEM_ID
								                  			 , ITEM_CNT
								                  			 , ITEM_DISTRI_CNT
								                  			 , DISTRI_GUBUN 
                                                             , CASE WHEN GRADE_ITEM_ID = 'BU' THEN '1'
                                                                    WHEN GRADE_ITEM_ID = 'U' THEN '2'
                                                                    WHEN GRADE_ITEM_ID = 'M' THEN '3'     
                                                                END SORT_ORDER
                                                          FROM CON_ECM_GRADE_DISTRI_TAB )  
								                 WHERE YEAR = #year#
								                   AND ITEM_CNT = (SELECT COUNT(1)
													                 FROM CON_EMP_MEMBER
													                WHERE YEAR = #year#
													                  AND DEPT_CD = #deptCd# 
													                  AND EVAL_YN = 'Y')
								                   AND DISTRI_GUBUN = '02'
								               ) T1
								      ) T3 
								   ON T2.YEAR = T3.YEAR
								  AND T3.ITEM_CNT = T2.EVAL_TOT_CNT
								  AND T2.RANKING BETWEEN T3.ITEM_DISTRI_START_CNT AND T3.ITEM_DISTRI_END_CNT
		      ) WHERE EMPN = #empn# AND YEAR = #year#
	</select>
	
	<!--
	==================================================================
	  # 설명	: 직원개인기여도평가 기여도 평가 제출여부가져오기
	  #	기능	: SELECT
	  #	TABLE	: CON_EMP_MEMBER
	==================================================================
	-->
	<select id="getEvalConSubmitYn" remapResults="true" parameterClass="hashMap" resultClass="java.lang.String">
		 SELECT CASE WHEN MAX(EVAL_COUNT) = MAX(EVAL_SUBMIT_COUNT) THEN 'Y'
                     ELSE 'N'
                 END AS TOTAL_SUBMIT_YN
           FROM (SELECT COUNT(1) AS EVAL_COUNT
            		  , NULL AS EVAL_SUBMIT_COUNT
                   FROM CON_EMP_MEMBER  T1
                  INNER JOIN  CON_EMP_EVAL_ASSESSOR T2 
                     ON T1.YEAR  = T2.YEAR
                    AND T1.DEPT_CD = T2.DEPT_CD
                  WHERE T1.YEAR = #findYear# 
                    AND T2.ASSESSOR_EMPN = #assessorEmpn#
                    AND T1.EVAL_YN = 'Y'
          UNION ALL
                 SELECT NULL AS EVAL_COUNT
                 	  , COUNT(1) AS EVAL_SUBMIT_COUNT
                   FROM CON_EMP_MEMBER  T1
                  INNER JOIN  CON_EMP_EVAL_ASSESSOR T2 
                     ON T1.YEAR  = T2.YEAR
                    AND T1.DEPT_CD = T2.DEPT_CD
                  INNER JOIN CON_EMP_EVAL_MEMBER T3
                     ON T1.YEAR = T3.YEAR
                    AND T1.EMPN = T3.EMPN
                  WHERE T1.YEAR = #findYear# 
                    AND T2.ASSESSOR_EMPN = #assessorEmpn#
                    AND T1.EVAL_YN = 'Y'
                    AND T3.EVAL_SUBMIT_YN = 'Y'
                )
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 자기성과기술서 상세 성과목표목록 리스트 조회  
	  #	기능	: SELECT
	  #	TABLE	: PRS_MNG_TARGET
	==================================================================
	-->
	<select id="getRptDetail" parameterClass="hashMap" resultClass="hashMap">
		  SELECT
		   	      A.YEAR
			    , A.EVAL_MEMB_EMPN
			    , A.METRIC_ID
			    , A.METRIC_NM
			    , A.METRIC_GUBUN
			    , C.CODE_NM AS METRIC_GUBUN_NM
			    , A.DIRECTION_CD
			    , D.CODE_NM AS DIRECTION_NM
			    , A.TARGET_VALUE
			    , A.UNIT
			    , B.VALUE
			    , ROUND(NVL(B.SCORE,0), 2) AS SCORE
			FROM PRS_EMP_TARGET A
			    LEFT OUTER JOIN PRS_EMP_ACTUAL B
			        ON A.YEAR = B.YEAR
			        AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN
			        AND A.METRIC_ID = B.METRIC_ID
			    INNER JOIN BSC_CODE C
			        ON A.METRIC_GUBUN = C.CODE_ID
			        AND CODE_GRP_ID = '229'
			    INNER JOIN BSC_CODE D
			        ON A.DIRECTION_CD = D.CODE_ID
			        AND D.CODE_GRP_ID = '230'                
			WHERE A.YEAR = #findYear#
			  AND A.EVAL_MEMB_EMPN = #evalMembEmpn#
    </select>
    
    <!--
	==================================================================   
	  # 설명	: 자기성과기술서 상세목록 리스트 조회 
	  #	기능	: SELECT
	  #	TABLE	: PRS_MNG_RPT
	==================================================================
	-->
	<resultMap id="detailContentMap" class="java.util.HashMap">
        <result property="YEAR"					column="YEAR" />                                   
		<result property="EVAL_MEMB_EMPN"		column="EVAL_MEMB_EMPN" />                         
		<result property="CAST_TC_NM"			column="CAST_TC_NM" />
		<result property="POS_TC_NM"			column="POS_TC_NM" />
		<result property="KOR_NM"				column="KOR_NM" />
		<result property="DEPT_NM"				column="DEPT_NM" />
		<result property="DEPT_CD"				column="DEPT_CD" />
		<result property="DUTY_FROM_DT"			column="DUTY_FROM_DT" />
		<result property="DUTY_END_DT"			column="DUTY_END_DT" />
		<result property="FROM_DT"				column="FROM_DT" />
		<result property="END_DT"				column="END_DT" />
		<result property="SUBMIT_YN"			column="SUBMIT_YN" />
		<result property="CONTENT"              column="CONTENT" />
		<result property="CONTENT2"             column="CONTENT2" />
		<result property="CONTENT3"             column="CONTENT3" />
    </resultMap>
	<select id="getRptMember" parameterClass="java.util.HashMap" resultClass="detailContentMap">
		   SELECT 
			      A.YEAR
			    , A.EMPN
			    , A.DEPT_CD
			    , C.DEPT_KOR_NM AS DEPT_NM
			    , F_DEPT_FULL_NM(A.YEAR, A.DEPT_CD, 'BSC_INSA_DEPT') DEPT_FULL_NM   
			    , A.CAST_TC
			    , F_CODE_NM('170', A.CAST_TC , A.YEAR) CAST_TC_NM 
			    , A.POS_TC
			    , F_CODE_NM('171', A.POS_TC	 , A.YEAR) POS_TC_NM
			    , A.KOR_NM 
			    , TO_CHAR(TO_DATE(E.DUTY_FROM_DT), 'YYYY') || '년' || TO_CHAR(TO_DATE(E.DUTY_FROM_DT), 'MM') || '월' || TO_CHAR(TO_DATE(E.DUTY_FROM_DT), 'DD') || '일' AS MIN_DUTY_FROM_DT 
			    , TO_CHAR(TO_DATE(D.DUTY_FROM_DT), 'YYYY') || '년' || TO_CHAR(TO_DATE(D.DUTY_FROM_DT), 'MM') || '월' || TO_CHAR(TO_DATE(D.DUTY_FROM_DT), 'DD') || '일' AS DUTY_FROM_DT 
			    , TO_CHAR(TO_DATE(D.DUTY_END_DT), 'YYYY') || '년' || TO_CHAR(TO_DATE(D.DUTY_END_DT), 'MM') || '월' || TO_CHAR(TO_DATE(D.DUTY_END_DT), 'DD') || '일' AS DUTY_END_DT
			    , TO_DATE(D.DUTY_FROM_DT) FROM_DT
			    , TO_DATE(D.DUTY_END_DT) END_DT
			    , B.SUBMIT_YN
			    , B.CONTENT
			    , B.CONTENT2
			    , B.CONTENT3
			FROM CON_EMP_MEMBER A
			    LEFT OUTER JOIN PRS_EMP_RPT B
			        ON A.YEAR = B.YEAR
			        AND A.EMPN = B.EVAL_MEMB_EMPN
			        AND A.DEPT_CD = B.DEPT_CD
			    INNER JOIN BSC_INSA_DEPT C
        			ON A.YEAR = C.YEAR
        		   AND A.DEPT_CD = C.DEPT_CD
			    LEFT OUTER JOIN 
			        ( SELECT YEAR
		                   , EMPN
		                   , DEPT_CD
		                   , MIN(START_PCMT_DATE) DUTY_FROM_DT
		                   , MAX(END_PCMT_DATE) DUTY_END_DT
			            FROM BSC_INSA_PCMT 
			           WHERE YEAR = #findYear#
			             AND EMPN = #evalMembEmpn#
			             AND DEPT_CD = #deptCd#
			           GROUP BY YEAR, EMPN, DEPT_CD
			       ) D
			      ON A.YEAR = D.YEAR
			     AND A.EMPN = D.EMPN 
			     AND A.DEPT_CD = D.DEPT_CD
			    LEFT OUTER JOIN 
			        ( SELECT EMPN
		                   , DEPT_CD
		                   , MIN(START_PCMT_DATE) DUTY_FROM_DT
		                   , MAX(END_PCMT_DATE) DUTY_END_DT
			            FROM BSC_INSA_PCMT 
			           WHERE EMPN = #evalMembEmpn#
			             AND DEPT_CD = #deptCd#
			           GROUP BY EMPN, DEPT_CD
			       ) E
			      ON A.EMPN = E.EMPN 
			     AND A.DEPT_CD = E.DEPT_CD  
			   WHERE A.YEAR = #findYear#
			     AND A.DEPT_CD = #deptCd#
			     AND EMPN = #evalMembEmpn#
			     AND A.EVAL_YN = 'Y'
    </select>
    
    <select id="getRptReMember" parameterClass="java.util.HashMap" resultClass="detailContentMap">
		   SELECT 
			      A.YEAR
			    , A.EMPN
			    , A.DEPT_CD
			    , C.DEPT_NM
			    , A.CAST_TC
			    , F_CODE_NM('170', A.CAST_TC , B.YEAR) CAST_TC_NM 
			    , A.POS_TC
			    , F_CODE_NM('171', A.POS_TC	 , B.YEAR) POS_TC_NM
			    , A.KOR_NM 
			    , TO_CHAR(TO_DATE(B.DUTY_FROM_DT), 'YYYY') || '년' || TO_CHAR(TO_DATE(B.DUTY_FROM_DT), 'MM') || '월' || TO_CHAR(TO_DATE(B.DUTY_FROM_DT), 'MM') || '일' AS DUTY_FROM_DT 
			    , TO_CHAR(TO_DATE(B.DUTY_END_DT), 'YYYY') || '년' || TO_CHAR(TO_DATE(B.DUTY_END_DT), 'MM') || '월' || TO_CHAR(TO_DATE(B.DUTY_END_DT), 'MM') || '일' AS DUTY_END_DT
			    , B.SUBMIT_YN
			FROM CON_EMP_MEMBER A
			    LEFT OUTER JOIN PRS_EMP_RPT B
			        ON A.YEAR = B.YEAR
			        AND A.EMPN = B.EVAL_MEMB_EMPN
			        AND A.DEPT_CD = B.DEPT_CD
			    INNER JOIN BSC_DEPTINFO C
        			ON A.DEPT_CD = C.DEPT_ID
			WHERE A.YEAR = #findYear#
			  AND A.DEPT_CD = #deptCd#
			  AND EMPN = #evalMembEmpn#
			  AND A.EVAL_YN = 'Y'
    </select>
	
</sqlMap>