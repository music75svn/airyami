<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="prs.emp.prsEvalExc">

    <!--
    ==================================================================
      # 설명    : typeAlias 선언
      #    기능    : SETTING
      #    TABLE    :
    ==================================================================
    -->
    <typeAlias alias="hashMap"             type="java.util.HashMap" />


    <!--
    ==================================================================
      # 설명    : 직원개인평가(평가대상제외자) 목록 보기
      #    기능    : SELECT
      #    TABLE    :
    ==================================================================
    -->
    <select id="getList" parameterClass="hashMap" resultClass="hashMap">
        SELECT
		      A.YEAR
		    , A.CODE_ID
		    , A.CODE_NM
		    , A.CONTENT
		    , (SELECT COUNT(1) FROM PRS_EMP_EXC WHERE YEAR = A.YEAR AND EXCEPT_CD = A.CODE_ID) AS EXCEPT_COUNT
		    , ETC1
		    , ETC2
		FROM BSC_CODE A
		WHERE A.CODE_GRP_ID = '194'
		  AND YEAR = #findYear#
    </select>

    <!--
    ==================================================================
      # 설명    : 직원개인평가(평가대상자)
      #    기능    : SELECT
      #    TABLE    :
    ==================================================================
    -->
    <select id="getPrsList" parameterClass="hashMap" resultClass="hashMap">
	        SELECT #findYear# YEAR, EMPN, KOR_NM, DEPT_CD, DEPT_KOR_NM, CAST_TC, POS_TC, EVAL_YN, CREATE_DT
			  FROM (SELECT   B.EMPN, B.KOR_NM, B.DEPT_CD, B.CAST_TC, B.POS_TC, F.DEPT_KOR_NM,
			                 'Y' EVAL_YN, CREATE_DT
			            FROM BSC_CODE A
			            INNER JOIN BSC_INSA B
			                ON A.CODE_ID = B.CAST_TC
			                AND A.YEAR = B.YEAR
			                AND B.EMPN NOT IN (SELECT EMPN
			                                  FROM PRS_EMP_EXC)
			               <isNotEmpty prepend="AND" property="findKorNm">
			                	B.KOR_NM LIKE  '%' || #findKorNm# ||'%'
			               </isNotEmpty>
			               <isNotEmpty prepend="AND" property="findEmpn">
			               		B.EMPN = #findEmpn#
			               </isNotEmpty>
			                 LEFT OUTER JOIN
			                 (SELECT DISTINCT EMPN
			                             FROM V_PRS_RE_MON
			                            WHERE EMPN IN (
			                                     SELECT DISTINCT EMPN
			                                                FROM BSC_INSA_PCMT
			                                               WHERE YEAR = #findYear#
			                                                 AND PCMT_TC = '41'
			                                                 AND CAST_TC BETWEEN '40' AND '70'
			                                                 )
			                         GROUP BY EMPN, CAST_TC
			                           HAVING SUM (WORK_MON) <![CDATA[ > ]]> 6) E ON B.EMPN = E.EMPN
			           INNER JOIN BSC_INSA_DEPT F
			                ON B.YEAR = F.YEAR
			                AND B.DEPT_CD = F.DEPT_CD
			                <isNotEmpty prepend="AND" property="findDeptKorNm">
						    	F.DEPT_KOR_NM LIKE  '%' || #findDeptKorNm# ||'%'
						    </isNotEmpty>
			           WHERE A.YEAR = #findYear#
			             AND A.CODE_GRP_ID = '170'
			             AND A.CODE_ID <![CDATA[ > ]]> '30'
			             AND A.CODE_ID <![CDATA[ <= ]]> '70'
			        ORDER BY A.SORT_ORDER)
    </select>

	<!--
	==================================================================
	  # 설명	: 사용자정보 조회
	  #	기능	: SELECT
	  #	TABLE	: V_ROLE_USER
	==================================================================
	-->
	<select id="selectUserList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.USER_ID
	         , A.USER_NM
	         , A.DEPT_ID
	         , A.DEPT_NM
	         , A.JIKGUB_CD
	         , A.JIKGUB_NM
	         , A.POS_CD
	         , A.POS_NM
	         , A.EMAIL
		 FROM V_ROLE_USER A
		WHERE 1=1
		<isNotEmpty prepend="AND" property="userNm">
             UPPER(A.USER_NM) LIKE  '%' || TRIM(UPPER(#userNm#)) ||'%'
		</isNotEmpty>
		<isEmpty prepend="AND" property="userNm">
			 A.DEPT_ID = #deptId#
			<!--  A.DEPT_ID = SUBSTR(#deptId#, 2) -->
		</isEmpty>
		ORDER BY A.SORT_ORDER
	</select>

    <!--
    ==================================================================
      # 설명    : 직원개인평가(제외대상자)
      #    기능    : SELECT
      #    TABLE    :
    ==================================================================
    -->
    <select id="getPrsExcList" parameterClass="hashMap" resultClass="hashMap">
	        SELECT
			      A.YEAR
			    , A.EMPN
			    , A.KOR_NM
			    , A.DEPT_CD
			    , B.DEPT_KOR_NM
			    , F_CODE_NM('170', A.CAST_TC , A.YEAR) CAST_TC_NM 
			    , F_CODE_NM('171', A.POS_TC , A.YEAR) POS_TC_NM 
			FROM PRS_EMP_EXC A
			    INNER JOIN BSC_INSA_DEPT B
			        ON A.YEAR = B.YEAR
			        AND A.DEPT_CD = B.DEPT_CD
			WHERE A.YEAR = #findYear#
			  AND A.EXCEPT_CD = #exceptCd#
    </select>


    <!--
    ==================================================================
      # 설명    : 직원개인평가(평가대상제외자) 등록
      #    기능    : INSERT
      #    TABLE    :
    ==================================================================
    -->
    <insert id="insertData" parameterClass="hashMap">

        INSERT INTO PRS_EMP_EXC(
		      YEAR
		    , EMPN
		    , KOR_NM
		    , DEPT_CD
		    , CAST_TC
		    , POS_TC
		    , EXCEPT_CD
		    , GRADE
		    , CREATE_DT
		    )
		    (SELECT
		          T1.YEAR
		        , T1.EMPN
		        , T1.KOR_NM
		        , T1.DEPT_CD
		        , T1.CAST_TC
		        , T1.POS_TC
		        , T1.EXCEPT_CD
		        , T2.ETC2 AS GRADE
		        , SYSDATE
		    FROM (
		            SELECT
		                  A.YEAR
		                , A.EMPN
		                , B.KOR_NM
		                , B.DEPT_CD
		                , B.CAST_TC
		                , C.CODE_NM AS CAST_TC_NM
		                , B.POS_TC
		                , E.PCMT_TC
		                , D.CODE_NM AS POS_TC_NM
		                , CASE WHEN E.PCMT_TC = '34' OR E.PCMT_TC = '63' OR E.PCMT_TC = '67' THEN '02'
		                       ELSE '01'
		                  END EXCEPT_CD
		                , A.WORK_MON
		            FROM (
		                    SELECT YEAR, EMPN, SUM(WORK_MON) AS WORK_MON
		                    FROM V_PRS_RE_MON
		                    WHERE POS_TC NOT IN ('43', '54', '64')
		                      AND PCMT_TC NOT IN ('34', '63', '67')
		                    GROUP BY YEAR, EMPN
		                    HAVING SUM(WORK_MON) <![CDATA[ < ]]> 6
		                ) A
		                INNER JOIN BSC_INSA B
		                    ON A.YEAR = B.YEAR
		                    AND A.EMPN = B.EMPN
		                    <isNotEmpty prepend="AND" property="empns">
		                    	B.EMPN = #empns#
		                    </isNotEmpty>
		                LEFT OUTER JOIN (SELECT
		                                      YEAR, EMPN, PCMT_TC
		                                FROM BSC_INSA_PCMT
		                                WHERE YEAR = #findYear#
		                                  AND PCMT_TC IN ('34', '63', '67')
		                                GROUP BY YEAR, EMPN, PCMT_TC) E
		                    ON A.YEAR = E.YEAR
		                    AND A.EMPN = E.EMPN
		                INNER JOIN BSC_CODE C
		                    ON A.YEAR = C.YEAR
		                    AND B.CAST_TC = C.CODE_ID
		                    AND C.CODE_GRP_ID = '170'
		                    AND C.CODE_ID <![CDATA[ >= ]]> 40
		                INNER JOIN BSC_CODE D
		                    ON A.YEAR = D.YEAR
		                    AND B.POS_TC = D.CODE_ID
		                    AND D.CODE_GRP_ID = '171'
		            WHERE A.YEAR = #findYear#
		            ) T1
		            INNER JOIN BSC_CODE T2
		                ON T1.YEAR = T2.YEAR
		                AND T1.EXCEPT_CD = T2.CODE_ID
		                AND T2.CODE_GRP_ID = '194'
		    WHERE T1.YEAR = #findYear#)
    </insert>

    <!--
    ==================================================================
      # 설명    : 직원개인평가(평가대상제외자) 등록
      #    기능    : INSERT
      #    TABLE    :
    ==================================================================
    -->
    <insert id="insertRoopData" parameterClass="hashMap">

	MERGE INTO PRS_EMP_EXC A
		USING (
			SELECT  A.YEAR
				    , A.EMPN
				    , A.KOR_NM
				    , A.DEPT_CD
				    , A.CAST_TC
				    , A.POS_TC
				    , B.CODE_ID AS EXCEPT_CD
				    , B.ETC2 AS GRADE
			FROM BSC_INSA A  
			INNER JOIN BSC_CODE B   ON A.YEAR = B.YEAR AND B.CODE_GRP_ID = '194'
			        AND B.CODE_ID = #exceptCd#
			          WHERE A.YEAR = #findYear# AND A.EMPN = #empn#
		)B
		ON (A.YEAR = B.YEAR AND  A.EMPN = B.EMPN)
	WHEN NOT MATCHED THEN
	INSERT ( YEAR , EMPN , KOR_NM , DEPT_CD , CAST_TC , POS_TC , EXCEPT_CD , GRADE , CREATE_DT )
	VALUES ( B.YEAR , B.EMPN , B.KOR_NM , B.DEPT_CD , B.CAST_TC , B.POS_TC , B.EXCEPT_CD , B.GRADE , SYSDATE)
       
    </insert>

    <!--
	==================================================================
	  # 설명	: 코드 등록 여부 확인
	  #	기능	: SELECT
	  #	TABLE	: BSC_CODE
	==================================================================
	-->
	<select id="getCodeCount" parameterClass="hashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) CNT
          FROM BSC_CODE
         WHERE CODE_GRP_ID  = #codeGrpId#
           AND CODE_ID      = #codeId#
           AND YEAR         = (SELECT CASE YEAR_YN WHEN 'Y' THEN #year# ELSE '9999' END
                                 FROM BSC_CODE_GRP
                                WHERE CODE_GRP_ID = #codeGrpId#)
	</select>

	<!--
	==================================================================
	  # 설명	: 코드ID 채번
	  #	기능	: SELECT
	  #	TABLE	: BSC_CODE
	==================================================================
	-->
	<select id="getCodeId" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT F_PGM_SERI('BSC_CODE',#codeGrpId#, #year#,'','','') SEQ FROM DUAL
	</select>

	<!--
	==================================================================
	  # 설명	: 코드 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_CODE
	==================================================================
	-->
	<insert id="insertData1" parameterClass="hashMap">
		 INSERT INTO BSC_CODE (
		        CODE_GRP_ID
		      , CODE_ID
		      , YEAR
		      , CODE_NM
		      , SORT_ORDER
		      , CONTENT
		      , ETC1
		      , ETC2
		      , CREATE_DT
		      ) VALUES (
                #codeGrpId#
              , #codeId#
              , (SELECT CASE YEAR_YN WHEN 'Y' THEN #year# ELSE '9999' END FROM BSC_CODE_GRP WHERE CODE_GRP_ID = #codeGrpId#)
              , #codeNm#
              , #sortOrder#
              , #content#
              , #etc1#
              , #etc2#
              , SYSDATE
		      )
	</insert>

	<!--
	==================================================================
	  # 설명	: 코드 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_CODE
	==================================================================
	-->
	<update id="updateData1" parameterClass="hashMap">
		UPDATE BSC_CODE
		   SET CODE_NM     = #codeNm#
		     , SORT_ORDER  = #sortOrder#
		     , CONTENT     = #content#
		     , ETC1        = #etc1#
		     , ETC2        = #etc2#
             , CREATE_DT   = SYSDATE
             , DELETE_DT   = NULL
		WHERE CODE_GRP_ID  = '194'
		  AND CODE_ID      = #codeId#
          AND YEAR         = (SELECT CASE YEAR_YN WHEN 'Y' THEN #year# ELSE '9999' END
			                    FROM BSC_CODE_GRP
			                   WHERE CODE_GRP_ID = #codeGrpId#)
	</update>

    <!--
	==================================================================
	  # 설명	: 공통코드 상세 보기
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
            SELECT CODE_GRP_ID
             , CODE_ID
             , YEAR
             , CODE_NM
             , SORT_ORDER
             , CONTENT
             , ETC1
             , ETC2
             , CREATE_DT
             , CASE WHEN DELETE_DT IS NULL THEN 'Y'
            		ELSE 'N'
        			END DELETE_DT
        FROM BSC_CODE
        WHERE 1 = 1
           AND CODE_GRP_ID = '194'
           AND CODE_ID     = #codeId#
           AND YEAR        = (SELECT CASE YEAR_YN WHEN 'Y' THEN #year# ELSE '9999' END
			                    FROM BSC_CODE_GRP
			                   WHERE CODE_GRP_ID = '194')
	</select>

	<!--
	==================================================================
	  # 설명	: 공통코드 상세 보기
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getDetail1" parameterClass="hashMap" resultClass="hashMap">
           SELECT A.CODE_GRP_ID
	            , A.CODE_GRP_NM
	            , A.CODE_DEF_ID
	            , A.YEAR_YN
	            , A.CONTENT
	            , CASE WHEN A.DELETE_DT IS NULL THEN 'Y' ELSE 'N' END DELETE_DT
	            , (SELECT COUNT(B.CODE_ID)
	                 FROM BSC_CODE B
	                WHERE B.CODE_GRP_ID = A.CODE_GRP_ID
	                  AND B.DELETE_DT IS NULL
	                  AND ROWNUM = 1
	               ) SUB_CODE_CNT
			 FROM BSC_CODE_GRP A
		    WHERE 1 = 1
              AND A.CODE_GRP_ID = #codeGrpId#
	</select>

    <!--
    ==================================================================
      # 설명    : 직원개인평가(평가대상제외자) 수정
      #    기능    : UPDATE
      #    TABLE    :
    ==================================================================
    -->
    <update id="updateData" parameterClass="hashMap">
        UPDATE
           SET          WHERE 1 = 1

    </update>


    <!--
    ==================================================================
      # 설명    : 직원개인평가(평가대상제외자) 삭제
      #    기능    : UPDATE
      #    TABLE    :
    ==================================================================
    -->
    <update id="deletePrsList" parameterClass="hashMap">
        DELETE FROM PRS_EMP_EXC
		WHERE YEAR = #findYear#
		<isNotEmpty prepend="AND" property="exceptCd">
			EXCEPT_CD = #exceptCd#
        </isNotEmpty>


    </update>

<!--
	==================================================================
	  # 설명	: 코드 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_CODE
	==================================================================
	-->
	<update id="deleteData" parameterClass="hashMap">
		DELETE FROM BSC_CODE
		       WHERE CODE_GRP_ID = '194'
		   AND CODE_ID     = #codeId#
           AND YEAR        = #findYear#
	</update>


</sqlMap>