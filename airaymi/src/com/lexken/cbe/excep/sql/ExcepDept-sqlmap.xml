<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="cbe.excep.excepDept">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />
	 

	<!--
	==================================================================   
	  # 설명	: 별도평가조직 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR,
               A.EVAL_DEGREE_ID,
               A.SC_DEPT_ID,
               B.SC_DEPT_NM,
               C.EVAL_METHOD_NM,
              (SELECT USER_NM FROM V_ROLE_USER WHERE USER_ID=A.EVAL_BASE_CHARGE_USER_ID) EVAL_BASE_CHARGE_USER_NM,
              (SELECT USER_NM FROM V_ROLE_USER WHERE USER_ID=A.EVAL_USER_ID) EVAL_USER_NM,
              A.SORT_ORDER,
              A.EVAL_SUBMIT_YN,
              (SELECT COUNT(*) FROM BSC_SPE_EVAL_BASE WHERE YEAR=A.YEAR AND EVAL_DEGREE_ID=A.EVAL_DEGREE_ID AND SC_DEPT_ID=A.SC_DEPT_ID) BASE_CNT
         FROM BSC_SPE_EVAL_DEPT A
         INNER JOIN(
                     SELECT YEAR,
                            SC_DEPT_ID,
                            SUBSTR(SYS_CONNECT_BY_PATH(SC_DEPT_NM,'>'),2, length(SYS_CONNECT_BY_PATH(SC_DEPT_NM,'>')))SC_DEPT_NM                                 
                       FROM ( SELECT * FROM BSC_SC_DEPT WHERE YEAR = #findYear#)         
                      WHERE DELETE_DT IS NULL                                
                      START WITH UP_SC_DEPT_ID IS NULL                        
                      CONNECT BY PRIOR SC_DEPT_ID = UP_SC_DEPT_ID) B ON A.YEAR=B.YEAR AND A.SC_DEPT_ID=B.SC_DEPT_ID
         LEFT OUTER JOIN BSC_ECM_EVAL_GRADE_CONVERT_TAB C ON A.YEAR=C.YEAR AND A.EVAL_METHOD_ID=C.EVAL_METHOD_ID                    
        WHERE A.YEAR=#findYear#
          AND A.EVAL_DEGREE_ID=#findEvalDegreeId#
        ORDER BY A.SORT_ORDER  
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가차수 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getDegreeList" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR,
               EVAL_DEGREE_ID,
               EVAL_DEGREE_NM
          FROM BSC_ECM_EVAL_DEGREE
          WHERE YEAR=#findYear#
    </select>
    
   
    
    <!--
	==================================================================   
	  # 설명	: 평가구분
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getDetailGubun" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR                  
			 , EVAL_DEGREE_ID        
			 , EVAL_DEGREE_NM         
		  FROM BSC_ECM_EVAL_DEGREE 
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가단,평가대상지표POOL별 평가방법 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_GRADE_CONVERT_TAB
	==================================================================
	-->
	<select id="getEvalMethodList" parameterClass="hashMap" resultClass="hashMap">
		SELECT EVAL_METHOD_ID, EVAL_METHOD_NM
		  FROM BSC_ECM_EVAL_GRADE_CONVERT_TAB
		 WHERE 1=1
		   AND YEAR = #year#
		   AND DELETE_DT IS NULL
		 ORDER BY EVAL_METHOD_ID   
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 별도평가조직 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR                  
			 , A.EVAL_DEGREE_ID        
			 , A.SC_DEPT_ID   
			 , B.SC_DEPT_NM             
			 , A.EVAL_BASE_CHARGE_USER_ID
			 , (SELECT USER_NM FROM V_ROLE_USER WHERE USER_ID=A.EVAL_BASE_CHARGE_USER_ID) EVAL_BASE_CHARGE_USER_NM
             , A.EVAL_USER_ID          
			 , (SELECT USER_NM FROM V_ROLE_USER WHERE USER_ID=A.EVAL_USER_ID) EVAL_USER_NM
			 , A.EVAL_METHOD_ID        
			 , A.GRADE_ITEM_ID         
			 , A.EVAL_SUBMIT_YN        
			 , A.SORT_ORDER            
		  FROM BSC_SPE_EVAL_DEPT A 
		  LEFT OUTER JOIN BSC_SC_DEPT B ON A.YEAR=B.YEAR AND A.SC_DEPT_ID=B.SC_DEPT_ID
		 WHERE A.YEAR = #year#
		   AND A.EVAL_DEGREE_ID = #evalDegreeId#
		   AND A.SC_DEPT_ID = #scDeptId#	      
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 별도평가조직 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->	
	<insert id="insertData" parameterClass="hashMap">
		INSERT INTO BSC_SPE_EVAL_DEPT ( 
			   YEAR
			 , EVAL_DEGREE_ID
			 , SC_DEPT_ID
			 , EVAL_BASE_CHARGE_USER_ID
			 , EVAL_USER_ID
			 , EVAL_METHOD_ID
			 , EVAL_SUBMIT_YN
			 , CREATE_DT
			 , SORT_ORDER
			 ) VALUES ( 
			   #year#
			 , #evalDegreeId#
			 , #scDeptId#
			 , #evalBaseChargeUserId#
			 , #evalUserId#
			 , #evalMethodId#
			 , 'N'
			 , SYSDATE
			 , #sortOrder#
			 )
	</insert>	
	
	<!--
	==================================================================   
	  # 설명	: 별도평가조직 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->	
	<update id="updateData" parameterClass="hashMap">
		UPDATE BSC_SPE_EVAL_DEPT 
		   SET EVAL_BASE_CHARGE_USER_ID = #evalBaseChargeUserId# 
			 , EVAL_USER_ID           = #evalUserId# 
			 , EVAL_METHOD_ID         = #evalMethodId# 
			 , MODIFY_DT              = SYSDATE 
			 , SORT_ORDER             = #sortOrder# 
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND SC_DEPT_ID = #scDeptId#		
	</update>	
	

	<!--
	==================================================================   
	  # 설명	: 별도평가조직 삭제
	  #	기능	: UPDATE
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->	
	<update id="deleteData" parameterClass="hashMap">
		DELETE FROM BSC_SPE_EVAL_DEPT 
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND SC_DEPT_ID = #scDeptId#
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 권한 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->	
	<update id="deleteAdminData" parameterClass="hashMap">
		DELETE FROM BSC_ADMIN
         WHERE ADMIN_GUBUN IN('50','51')
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 평가자 매핑 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->	
	<insert id="insertAdminData" parameterClass="hashMap">
		INSERT INTO BSC_ADMIN (ADMIN_GUBUN, USER_ID)
        SELECT DISTINCT '51', EVAL_USER_ID
          FROM BSC_SPE_EVAL_DEPT
	</insert>
	
	<!--
	==================================================================   
	  # 설명	: 평가근거 매핑 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->	
	<insert id="insertAdminBaseData" parameterClass="hashMap">
		INSERT INTO BSC_ADMIN (ADMIN_GUBUN, USER_ID)
        SELECT DISTINCT '50', EVAL_BASE_CHARGE_USER_ID
          FROM BSC_SPE_EVAL_DEPT
	</insert>
	
</sqlMap>


