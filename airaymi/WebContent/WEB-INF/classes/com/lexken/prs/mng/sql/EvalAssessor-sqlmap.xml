<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="prs.mng.evalAssessor">

    <!--
    ==================================================================   
      # 설명    : typeAlias 선언
      #    기능    : SETTING
      #    TABLE    : 
    ==================================================================
    -->
    <typeAlias alias="hashMap"             type="java.util.HashMap" />
     

    <!--
    ==================================================================   
      # 설명    : 개인별 평가자 선정 목록 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getList" parameterClass="hashMap" resultClass="hashMap">
   				SELECT  YEAR, EVAL_DEGREE_ID, FROM_DT, TO_DT, EVAL_MEMB_EMPN, EVAL_MEMB_EMPN_SEQ, KOR_NM, DEPT_CD, DEPT_FULL_NM
	                  , EVAL_GRP_ID, EVAL_GRP_NM, CAST_TC, POS_TC
	                  , CAST_TC_NM , POS_TC_NM , EVAL_TYPE, EVAL_DEGREE_NM
	               , MAX(ASSESSOR1) ASSESSOR1, MAX(ASSESSOR1_NM) ASSESSOR1_NM
	               , MAX(ASSESSOR2) ASSESSOR2, MAX(ASSESSOR2_NM) ASSESSOR2_NM
	               , MAX(ASSESSOR3) ASSESSOR3, MAX(ASSESSOR3_NM) ASSESSOR3_NM
	               , MAX(ASSESSOR4) ASSESSOR4, MAX(ASSESSOR4_NM) ASSESSOR4_NM
	               , MAX(ASSESSOR5) ASSESSOR5, MAX(ASSESSOR5_NM) ASSESSOR5_NM
	               , MAX(ASSESSOR6) ASSESSOR6, MAX(ASSESSOR6_NM) ASSESSOR6_NM
                   , ASSESSOR_GRP_ID
                   , ASSESSOR_GRP_NM
	        FROM (   SELECT A.YEAR, D.EVAL_DEGREE_ID, A.FROM_DT, A.TO_DT, E.CODE_NM AS EVAL_DEGREE_NM, A.EVAL_MEMB_EMPN , A.EVAL_MEMB_EMPN_SEQ,  A.KOR_NM , A.DEPT_CD
                         , F_DEPT_FULL_NM(A.YEAR,A.DEPT_CD,'BSC_INSA_DEPT') DEPT_FULL_NM
                         , A.EVAL_GRP_ID   
                         , B.EVAL_GRP_NM 
                         , A.CAST_TC
                         , A.POS_TC
                         , F_CODE_NM('170', A.CAST_TC , A.YEAR) CAST_TC_NM 
                         , F_CODE_NM('171', A.POS_TC , A.YEAR) POS_TC_NM 
                         , A.EVAL_TYPE  
                         , CASE WHEN D.SEQ = '1' THEN  C.ASSESSOR_EMPN   END ASSESSOR1
                         , CASE WHEN D.SEQ = '1' THEN  C.KOR_NM          END ASSESSOR1_NM
                         , CASE WHEN D.SEQ = '2' THEN  C.ASSESSOR_EMPN   END ASSESSOR2
                         , CASE WHEN D.SEQ = '2' THEN  C.KOR_NM          END ASSESSOR2_NM
                         , CASE WHEN D.SEQ = '3' THEN  C.ASSESSOR_EMPN   END ASSESSOR3
                         , CASE WHEN D.SEQ = '3' THEN  C.KOR_NM          END ASSESSOR3_NM
                         , CASE WHEN D.SEQ = '4' THEN  C.ASSESSOR_EMPN   END ASSESSOR4
                         , CASE WHEN D.SEQ = '4' THEN  C.KOR_NM          END ASSESSOR4_NM
                         , CASE WHEN D.SEQ = '5' THEN  C.ASSESSOR_EMPN   END ASSESSOR5
                         , CASE WHEN D.SEQ = '5' THEN  C.KOR_NM          END ASSESSOR5_NM
                         , CASE WHEN D.SEQ = '6' THEN  C.ASSESSOR_EMPN   END ASSESSOR6
                         , CASE WHEN D.SEQ = '6' THEN  C.KOR_NM          END ASSESSOR6_NM
                         , A.PRS_YN
                         , A.ASSESSOR_GRP_ID
                         , A.ASSESSOR_GRP_NM
                 FROM V_PRS_MNG_MEMBER A
                 LEFT OUTER JOIN PRS_EVAL_GRP B ON A.YEAR = B.YEAR AND  A.EVAL_GRP_ID = B.EVAL_GRP_ID             
                 LEFT OUTER JOIN (
                    SELECT D.YEAR, D.EVAL_DEGREE_ID, D.EVAL_MEMB_EMPN, D.EVAL_MEMB_EMPN_SEQ, D.ASSESSOR_EMPN
                    , ROW_NUMBER() OVER(PARTITION BY D.YEAR, D.EVAL_MEMB_EMPN, D.EVAL_MEMB_EMPN_SEQ ORDER BY D.SEQ, D.ASSESSOR_EMPN) SEQ
                    FROM PRS_MNG_EVAL_ASSESSOR_MAPPING D
                    WHERE D.EVAL_DEGREE_ID = '20'
                 ) D ON A.YEAR =D.YEAR AND A.EVAL_MEMB_EMPN = D.EVAL_MEMB_EMPN AND A.EVAL_MEMB_EMPN_SEQ = D.EVAL_MEMB_EMPN_SEQ
                 LEFT OUTER JOIN PRS_MNG_EVAL_ASSESSOR C ON D.YEAR =C.YEAR AND D.ASSESSOR_EMPN = C.ASSESSOR_EMPN
                 LEFT OUTER JOIN BSC_CODE E
		            ON A.YEAR = E.YEAR
		            AND E.CODE_ID = D.EVAL_DEGREE_ID
		            AND E.CODE_GRP_ID = '228'
	         )
         WHERE 1 = 1
         AND YEAR = #findYear#
         AND PRS_YN = 'Y'
          <isNotEqual prepend="AND" property="findDeptCd" compareValue="0000">
              DEPT_CD IN (SELECT DEPT_CD
						   FROM BSC_INSA_DEPT
						  WHERE YEAR = #findYear#
					 START WITH DEPT_CD = #findDeptCd#
			   CONNECT BY PRIOR YEAR = YEAR
							AND PRIOR DEPT_CD = UP_DEPT_CD)
          </isNotEqual>
          <isNotEmpty prepend="AND" property="findCastTc">
	            CAST_TC = #findCastTc#
		  </isNotEmpty>
          <isNotEmpty prepend="AND" property="findMemKorNm">
	            UPPER(KOR_NM) LIKE  '%' || TRIM(UPPER(#findMemKorNm#)) ||'%'
		  </isNotEmpty>
          <isNotEmpty prepend="AND" property="findEvalGrpId">
	            EVAL_GRP_ID = #findEvalGrpId#
		  </isNotEmpty>
         GROUP BY YEAR, EVAL_DEGREE_ID, FROM_DT, TO_DT, EVAL_DEGREE_NM, EVAL_GRP_ID, EVAL_GRP_NM, EVAL_TYPE , EVAL_MEMB_EMPN,  KOR_NM, DEPT_CD,DEPT_FULL_NM, CAST_TC, POS_TC, CAST_TC_NM ,POS_TC_NM, EVAL_MEMB_EMPN_SEQ,ASSESSOR_GRP_ID,ASSESSOR_GRP_NM
         UNION ALL 
         SELECT  YEAR, EVAL_DEGREE_ID, FROM_DT, TO_DT, EVAL_MEMB_EMPN, EVAL_MEMB_EMPN_SEQ, KOR_NM, DEPT_CD, DEPT_FULL_NM
	                  , EVAL_GRP_ID, EVAL_GRP_NM, CAST_TC, POS_TC
	                  , CAST_TC_NM , POS_TC_NM , EVAL_TYPE, EVAL_DEGREE_NM
	               , MAX(ASSESSOR1) ASSESSOR1, MAX(ASSESSOR1_NM) ASSESSOR1_NM
	               , MAX(ASSESSOR2) ASSESSOR2, MAX(ASSESSOR2_NM) ASSESSOR2_NM
	               , MAX(ASSESSOR3) ASSESSOR3, MAX(ASSESSOR3_NM) ASSESSOR3_NM
	               , MAX(ASSESSOR4) ASSESSOR4, MAX(ASSESSOR4_NM) ASSESSOR4_NM
	               , MAX(ASSESSOR5) ASSESSOR5, MAX(ASSESSOR5_NM) ASSESSOR5_NM
	               , MAX(ASSESSOR6) ASSESSOR6, MAX(ASSESSOR6_NM) ASSESSOR6_NM
                   , ASSESSOR_GRP_ID
                   , ASSESSOR_GRP_NM
	        FROM (   SELECT A.YEAR, D.EVAL_DEGREE_ID, A.FROM_DT, A.TO_DT, E.CODE_NM AS EVAL_DEGREE_NM, A.EVAL_MEMB_EMPN , A.EVAL_MEMB_EMPN_SEQ,  A.KOR_NM , A.DEPT_CD
                         , F_DEPT_FULL_NM(A.YEAR,A.DEPT_CD,'BSC_INSA_DEPT') DEPT_FULL_NM
                         , A.EVAL_GRP_ID   
                         , B.EVAL_GRP_NM 
                         , A.CAST_TC
                         , A.POS_TC
                         , F_CODE_NM('170', A.CAST_TC , A.YEAR) CAST_TC_NM 
                         , F_CODE_NM('171', A.POS_TC , A.YEAR) POS_TC_NM 
                         , A.EVAL_TYPE  
                         , CASE WHEN D.SEQ = '1' THEN  C.ASSESSOR_EMPN   END ASSESSOR1
                         , CASE WHEN D.SEQ = '1' THEN  C.KOR_NM          END ASSESSOR1_NM
                         , CASE WHEN D.SEQ = '2' THEN  C.ASSESSOR_EMPN   END ASSESSOR2
                         , CASE WHEN D.SEQ = '2' THEN  C.KOR_NM          END ASSESSOR2_NM
                         , CASE WHEN D.SEQ = '3' THEN  C.ASSESSOR_EMPN   END ASSESSOR3
                         , CASE WHEN D.SEQ = '3' THEN  C.KOR_NM          END ASSESSOR3_NM
                         , CASE WHEN D.SEQ = '4' THEN  C.ASSESSOR_EMPN   END ASSESSOR4
                         , CASE WHEN D.SEQ = '4' THEN  C.KOR_NM          END ASSESSOR4_NM
                         , CASE WHEN D.SEQ = '5' THEN  C.ASSESSOR_EMPN   END ASSESSOR5
                         , CASE WHEN D.SEQ = '5' THEN  C.KOR_NM          END ASSESSOR5_NM
                         , CASE WHEN D.SEQ = '6' THEN  C.ASSESSOR_EMPN   END ASSESSOR6
                         , CASE WHEN D.SEQ = '6' THEN  C.KOR_NM          END ASSESSOR6_NM
                         , A.PRS_YN
                         , A.ASSESSOR_GRP_ID
                         , A.ASSESSOR_GRP_NM
                 FROM V_PRS_MNG_MEMBER A
                 LEFT OUTER JOIN PRS_EVAL_GRP B ON A.YEAR = B.YEAR AND  A.EVAL_GRP_ID = B.EVAL_GRP_ID             
                 LEFT OUTER JOIN (
                    SELECT D.YEAR, D.EVAL_DEGREE_ID, D.EVAL_MEMB_EMPN, D.EVAL_MEMB_EMPN_SEQ, D.ASSESSOR_EMPN
                    , ROW_NUMBER() OVER(PARTITION BY D.YEAR, D.EVAL_MEMB_EMPN, D.EVAL_MEMB_EMPN_SEQ ORDER BY D.SEQ, D.ASSESSOR_EMPN) SEQ
                    FROM PRS_MNG_EVAL_ASSESSOR_MAPPING D
                    WHERE D.EVAL_DEGREE_ID = '10'
                 ) D ON A.YEAR =D.YEAR AND A.EVAL_MEMB_EMPN = D.EVAL_MEMB_EMPN AND A.EVAL_MEMB_EMPN_SEQ = D.EVAL_MEMB_EMPN_SEQ
                 LEFT OUTER JOIN PRS_MNG_EVAL_ASSESSOR C ON D.YEAR =C.YEAR AND D.ASSESSOR_EMPN = C.ASSESSOR_EMPN
                 LEFT OUTER JOIN BSC_CODE E
		            ON A.YEAR = E.YEAR
		            AND E.CODE_ID = D.EVAL_DEGREE_ID
		            AND E.CODE_GRP_ID = '228'
	         )
         WHERE 1 = 1
         AND YEAR = #findYear#
         AND PRS_YN = 'Y'
          <isNotEqual prepend="AND" property="findDeptCd" compareValue="0000">
              DEPT_CD IN (SELECT DEPT_CD
						   FROM BSC_INSA_DEPT
						  WHERE YEAR = #findYear#
					 START WITH DEPT_CD = #findDeptCd#
			   CONNECT BY PRIOR YEAR = YEAR
							AND PRIOR DEPT_CD = UP_DEPT_CD)
          </isNotEqual>
          <isNotEmpty prepend="AND" property="findCastTc">
	            CAST_TC = #findCastTc#
		  </isNotEmpty>
          <isNotEmpty prepend="AND" property="findMemKorNm">
	            UPPER(KOR_NM) LIKE  '%' || TRIM(UPPER(#findMemKorNm#)) ||'%'
		  </isNotEmpty>
          <isNotEmpty prepend="AND" property="findEvalGrpId">
	            EVAL_GRP_ID = #findEvalGrpId#
		  </isNotEmpty>
         GROUP BY YEAR, EVAL_DEGREE_ID, FROM_DT, TO_DT, EVAL_DEGREE_NM, EVAL_GRP_ID, EVAL_GRP_NM, EVAL_TYPE , EVAL_MEMB_EMPN,  KOR_NM, DEPT_CD,DEPT_FULL_NM, CAST_TC, POS_TC, CAST_TC_NM ,POS_TC_NM, EVAL_MEMB_EMPN_SEQ, ASSESSOR_GRP_ID, ASSESSOR_GRP_NM
         ORDER BY KOR_NM,
		        EVAL_MEMB_EMPN_SEQ,
		        EVAL_DEGREE_ID,
		        DEPT_CD,
		        EVAL_GRP_ID,
		        CAST_TC 
    </select>
    
    <!--
    ==================================================================   
      # 설명    : 개인별 평가자 리스트조회
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getEvalAssessor" parameterClass="hashMap" resultClass="hashMap">
   	 SELECT   A.EMPN         
             ,A.KOR_NM      
             ,A.DEPT_CD
             ,A.CAST_TC
             ,A.POS_TC
             ,F_DEPT_FULL_NM(A.YEAR,A.DEPT_CD,'BSC_INSA_DEPT') DEPT_FULL_NM
             ,F_CODE_NM('170',A.CAST_TC , A.YEAR) CAST_NM 
             ,F_CODE_NM('171',A.POS_TC , A.YEAR) POS_NM  
             ,(SELECT COUNT(*) FROM PRS_MNG_EVAL_GRADE 
              WHERE YEAR=A.YEAR AND A.EMPN =ASSESSOR_EMPN ) GRADE_CNT 
             FROM BSC_INSA A
             WHERE A.YEAR= #findYear#
             <isNotEqual prepend="AND" property="deptId" compareValue="0000">
              DEPT_CD IN (SELECT DEPT_CD
						   FROM BSC_INSA_DEPT
						  WHERE YEAR = #findYear#
					 START WITH DEPT_CD = #deptId#
			   CONNECT BY PRIOR YEAR = YEAR
							AND PRIOR DEPT_CD = UP_DEPT_CD)
          </isNotEqual>
           <isNotEmpty prepend="AND" property="findEmpn">
	            A.EMPN =#findEmpn#
		  </isNotEmpty>
           <isNotEmpty prepend="AND" property="findKorNm">
	            UPPER(A.KOR_NM) LIKE  '%' || TRIM(UPPER(#findKorNm#)) ||'%'
		  </isNotEmpty>
               AND A.CAST_TC <![CDATA[ <= ]]>	20
        ORDER BY   A.CAST_TC , A.POS_TC  ,A.EMPN   
    </select>
    
    <!--
    ==================================================================   
      # 설명    : 개인별 평가자 선정 상세 보기 (평가군 리스트 조회)
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getEvalGrpList" parameterClass="hashMap" resultClass="hashMap">
        SELECT  EVAL_GRP_ID,  EVAL_GRP_NM FROM  PRS_EVAL_GRP
         WHERE  YEAR = #findYear#  AND EVAL_TYPE IN ('01', '02', '03', '04')    
    </select>
    
    <!--
    ==================================================================   
      # 설명    : 개인별 1차 평가자 선정 상세 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getUseList1" parameterClass="hashMap" resultClass="hashMap">
        SELECT   A.YEAR
               , A.ASSESSOR_EMPN
               , A.KOR_NM
               , F_CODE_NM('170',A.CAST_TC , A.YEAR) CAST_TC_NM 
               , F_CODE_NM('171',A.POS_TC , A.YEAR) POS_TC_NM  
               , F_DEPT_FULL_NM(A.YEAR,A.DEPT_CD,'BSC_INSA_DEPT') DEPT_FULL_NM
               , B.SEQ
               , (SELECT COUNT(*) FROM PRS_MNG_EVAL_GRADE 
                 WHERE YEAR=A.YEAR AND A.ASSESSOR_EMPN =ASSESSOR_EMPN AND EVAL_MEMB_EMPN = #evalMembEmpn# AND EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq# ) GRADE_CNT 
        FROM PRS_MNG_EVAL_ASSESSOR A
        LEFT OUTER JOIN PRS_MNG_EVAL_ASSESSOR_MAPPING B 
        	ON A.YEAR = B.YEAR 
        	AND A.ASSESSOR_EMPN =B.ASSESSOR_EMPN
        	AND B.EVAL_DEGREE_ID = '10'
        WHERE A. YEAR = #findYear#
          AND B.EVAL_MEMB_EMPN = #evalMembEmpn#
          AND B.EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#     
        ORDER BY B.SEQ       
    </select>
    
    <!--
    ==================================================================   
      # 설명    : 개인별 2차 평가자 선정 상세 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getUseList" parameterClass="hashMap" resultClass="hashMap">
        SELECT   A.YEAR
               , A.ASSESSOR_EMPN
               , A.KOR_NM
               , F_CODE_NM('170',A.CAST_TC , A.YEAR) CAST_TC_NM 
               , F_CODE_NM('171',A.POS_TC , A.YEAR) POS_TC_NM  
               , F_DEPT_FULL_NM(A.YEAR,A.DEPT_CD,'BSC_INSA_DEPT') DEPT_FULL_NM
               , B.SEQ
               , (SELECT COUNT(*) FROM PRS_MNG_EVAL_GRADE 
                 WHERE YEAR=A.YEAR AND A.ASSESSOR_EMPN =ASSESSOR_EMPN AND EVAL_MEMB_EMPN = #evalMembEmpn# AND EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq# ) GRADE_CNT 
        FROM PRS_MNG_EVAL_ASSESSOR A
        LEFT OUTER JOIN PRS_MNG_EVAL_ASSESSOR_MAPPING B 
        	ON A.YEAR = B.YEAR 
        	AND A.ASSESSOR_EMPN =B.ASSESSOR_EMPN
        	AND B.EVAL_DEGREE_ID = '20'
        WHERE A. YEAR = #findYear#
          AND B.EVAL_MEMB_EMPN = #evalMembEmpn#
          AND B.EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#     
        ORDER BY B.SEQ       
    </select>
    
    <!--
    ==================================================================   
      # 설명    : 점수삭제
      #    기능    : SELECT
      #    TABLE    : remapResults="true"
    ==================================================================
    -->
 	 <update id="deleteGradeData" parameterClass="hashMap" >
		 DELETE FROM PRS_MNG_EVAL_GRADE
	        WHERE YEAR = #findYear#
	          AND EVAL_DEGREE_ID = #evalDegreeIdSecond#
	          AND EVAL_MEMB_EMPN = #evalMemb#
	          AND EVAL_MEMB_EMPN_SEQ = #evalMembSeq#  
	          <isNotEqual property="empnsYn" compareValue="N">
	          AND ASSESSOR_EMPN NOT IN ( 
	            <iterate property="itemArray" conjunction=",">
			     #itemArray[]#
			    </iterate>
	            )
	          </isNotEqual>
		</update>
		
	<!--
    ==================================================================   
      # 설명    : 점수삭제 1차평가
      #    기능    : SELECT
      #    TABLE    : remapResults="true"
    ==================================================================
    -->
 	 <update id="deleteGradeDataFirst" parameterClass="hashMap" >
		 DELETE FROM PRS_MNG_EVAL_GRADE
	        WHERE YEAR = #findYear#
	          AND EVAL_DEGREE_ID = #evalDegreeIdFirst#
	          AND EVAL_MEMB_EMPN = #evalMemb1#
	          AND EVAL_MEMB_EMPN_SEQ = #evalMembSeq1#  
	          <isNotEqual property="empns1Yn" compareValue="N">
	          AND ASSESSOR_EMPN NOT IN ( 
	            <iterate property="itemArray" conjunction=",">
			     #itemArray[]#
			    </iterate>
	            )
	          </isNotEqual>
		</update>
	
	<!--
	==================================================================
	  # 설명	: 개인업적삭제
	  #	기능	: DELETE
	  #	TABLE	: PRS_MNG_EVAL
	==================================================================
	-->
	<update id="deleteMngData" parameterClass="hashMap">
	  DELETE FROM PRS_MNG_EVAL
         WHERE YEAR = #findYear#
           AND EVAL_DEGREE_ID = #evalDegreeIdSecond#
           AND EVAL_MEMB_EMPN = #evalMemb#
           AND EVAL_MEMB_EMPN_SEQ = #evalMembSeq#    
           <isNotEqual property="empns1Yn" compareValue="N">
           AND ASSESSOR_EMPN NOT IN ( 
            <iterate property="itemArray" conjunction=",">
		     #itemArray[]#
		    </iterate>
            )
            </isNotEqual>
	</update>
	
	<!--
	==================================================================
	  # 설명	: 개인업적삭제 1차평가
	  #	기능	: DELETE
	  #	TABLE	: PRS_MNG_EVAL
	==================================================================
	-->
	<update id="deleteMngDataFirst" parameterClass="hashMap">
	  DELETE FROM PRS_MNG_EVAL
         WHERE YEAR = #findYear#
           AND EVAL_DEGREE_ID = #evalDegreeIdFirst#
           AND EVAL_MEMB_EMPN = #evalMemb1#
           AND EVAL_MEMB_EMPN_SEQ = #evalMembSeq1#    
           <isNotEqual property="empns1Yn" compareValue="N">
           AND ASSESSOR_EMPN NOT IN ( 
            <iterate property="itemArray" conjunction=",">
		     #itemArray[]#
		    </iterate>
            )
           </isNotEqual>
	</update>
	
	<!--
	==================================================================
	  # 설명	:대상자별 매핑삭제
	  #	기능	: DELETE
	  #	TABLE	: PRS_MNG_EVAL_ASSESSOR
	==================================================================
	-->
	<update id="deleteAssessorMappingData" parameterClass="hashMap">
	DELETE FROM PRS_MNG_EVAL_ASSESSOR_MAPPING
          WHERE YEAR = #findYear#
            AND EVAL_DEGREE_ID = #evalDegreeIdSecond#
            AND EVAL_MEMB_EMPN = #evalMemb#
            AND EVAL_MEMB_EMPN_SEQ = #evalMembSeq#    
            <isNotEqual property="empnsYn" compareValue="N">
            AND ASSESSOR_EMPN NOT IN ( 
            <iterate property="itemArray" conjunction=",">
		     #itemArray[]#
		    </iterate>
            )
            </isNotEqual>
	</update>
	
	<!--
	==================================================================
	  # 설명	:대상자별 매핑삭제 1차평가
	  #	기능	: DELETE
	  #	TABLE	: PRS_MNG_EVAL_ASSESSOR
	==================================================================
	-->
	<update id="deleteAssessorMappingDataFirst" parameterClass="hashMap">
	DELETE FROM PRS_MNG_EVAL_ASSESSOR_MAPPING
          WHERE YEAR = #findYear#
            AND EVAL_DEGREE_ID = #evalDegreeIdFirst#
            AND EVAL_MEMB_EMPN = #evalMemb1#
            AND EVAL_MEMB_EMPN_SEQ = #evalMembSeq1#  
            <isNotEqual property="empns1Yn" compareValue="N">  
            AND ASSESSOR_EMPN NOT IN ( 
            <iterate property="itemArray" conjunction=",">
		     #itemArray[]#
		    </iterate>
            )
            </isNotEqual>
	</update>
	
	<!--
    ==================================================================   
      # 설명    : 전체 평가자 조회
      #    기능    : SELECT
      #    TABLE    : PRS_MNG_EVAL_ASSESSOR
    ==================================================================
    -->
  	<select id="getEvalAsserFirst" parameterClass="hashMap" resultClass="java.lang.Integer">
	  SELECT COUNT(A.ASSESSOR_EMPN)
        FROM PRS_MNG_EVAL_ASSESSOR A
        	INNER JOIN PRS_MNG_EVAL_ASSESSOR_MAPPING B 
        		ON A.YEAR = B.YEAR 
        		AND A.ASSESSOR_EMPN = B.ASSESSOR_EMPN
        		AND EVAL_DEGREE_ID = #evalDegreeIdFirst#
        WHERE A.YEAR          = #findYear#
          AND A.ASSESSOR_EMPN = #empn1#
	</select>
	
	<!--
    ==================================================================   
      # 설명    : 전체 평가자 조회
      #    기능    : SELECT
      #    TABLE    : PRS_MNG_EVAL_ASSESSOR
    ==================================================================
    -->
  	<select id="getEvalAsser" parameterClass="hashMap" resultClass="java.lang.Integer">
	  SELECT COUNT(A.ASSESSOR_EMPN)
        FROM PRS_MNG_EVAL_ASSESSOR A
        	INNER JOIN PRS_MNG_EVAL_ASSESSOR_MAPPING B 
        		ON A.YEAR = B.YEAR 
        		AND A.ASSESSOR_EMPN = B.ASSESSOR_EMPN
        		AND EVAL_DEGREE_ID = #evalDegreeIdSecond#
        WHERE A.YEAR          = #findYear#
          AND A.ASSESSOR_EMPN = #empn#
	</select>
	
	<!--
    ==================================================================   
      # 설명    : 점수가 있는 평가자 조회
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
  	<select id="getEvalMappingAsser" parameterClass="hashMap" resultClass="java.lang.Integer">
	   SELECT COUNT(ASSESSOR_EMPN)
        FROM PRS_MNG_EVAL_ASSESSOR_MAPPING
          WHERE YEAR 			   = #findYear#
            AND EVAL_DEGREE_ID 	   = '20'
            AND ASSESSOR_EMPN      = #empn#
            AND EVAL_MEMB_EMPN     = #evalMemb#
        	AND EVAL_MEMB_EMPN_SEQ = #evalMembSeq#
	</select>
	
	<!--
    ==================================================================   
      # 설명    : 점수가 있는 평가자 조회
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
  	<select id="getEvalMappingAsserFirst" parameterClass="hashMap" resultClass="java.lang.Integer">
	   SELECT COUNT(ASSESSOR_EMPN)
        FROM PRS_MNG_EVAL_ASSESSOR_MAPPING
          WHERE YEAR 			   = #findYear#
            AND EVAL_DEGREE_ID 	   = '10'
            AND ASSESSOR_EMPN      = #empn1#
            AND EVAL_MEMB_EMPN     = #evalMemb1#
        	AND EVAL_MEMB_EMPN_SEQ = #evalMembSeq1#
	</select>
	
	<!--
	==================================================================
	  # 설명	:대상자별 평가자 삭제
	  #	기능	: DELETE
	  #	TABLE	: PRS_MNG_EVAL_ASSESSOR
	==================================================================
	-->
	<update id="deleteAssessorData" parameterClass="hashMap">
	DELETE FROM PRS_MNG_EVAL_ASSESSOR
            WHERE YEAR 			= #findYear#
              AND ASSESSOR_EMPN = #empn#
	</update>
	
	<!--
	==================================================================
	  # 설명	:대상자별 평가자 삭제
	  #	기능	: DELETE
	  #	TABLE	: PRS_MNG_EVAL_ASSESSOR
	==================================================================
	-->
	<update id="deleteAssessorDataFirst" parameterClass="hashMap">
	DELETE FROM PRS_MNG_EVAL_ASSESSOR
            WHERE YEAR 			= #findYear#
              AND ASSESSOR_EMPN = #empn1#
	</update>
    
    <!--
	==================================================================
	  # 설명	: 개인평가 평가자 추가
	  #	기능	: UPDATE
	  #	TABLE	:
	==================================================================
	-->
	<insert id="updateEvalAssessor" parameterClass="hashMap">
		MERGE INTO PRS_MNG_EVAL_ASSESSOR A
		USING ( SELECT A.YEAR
		             , A.EMPN    
		             , A.KOR_NM
		             , A.DEPT_CD
		             , F_DEPT_FULL_NM(A.YEAR,A.DEPT_CD,'BSC_INSA_DEPT') DEPT_FULL_NM
		             , A.CAST_TC
		             , F_CODE_NM('170',A.CAST_TC , A.YEAR) CAST_NM 
		             , A.POS_TC
		             , F_CODE_NM('171',A.POS_TC , A.YEAR) POS_NM
        FROM BSC_INSA A
           WHERE A.YEAR = #findYear#
              AND A.EMPN = #empn#
              ) C ON (A.YEAR = C.YEAR AND A.ASSESSOR_EMPN = C.EMPN )
     WHEN NOT MATCHED THEN 
              INSERT ( YEAR , ASSESSOR_EMPN , KOR_NM , DEPT_CD , DEPT_NM , CAST_TC , CAST_NM , POS_TC , POS_NM , CREATE_ID , CREATE_DT)
       		  VALUES ( C.YEAR , C.EMPN , C.KOR_NM , C.DEPT_CD , C.DEPT_FULL_NM , C.CAST_TC , C.CAST_NM , C.POS_TC , C.POS_NM , #userId# , SYSDATE )
       
	</insert>
	
	<!--
	==================================================================
	  # 설명	: 개인평가 평가자 추가 1차평가
	  #	기능	: UPDATE
	  #	TABLE	:
	==================================================================
	-->
	<insert id="updateEvalAssessorFirst" parameterClass="hashMap">
		MERGE INTO PRS_MNG_EVAL_ASSESSOR A
		USING ( SELECT A.YEAR
		             , A.EMPN    
		             , A.KOR_NM
		             , A.DEPT_CD
		             , F_DEPT_FULL_NM(A.YEAR,A.DEPT_CD,'BSC_INSA_DEPT') DEPT_FULL_NM
		             , A.CAST_TC
		             , F_CODE_NM('170',A.CAST_TC , A.YEAR) CAST_NM 
		             , A.POS_TC
		             , F_CODE_NM('171',A.POS_TC , A.YEAR) POS_NM
        FROM BSC_INSA A
           WHERE A.YEAR = #findYear#
              AND A.EMPN = #empn1#
              ) C ON (A.YEAR = C.YEAR AND A.ASSESSOR_EMPN = C.EMPN )
     WHEN NOT MATCHED THEN 
              INSERT ( YEAR , ASSESSOR_EMPN , KOR_NM , DEPT_CD , DEPT_NM , CAST_TC , CAST_NM , POS_TC , POS_NM , CREATE_ID , CREATE_DT)
       		  VALUES ( C.YEAR , C.EMPN , C.KOR_NM , C.DEPT_CD , C.DEPT_FULL_NM , C.CAST_TC , C.CAST_NM , C.POS_TC , C.POS_NM , #userId# , SYSDATE )
       
	</insert>
	
    <!--
	==================================================================
	  # 설명	: 대상자별 평가자 추가
	  #	기능	: UPDATE
	  #	TABLE	: 
	==================================================================
	-->
	<insert id="updateEvalMapping" parameterClass="hashMap">
		<selectKey resultClass="java.lang.String" keyProperty="SEQ" >
            SELECT NVL(MAX(SEQ),0) + 1 
            FROM PRS_MNG_EVAL_ASSESSOR_MAPPING
            WHERE YEAR = #findYear#
            AND EVAL_DEGREE_ID = #evalDegreeIdSecond#
            AND EVAL_MEMB_EMPN = #evalMemb#
            AND EVAL_MEMB_EMPN_SEQ =  #evalMembSeq#
        </selectKey>
        INSERT INTO PRS_MNG_EVAL_ASSESSOR_MAPPING (      
        			  YEAR
        			, EVAL_DEGREE_ID
					, EVAL_MEMB_EMPN
					, EVAL_MEMB_EMPN_SEQ
					, ASSESSOR_EMPN
					, SEQ
					, EVAL_SUBMIT_YN
					, CREATE_ID
					, CREATE_DT
        ) VALUES (
        			   #findYear# 
        			 , #evalDegreeIdSecond#
	        		 , #evalMemb# 
	        		 , #evalMembSeq#
	        		 , #empn#
	        		 , #SEQ#
	        		 , 'N'
	        		 , #userId#
	        		 , SYSDATE
	            )
	</insert>
	
	<!--
	==================================================================
	  # 설명	: 대상자별 평가자 추가
	  #	기능	: UPDATE
	  #	TABLE	: 
	==================================================================
	-->
	<insert id="updateEvalMappingFirst" parameterClass="hashMap">
		<selectKey resultClass="java.lang.String" keyProperty="SEQ" >
            SELECT NVL(MAX(SEQ),0) + 1 
            FROM PRS_MNG_EVAL_ASSESSOR_MAPPING
            WHERE YEAR = #findYear#
            AND EVAL_DEGREE_ID = #evalDegreeIdFirst#
            AND EVAL_MEMB_EMPN = #evalMemb1#
            AND EVAL_MEMB_EMPN_SEQ =  #evalMembSeq1#
        </selectKey>
        INSERT INTO PRS_MNG_EVAL_ASSESSOR_MAPPING (      
        			  YEAR
        			, EVAL_DEGREE_ID
					, EVAL_MEMB_EMPN
					, EVAL_MEMB_EMPN_SEQ
					, ASSESSOR_EMPN
					, SEQ
					, EVAL_SUBMIT_YN
					, CREATE_ID
					, CREATE_DT
        ) VALUES (
        			   #findYear# 
        			 , #evalDegreeIdFirst#
	        		 , #evalMemb1# 
	        		 , #evalMembSeq1#
	        		 , #empn1#
	        		 , #SEQ#
	        		 , 'N'
	        		 , #userId1#
	        		 , SYSDATE
	            )
	</insert>
	
	<!--
	==================================================================
	  # 설명	: 권한 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->
	<update id="deleteAdminData" parameterClass="hashMap">
		DELETE FROM BSC_ADMIN
		WHERE ADMIN_GUBUN='80' 
	</update>
	
	<!--
	==================================================================
	  # 설명	: 권한 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->
	<insert id="insertAdminData" parameterClass="hashMap">
		INSERT INTO BSC_ADMIN (ADMIN_GUBUN, USER_ID, DEPT_ID)
          SELECT DISTINCT '80',
            ASSESSOR_EMPN,
            DEPT_CD          
        FROM PRS_MNG_EVAL_ASSESSOR A 
        WHERE YEAR= #findYear#
	</insert>
	
	<!--
    ==================================================================
      # 설명  : 파라미터 맵
      # 기능  : SETTING
      # TABLE   :
    ==================================================================
    -->
    <parameterMap id="paramMap" class="java.util.HashMap">
        <parameter property="findYear"      jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
        <parameter property="loginUserId"   jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
        <parameter property="evalDegreeId"  jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
    </parameterMap>
    
    <!--
    ==================================================================
      # 설명  : 2차평가자 일괄적용 실행
      # 기능  : PROCEDURES
      # TABLE   :
    ==================================================================
    -->
    <procedure id="insertEvalAssessor" parameterMap="paramMap">
        {CALL PG_PRS_MNG.SP_INSERT_EVAL_ASSESSOR(?,?,?)}
    </procedure>
    
    <!--
    ==================================================================
      # 설명  : 1차평가자 일괄적용 실행
      # 기능  : PROCEDURES
      # TABLE   :
    ==================================================================
    -->
    <procedure id="insertEvalAssessorFirst" parameterMap="paramMap">
        {CALL PG_PRS_MNG.SP_INSERT_EVAL_ASSESSOR_FIRST(?,?,?)}
    </procedure>
    
</sqlMap>


