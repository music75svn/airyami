<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="bsc.mon.orgDetail">

	<!--
	==================================================================
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />


	<!--
	==================================================================
	  # 설명	: 조직상세 목록 보기
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		 SELECT M.YEAR,
	            M.PERSPECTIVE_ID,
	            M.PERSPECTIVE_NM,
	            M.DIRECTION_ID,
	            M.DIRECTION_NM,
	            M.STRATEGY_ID,
	            M.STRATEGY_NM,
	            M.CSF_ID,
	            M.CSF_NM,
	            M.METRIC_ID,
	            M.METRIC_NM,
	            CASE WHEN M.UP_METRIC_ID IS NOT NULL THEN '  -'||M.METRIC_NM
                     ELSE M.METRIC_NM
                	 END AS METRIC_F_NM,
	            M.UP_METRIC_ID,
	            M.EVAL_CYCLE,
	            M.EVAL_CYCLE_NM,
	            M.WEIGHT,
	            M.UNIT,
	            M.UNIT_NM,
	            M.TARGET,
	            M.ACTUAL,
	            M.SCORE,
	            M.FINAL_SCORE,
	            M.WEIGHT_SCORE,
	            M.EXCSCORE,
	            M.STATUS,
	            M.STATUS_NM,
	            M.STATUS_COLOR,
	            M.PERS_SORT_ORDER,
	            M.STRA_SORT_ORDER,
<!--
	            M.DIRECT_SORT_ORDER,
-->
	            M.METRIC_SORT_ORDER,
	            M.ACT_YN
		   FROM (SELECT M.YEAR,
		                M.PERSPECTIVE_ID,
		                M.PERSPECTIVE_NM,
		                M.DIRECTION_ID,
		                M.DIRECTION_NM,
		                M.STRATEGY_ID,
		                M.STRATEGY_NM,
		                M.CSF_ID,
	            		M.CSF_NM,
		                M.METRIC_ID,
		                M.METRIC_NM,
		                M.UP_METRIC_ID,
		                M.EVAL_CYCLE,
		                M.EVAL_CYCLE_NM,
		                M.WEIGHT,
		                M.UNIT,
		                M.UNIT_NM,
		                TO_CHAR(ROUND(M.TARGET, 2)) TARGET,
		                TO_CHAR(ROUND(M.ACTUAL, 2)) ACTUAL,
		                TO_CHAR(ROUND(M.SCORE, 2)) SCORE,
		                TO_CHAR(ROUND(M.FINAL_SCORE, 2)) FINAL_SCORE,
		                TO_CHAR(ROUND(M.WEIGHT_SCORE, 3)) WEIGHT_SCORE,
            			TO_CHAR(ROUND(M.FINAL_SCORE * M.WEIGHT / 100, 3))AS EXCSCORE,
		                M.STATUS,
		                M.STATUS_NM,
		                NVL(SC.COLOR, '##B4B4B4') AS STATUS_COLOR,
		                M.PERS_SORT_ORDER,
		                M.STRA_SORT_ORDER,
<!--
		                M.DIRECT_SORT_ORDER,
-->
		                M.METRIC_SORT_ORDER,
		                M.ACT_YN
           		   FROM ( SELECT A.YEAR,
		                         A.MON,
		                         A.ANAL_CYCLE,
		                         A.METRIC_ID,
		                         A.METRIC_NM,
		                         E.METRIC_ID AS UP_METRIC_ID,
		                         A.PERSPECTIVE_ID,
		                         A.PERSPECTIVE_NM,
		                         A.DIRECTION_ID,
		                         A.DIRECTION_NM,
		                         A.STRATEGY_ID,
		                         A.STRATEGY_NM,
		                         BM.CSF_ID,
		                         I.CSF_NM,
		                         A.TARGET,
		                         A.ACTUAL,
		                         A.SCORE,
		                         A.FINAL_SCORE,
		                         A.WEIGHT_SCORE,
		                         A.STATUS,
		                         F_CODE_NM('021',A.STATUS,A.YEAR) STATUS_NM,
		                         A.EVAL_CYCLE,
		                         A.EVAL_CYCLE_NM,
		                         A.WEIGHT,
		                         A.UNIT,
		                         A.UNIT_NM,
		                         B.SORT_ORDER AS PERS_SORT_ORDER,
		                         C.SORT_ORDER AS STRA_SORT_ORDER,
<!--
		                         D.SORT_ORDER AS DIRECT_SORT_ORDER,
 -->
		                         A.SORT_ORDER AS METRIC_SORT_ORDER,
		                         A.TYPE_ID,
		                         A.TYPE_NM,
		                         CASE WHEN F.CREATE_DT IS NULL THEN 0 ELSE 1 END ACT_YN
		                    FROM BSC_METRICSCORE A
		         LEFT OUTER JOIN BSC_PERSPECTIVE B
		                      ON A.YEAR = B.YEAR
		                     AND A.PERSPECTIVE_ID = B.PERSPECTIVE_ID
		                     AND B.DELETE_DT IS NULL
<!-- 	                         LEFT OUTER JOIN BSC_STRATEGY C  -->
		         LEFT OUTER JOIN BSC_DEPT_STRATEGY C
		                      ON A.YEAR = C.YEAR
		                     AND A.STRATEGY_ID = C.STRATEGY_ID
		                     AND A.SC_DEPT_ID = C.SC_DEPT_ID
		                     AND C.DELETE_DT IS NULL
<!--
		                         LEFT OUTER JOIN BSC_DIRECTION D
		                         ON A.YEAR = D.YEAR
		                         AND A.DIRECTION_ID = D.DIRECTION_ID
		                         AND D.DELETE_DT IS NULL
 -->
 				 LEFT OUTER JOIN BSC_METRIC BM
			                  ON A.YEAR = BM.YEAR
			                 AND A.METRIC_ID = BM.METRIC_ID
			                 AND A.SC_DEPT_ID = BM.SC_DEPT_ID
			                 AND BM.DELETE_DT IS NULL
			  	 LEFT OUTER JOIN BSC_DEPT_CSF H                            
			                  ON A.YEAR = H.YEAR                            
			                 AND A.SC_DEPT_ID = H.SC_DEPT_ID                            
			                 AND BM.CSF_ID = H.CSF_ID
			 	 LEFT OUTER JOIN BSC_CSF I
			                  ON A.YEAR = I.YEAR
			                 AND BM.CSF_ID = I.CSF_ID
			                 AND I.DELETE_DT IS NULL
		        LEFT OUTER JOIN  BSC_ACT_REG_DEF_MON F
                              ON A.YEAR = F.YEAR
                             AND F.MON = #findMon#
                             AND A.METRIC_ID = F.METRIC_ID
		        LEFT OUTER JOIN ( SELECT A.YEAR,
                                         B.METRIC_ID,
                                         A.SUB_METRIC_ID
                                	FROM BSC_CAL_METRIC A
                              INNER JOIN BSC_METRIC B
                                      ON A.YEAR = B.YEAR
                                     AND A.METRIC_ID = B.METRIC_ID
                                     AND B.SC_DEPT_ID =  #findScDeptId#
                                     AND B.DELETE_DT IS NULL
                              	   WHERE A.YEAR = #findYear#
                                   	 AND A.DELETE_DT IS NULL) E
		                         	  ON A.YEAR = E.YEAR
		                         	 AND A.METRIC_ID = E.SUB_METRIC_ID
		                   		   WHERE 1=1
				                     AND A.YEAR = #findYear#
				                     AND A.MON = #findMon#
				                     AND A.ANAL_CYCLE = #findAnalCycle#
				                     AND A.SC_DEPT_ID = #findScDeptId#
<!--		                     
		                     AND A.BSC_METRIC_GBN = #findBscMetricGbn#
-->
		                ) M
		                LEFT OUTER JOIN BSC_COMMON_STATUS SC
		                ON M.YEAR = SC.YEAR
		                AND M.STATUS = SC.STATUS_ID
		          ) M
		  WHERE 1 = 1
	<isNotEmpty prepend="AND" property="findStrategyId">
				M.STRATEGY_ID = #findStrategyId#
	</isNotEmpty>
	<isNotEmpty prepend="AND" property="findMetricId">
				M.METRIC_ID = #findMetricId#
	</isNotEmpty>
            START WITH M.UP_METRIC_ID IS NULL AND M.YEAR = #findYear#
          CONNECT BY PRIOR M.METRIC_ID = M.UP_METRIC_ID AND M.YEAR = #findYear#
            ORDER SIBLINGS BY
            	  M.STRA_SORT_ORDER
<!--
                , M.DIRECT_SORT_ORDER
-->
            	, M.METRIC_SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 조직상세 목록 보기
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getList_BAK" parameterClass="hashMap" resultClass="hashMap">
		SELECT M.SCH_GBN_ID, M.SCH_GBN_NM, M.STRATEGY_ID, M.STRATEGY_NM, M.METRIC_ID, M.METRIC_NM
	       , M.EVAL_CYCLE, M.EVAL_CYCLE_NM
	       , M.WEIGHT
	       , M.UNIT, M.UNIT_NM
	       ,   CASE WHEN M.TYPE_ID ='01' THEN
	               CASE WHEN B.MON = #findMon# THEN NVL( TO_CHAR(M.TARGET), C.PRV_PLAN_NM)
	               ELSE
	                       CASE WHEN M.ANAL_CYCLE = 'Y' THEN PLAN_NM_Y
	                       ELSE CASE WHEN '01' = #findMon# THEN C.PLAN_NM_1MON ELSE C.PRV_PLAN_NM END
	                       END
	               END
	           ELSE
	               CASE WHEN M.ANAL_CYCLE = 'Y' THEN PLAN_NM_Y
	               ELSE CASE WHEN '01' = #findMon# THEN C.PLAN_NM_1MON ELSE C.PRV_PLAN_NM END
	               END
	           END AS TARGET
	       ,   CASE WHEN M.TYPE_ID ='01' THEN
	               CASE WHEN B.MON = #findMon# THEN NVL( TO_CHAR(M.ACTUAL), C.ACT_NM )
	               ELSE
	                       CASE WHEN M.ANAL_CYCLE = 'Y' THEN ACT_NM_Y
	                       ELSE ACT_NM
	                       END
	               END
	           ELSE
	               CASE WHEN M.ANAL_CYCLE = 'Y' THEN ACT_NM_Y ELSE ACT_NM END
	           END AS ACTUAL
	       , TO_CHAR(M.SCORE) SCORE
	       , M.STATUS
	       , SN.STATUS_NM
	       , NVL(SC.COLOR, '##B4B4B4') AS STATUS_COLOR
	       , NVL(OC.OPINION_CNT, 0) AS OPINION_CNT
	       , NVL(CC.COACHING_CNT, 0) AS COACHING_CNT
	       , NVL(C.ACTIVITY_CNT, 0) AS ACTIVITY_CNT
	       , NVL(OC.OPINION_CNT, 0) + NVL(CC.COACHING_CNT, 0) + NVL(C.ACTIVITY_CNT, 0) AS TOT_OPIN_CNT
	       , SGS.SG_SORT_ORDER, M.STRA_SORT_ORDER, M.METRIC_SORT_ORDER
	  FROM
	    (SELECT YEAR, MON, ANAL_CYCLE, METRIC_ID, METRIC_NM
	            , STRATEGY_ID, STRATEGY_NM, TARGET, ACTUAL, SCORE, STATUS
	            , EVAL_CYCLE, EVAL_CYCLE_NM
	            , WEIGHT
	            , UNIT, UNIT_NM
	            , STRA_SORT_ORDER, SORT_ORDER AS METRIC_SORT_ORDER
	            , TYPE_ID, TYPE_NM
	            , CASE WHEN #findSchGbn# = '01' THEN PERSPECTIVE_ID ELSE DB_INITIATIVE_ID END SCH_GBN_ID
	            , CASE WHEN #findSchGbn# = '01' THEN PERSPECTIVE_NM ELSE DB_INITIATIVE_NM END SCH_GBN_NM
	       FROM BSC_METRICSCORE
	      WHERE 1=1
	        AND YEAR = #findYear#
	        AND MON = #findMon#
	        AND SC_DEPT_ID = #findScDeptId#
	        AND ANAL_CYCLE = #findAnalCycle#
		<!--
		<isNotEmpty prepend="AND" property="findBscMetricGbn">
		         BSC_METRIC_GBN = #findBscMetricGbn#
		</isNotEmpty>
		-->
	    ) M
	    LEFT OUTER JOIN
	    (SELECT CODE_ID, CODE_NM, SORT_ORDER AS SG_SORT_ORDER
	       FROM BSC_CODE
	      WHERE YEAR =#findYear#
	        AND CODE_GRP_ID = (CASE WHEN #findSchGbn# = '01' THEN '001' ELSE '115' END)
	    ) SGS
	    ON M.SCH_GBN_ID = SGS.CODE_ID
	    LEFT OUTER JOIN
	    BSC_ACT_REG_DEF_MON B
	    ON M.YEAR = B.YEAR
	   AND M.METRIC_ID = B.METRIC_ID
	   AND M.MON = B.MON
	    LEFT OUTER JOIN
	    (SELECT METRIC_ID, PLAN_NM_1MON, PRV_PLAN_NM, PLAN_NM_Y, ACT_NM, ACT_NM_Y, FINAL_EVAL
	            , CASE WHEN NVL( PLAN_CONTENTS, '') = '' THEN 0 ELSE 1 END
	            + CASE WHEN NVL( ACT_CONTENTS, '') = '' THEN 0 ELSE 1 END
	            + CASE WHEN NVL( NEXT_PLAN_CONTENTS, '') = '' THEN 0 ELSE 1 END
	            AS ACTIVITY_CNT
	       FROM
	            (SELECT METRIC_ID
	                    , MAX(CASE WHEN YEAR||MON = #findYear# || #findMon# THEN PLAN_NM_1MON END) AS PLAN_NM_1MON
	                    , MAX(CASE WHEN YEAR||MON = #findYear# || #findMon# THEN NULL ELSE NEXT_PLAN_NM END) AS PRV_PLAN_NM
	                    , MAX(CASE WHEN YEAR||MON = #findYear# || #findMon# THEN PLAN_NM_Y END) AS PLAN_NM_Y
	                    , MAX(CASE WHEN YEAR||MON = #findYear# || #findMon# THEN ACT_NM END) AS ACT_NM
	                    , MAX(CASE WHEN YEAR||MON = #findYear# || #findMon# THEN ACT_NM_Y END) AS ACT_NM_Y
	                    , MAX(CASE WHEN YEAR||MON = #findYear# || #findMon# THEN FINAL_EVAL END) AS FINAL_EVAL
	                    , NULL AS TMP
	                    , MAX(CASE WHEN #findMon# = '01' THEN PLAN_CONTENTS_1MON
	                               ELSE CASE WHEN YEAR||MON = #findYear# || #findMon# THEN NULL ELSE NEXT_PLAN_CONTENTS END
	                          END) AS PLAN_CONTENTS
	                    , MAX(CASE WHEN YEAR||MON = #findYear# || #findMon# THEN ACT_CONTENTS END) AS ACT_CONTENTS
	                    , MAX(CASE WHEN YEAR||MON = #findYear# || #findMon# THEN NEXT_PLAN_CONTENTS END) AS NEXT_PLAN_CONTENTS
	              FROM BSC_INIT_ACTIVITY
	             WHERE YEAR||MON BETWEEN TO_CHAR((ADD_MONTHS(TO_DATE(#findYear# || #findMon#,'YYYYMM'),-1)),'YYYYMM') AND #findYear# || #findMon#
	             GROUP BY METRIC_ID
	            )
	    ) C
	    ON M.METRIC_ID = C.METRIC_ID
	    LEFT OUTER JOIN
	    (SELECT CODE_ID AS STATUS_ID, CODE_NM AS STATUS_NM, SORT_ORDER AS STATUS_SORT_ORDER
	       FROM BSC_CODE
	      WHERE YEAR = #findYear#
	        AND CODE_GRP_ID ='021'
	    ) SN
	    ON M.STATUS = SN.STATUS_ID
	    LEFT OUTER JOIN
	    (SELECT METRIC_ID, COUNT(*) AS OPINION_CNT
	       FROM BSC_OPINION
	      WHERE 1=1
	        AND YEAR = #findYear#
	        AND MON = #findMon#
	      GROUP BY METRIC_ID
	    ) OC
	    ON M.METRIC_ID = OC.METRIC_ID
	    LEFT OUTER JOIN
	    (SELECT METRIC_ID, COUNT(*) AS COACHING_CNT
	       FROM BSC_COACHING
	      WHERE 1=1
	        AND YEAR = #findYear#
	        AND MON = #findMon#
	      GROUP BY METRIC_ID
	    ) CC
	    ON M.METRIC_ID = CC.METRIC_ID
	    LEFT OUTER JOIN
	    BSC_COMMON_STATUS SC
	     ON  M.YEAR      = SC.YEAR
	     AND M.STATUS    = SC.STATUS_ID
	 ORDER BY SGS.SG_SORT_ORDER, M.STRA_SORT_ORDER, M.METRIC_SORT_ORDER, M.METRIC_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 조직상세 목표합의서 조회
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getAttachList" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR, SC_DEPT_ID, SEQ, ATTACH_FILE_NM,ATTACH_FILE_SUFFIX, ATTACH_FILE_PATH
	      FROM BSC_DEPTTARGET_ATTACH A
	     WHERE 1=1
	       AND A.YEAR = #findYear#
	       AND A.SC_DEPT_ID = #findScDeptId#
	     ORDER BY A.SEQ
	</select>

	<!--
	==================================================================
	  # 설명	: 조직상세 조직 KPI 상태신호 조회
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getOrgSignalCnt" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.STATUS, B.CODE_NM
		       ,CASE WHEN A.STATUS = '01' THEN '0x4997D6'
		             WHEN A.STATUS = '02' THEN '0x3C8408'
		             WHEN A.STATUS = '03' THEN '0xFF810F'
		             WHEN A.STATUS = '04' THEN '0xC03A3A'
		             ELSE '0xB4B4B4'
		       END AS COLOR
		       , NVL(C.COLOR, '0xB4B4B4') AS SIG_COLOR
		       , A.CNT
		       , SUM(A.CNT) OVER(PARTITION BY NULL) ||'' AS TOT_CNT
		  FROM (
		     SELECT YEAR, STATUS, COUNT(METRIC_ID) AS CNT
		       FROM BSC_METRICSCORE
		      WHERE 1=1
		        AND YEAR = #findYear#
		        AND MON = #findMon#
		        AND SC_DEPT_ID = #findScDeptId#
		        AND ANAL_CYCLE = #findAnalCycle#
		      GROUP BY YEAR, STATUS ) A
		     LEFT OUTER JOIN BSC_CODE B
		     ON  A.YEAR = B.YEAR
		     AND A.STATUS = B.CODE_ID
		     AND B.CODE_GRP_ID='021'
		     LEFT OUTER JOIN BSC_COMMON_STATUS C
		     ON  A.YEAR = C.YEAR
		     AND A.STATUS = C.STATUS_ID
		 ORDER BY B.SORT_ORDER NULLS LAST
	</select>

</sqlMap>


