<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="prs.mngCon.planMngCon">

    <!--
    ==================================================================   
      # 설명    : typeAlias 선언
      #    기능    : SETTING
      #    TABLE    : 
    ==================================================================
    -->
    <typeAlias alias="hashMap"             type="java.util.HashMap" />
    
    <!--
    ==================================================================   
      # 설명    : 성과계획서 관리 목록 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getEvalConList" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.YEAR
			 , A.EVAL_MEMB_EMPN
			 , A.EVAL_MEMB_EMPN_SEQ
			 , A.KOR_NM
			 , A.DEPT_CD
			 , D.DEPT_KOR_NM
			 , F_DEPT_FULL_NM(A.YEAR,A.DEPT_CD,'BSC_INSA_DEPT') DEPT_FULL_NM
			 , A.CAST_TC
			 , A.POS_TC
			 , F_CODE_NM('170', A.CAST_TC , A.YEAR) CAST_TC_NM 
             , F_CODE_NM('171', A.POS_TC , A.YEAR) POS_TC_NM 
			 , A.EVAL_YN
			 , A.EVAL_GRP_ID
			 , A.PLAN_STATUS_ID
			 , CASE WHEN A.PLAN_STATUS_ID IS NULL THEN '미입력' ELSE  F_CODE_NM('217', A.PLAN_STATUS_ID , A.YEAR)  END PLAN_STATUS_NM
			 , A.PLAN_YN
		FROM V_CON_MNG_MEMBER A
		 LEFT OUTER JOIN BSC_INSA_DEPT D ON A.YEAR = D.YEAR AND A.DEPT_CD = D.DEPT_CD
		WHERE A.YEAR= #findYear#
		  AND A.EVAL_YN ='Y'
		  <!-- AND A.PLAN_YN ='Y' -->
		 <isNotEmpty prepend="AND" property="findEvalMembEmpn" >
			  A.EVAL_MEMB_EMPN      = #findEvalMembEmpn#
		</isNotEmpty>
		   ORDER BY A.KOR_NM, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ
    </select>
     

    <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 성과계획서관리 목록 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getList" parameterClass="hashMap" resultClass="hashMap">
         SELECT   A.YEAR
				, A.DIRECTION_CD
				, F_CODE_NM('218', A.DIRECTION_CD , A.YEAR) DIRECTION_NM				
                , A.TARGET_ID
				, A.TARGET_NM
				, A.METRIC_NM
				, A.TARGET_VALUE
                , A.TARGET_BASIS
				, A.UNIT
				, F_CODE_NM('013', A.UNIT , A.YEAR) UNIT_NM
				, A.WEIGHT
				, A.Q1_TARGET_VALUE
				, A.Q2_TARGET_VALUE
				, A.Q3_TARGET_VALUE
				, A.Q4_TARGET_VALUE
		 FROM  CON_MNG_TARGET A
		  WHERE A.YEAR				= #findYear#
		   AND A.EVAL_MEMB_EMPN      = #evalMembEmpn#
		   AND A.EVAL_MEMB_EMPN_SEQ  = #evalMembEmpnSeq#
				ORDER BY A.DIRECTION_CD, A.TARGET_ID
    </select>
    
     <!--
    ==================================================================   
      # 설명    : 성과계획서 대상자 정보 조회
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getFindList" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.YEAR
			 , A.EVAL_MEMB_EMPN
			 , A.EVAL_MEMB_EMPN_SEQ
			 , A.KOR_NM
			 , A.DEPT_CD
			 , C.DEPT_KOR_NM
			 , A.CAST_TC
			 , A.POS_TC
			 , F_CODE_NM('170', A.CAST_TC , A.YEAR) CAST_TC_NM 
             , F_CODE_NM('171', A.POS_TC , A.YEAR) POS_TC_NM 
			 , A.EVAL_YN
			 , A.EVAL_GRP_ID
			 , A.FROM_DT
			 , A.TO_DT
			 , A.PLAN_STATUS_ID
			 , CASE WHEN A.PLAN_STATUS_ID IS NULL THEN '미입력' ELSE  F_CODE_NM('217', A.PLAN_STATUS_ID , A.YEAR)  END PLAN_STATUS_NM
			 , A.PLAN_YN
			 , TO_CHAR(A.FINAL_APPROVE_DT, 'YYYY.MM.DD')AS FINAL_APPROVE_DT
			 , B1.ASSESSOR_EMPN AS APPROVE_USER_ID
             , C1.KOR_NM       AS APPROVE_USER_NM
             , (
                SELECT MAX(S2.ACT_STATUS_ID) 
                FROM CON_MNG_TARGET S1 
                LEFT OUTER JOIN CON_MNG_ACTUAL S2
                    ON S1.YEAR = S2.YEAR
                    AND S2.MON = #mon#    
                    AND S1.EVAL_MEMB_EMPN = S2.EVAL_MEMB_EMPN
                    AND S1.EVAL_MEMB_EMPN_SEQ = S2.EVAL_MEMB_EMPN_SEQ
                    AND S1.TARGET_ID = S2.TARGET_ID
                WHERE A.YEAR = S1.YEAR
                AND A.EVAL_MEMB_EMPN = S1.EVAL_MEMB_EMPN
                AND A.EVAL_MEMB_EMPN_SEQ = S1.EVAL_MEMB_EMPN_SEQ
             ) AS ACT_STATUS_ID
		FROM V_CON_MNG_MEMBER A
		 LEFT OUTER JOIN BSC_INSA_DEPT C ON A.YEAR = C.YEAR AND A.DEPT_CD = C.DEPT_CD
		 LEFT OUTER JOIN (
          SELECT A.YEAR
                     , A.DEPT_CD
                     <![CDATA[
                     , (SELECT EMPN FROM BSC_INSA WHERE YEAR = A.YEAR AND ROWNUM = '1' 
                     AND DEPT_CD = A.DEPT_CD AND POS_TC IN ('12', '21', '22', '2C', '31', '32', '34', '39') 
                     AND EMPN IN (SELECT EMPN FROM BSC_INSA_PCMT WHERE YEAR = #findYear#
                     AND END_PCMT_DATE = #findYear# ||'1231' and pcmt_tc <> '34')) ASSESSOR_EMPN
                     ]]>
                  FROM BSC_INSA_DEPT A
                 WHERE A.DEPT_CD IN (SELECT DEPT_CD
                                       FROM BSC_INSA_DEPT
                                      WHERE YEAR = #findYear#
                                 START WITH DEPT_CD = '0000'
                           CONNECT BY PRIOR YEAR = YEAR
                                        AND PRIOR DEPT_CD = UP_DEPT_CD)
                   AND A.DEPT_CD > '1090'
                   AND A.DEPT_CD IN (
                                        SELECT A.DEPT_CD
                                          FROM BSC_INSA_DEPT A
                                          LEFT OUTER JOIN BSC_INSA_DEPT B
                                            ON A.YEAR = B.YEAR AND A.USE_YN = B.USE_YN AND A.DEPT_CD = B.UP_DEPT_CD
                                         WHERE A.YEAR = #findYear#
                                           AND A.DEPT_CD > '1090'
                                         GROUP BY A.DEPT_CD
                                        HAVING COUNT(B.DEPT_CD) = 0
                                   )
                   AND A.YEAR = #findYear#
              ORDER BY A.DEPT_CD
              ) B1 ON A.YEAR = B1.YEAR  and A.DEPT_CD = B1.DEPT_CD
               LEFT OUTER JOIN BSC_INSA C1 ON B1.YEAR = C1.YEAR AND B1.ASSESSOR_EMPN = C1.EMPN
		WHERE A.YEAR				= #findYear#
		  AND A.EVAL_MEMB_EMPN      = #evalMembEmpn#
		  AND A.EVAL_MEMB_EMPN_SEQ  = #evalMembEmpnSeq#
		  AND A.EVAL_YN 			='Y'
    </select>
    
      <!--
    ==================================================================   
      # 설명    : 성과계획서 제출일정여부
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getClosingPlan" parameterClass="hashMap" resultClass="hashMap">
        SELECT EMP_START_DT	, EMP_END_DT
             , CASE WHEN TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN EMP_START_DT AND EMP_END_DT THEN 'Y' ELSE 'N' END MNG_CON_PLAN_YN
          FROM PRS_EVAL_SCHEDULE
          WHERE YEAR = #findYear#    
    </select>
    
    <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 성과계획서관리 상세 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
       SELECT     A.YEAR
				, A.DIRECTION_CD
				, A.TARGET_ID
				, A.TARGET_NM
				, A.METRIC_NM
				, A.TARGET_VALUE
                , A.TARGET_BASIS
				, A.UNIT
				, A.WEIGHT
				, A.Q1_TARGET_VALUE
				, A.Q2_TARGET_VALUE
				, A.Q3_TARGET_VALUE
				, A.Q4_TARGET_VALUE
                , A.CONTENT
		 FROM  CON_MNG_TARGET A
		 WHERE A.YEAR	 = #findYear# 
		 AND A.TARGET_ID = #targetId#         
    </select>
    
    <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 성과계획서관리 등록
      #    기능    : INSERT
      #    TABLE    : 
    ==================================================================
    -->    
    <insert id="insertPlanData" parameterClass="hashMap">
    	MERGE INTO CON_MNG_PLAN A
		USING (
		 SELECT #year# AS YEAR ,  #evalMembEmpn# AS EVAL_MEMB_EMPN, #evalMembEmpnSeq# AS EVAL_MEMB_EMPN_SEQ
		 		, #planStatusId#  AS PLAN_STATUS_ID  FROM DUAL
		           ) B
		ON (A.YEAR = B.YEAR AND A.EVAL_MEMB_EMPN =B.EVAL_MEMB_EMPN AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ)
		 WHEN MATCHED THEN
		 UPDATE SET A.PLAN_STATUS_ID = B.PLAN_STATUS_ID 
		  WHEN NOT MATCHED THEN
            INSERT (A.YEAR,A.EVAL_MEMB_EMPN,A.EVAL_MEMB_EMPN_SEQ,A.PLAN_STATUS_ID,A.CREATE_DT)
             VALUES (B.YEAR,B.EVAL_MEMB_EMPN,B.EVAL_MEMB_EMPN_SEQ,B.PLAN_STATUS_ID, SYSDATE)
    </insert>
    <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 성과계획서관리 등록
      #    기능    : INSERT
      #    TABLE    : 
    ==================================================================
    -->    
    <insert id="insertData" parameterClass="hashMap">
        <selectKey resultClass="java.lang.String" keyProperty="SEQ" >
			SELECT 'CT'||LPAD(NVL(MAX(SUBSTR(TARGET_ID,3,5)),0)+1,5,'0') FROM CON_MNG_TARGET WHERE YEAR=#year#
		</selectKey>
        INSERT INTO CON_MNG_TARGET( 
        		  YEAR
				, EVAL_MEMB_EMPN
				, EVAL_MEMB_EMPN_SEQ
				, TARGET_ID
				, TARGET_NM
				, DIRECTION_CD
				, METRIC_NM
				, UNIT
		        , TARGET_BASIS
				, TARGET_VALUE
				, Q1_TARGET_VALUE
				, Q2_TARGET_VALUE
				, Q3_TARGET_VALUE
				, Q4_TARGET_VALUE
				, CONTENT
				, WEIGHT
				, CREATE_ID
				, CREATE_DT
             ) VALUES ( 
                  #year#
             	, #evalMembEmpn#
             	, #evalMembEmpnSeq#
             	, #SEQ#
             	, #targetNm#
             	, #directionCd#
             	, #metricNm#
             	, #unit#
		        , #targetBasis#
             	, #targetValue#
             	, #q1Target_value#
             	, #q2Target_value#
             	, #q3Target_value#
             	, #q4Target_value#
             	, #content#
             	, #weight#
             	, #userId#
             	, SYSDATE
             )
    </insert>    
    
    <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 성과계획서관리 수정
      #    기능    : UPDATE
      #    TABLE    : 
    ==================================================================
    -->    
    <update id="updateData" parameterClass="hashMap">
      UPDATE CON_MNG_TARGET 
           SET    YEAR			  	= #year#
				, TARGET_NM			= #targetNm#	
				, DIRECTION_CD		= #directionCd#
				, METRIC_NM			= #metricNm#
				, UNIT				= #unit#
                , TARGET_BASIS      = #targetBasis#
				, TARGET_VALUE		= #targetValue#
				, Q1_TARGET_VALUE 	= #q1Target_value#
				, Q2_TARGET_VALUE	= #q2Target_value#
				, Q3_TARGET_VALUE	= #q3Target_value#
				, Q4_TARGET_VALUE	= #q4Target_value#
				, CONTENT			= #content#
				, WEIGHT			= #weight#
				, MODIFY_ID			= #userId#
				, MODIFY_DT			= SYSDATE
           WHERE  YEAR				= #year# 
        	  AND TARGET_ID			= #targetId#
        	  AND EVAL_MEMB_EMPN 	= #evalMembEmpn#
        	  AND EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
        
    </update>   
    
    <!--
    ==================================================================   
      # 설명    : 성과계획서 관리 수정
      #    기능    : UPDATE
      #    TABLE    : 
    ==================================================================
    -->    
    <update id="updatePlanData" parameterClass="hashMap">
         UPDATE  CON_MNG_PLAN
          SET  PLAN_STATUS_ID = #planStatusId#  
           WHERE  YEAR				 = #year# 
        	  AND EVAL_MEMB_EMPN 	 = #evalMembEmpn#
        	  AND EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
    </update>  
    

    <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 성과계획서관리 삭제
      #    기능    : UPDATE
      #    TABLE    : 
    ==================================================================
    -->    
    <update id="deleteData" parameterClass="hashMap">
        DELETE FROM  CON_MNG_TARGET
          WHERE YEAR			 = #year# 
       	  AND TARGET_ID			 = #target#
       	  AND EVAL_MEMB_EMPN 	 = #evalMembEmpn#
       	  AND EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
    </update>
    
    
</sqlMap>


