<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="cbe.eval.evalRival">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: CBE_RIVAL_GRP
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />
	 

	<!--
	==================================================================   
	  # 설명	: 경쟁그룹 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: CBE_RIVAL_GRP
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR,
               A.EVAL_DEGREE_ID,
               A.RIVAL_GRP_ID,
               A.RIVAL_GRP_NM,
               F_CBE_GRP_DEPT_LIST(A.YEAR, A.EVAL_DEGREE_ID, A.RIVAL_GRP_ID, 'CBE_RIVAL_GRP_DEPT', 'SC_DEPT_NM') DEPT_NM,
               F_CBE_GRP_JIKGUB_LIST(A.YEAR, A.EVAL_DEGREE_ID, A.RIVAL_GRP_ID, 'CBE_RIVAL_GRP_JIKGUB') JIKGUB_NM,
               NULL AS WORK_TERM,
               (SELECT COUNT(*)
                  FROM CBE_EVAL_MASTER B
                WHERE B.YEAR=A.YEAR
                    AND B.EVAL_DEGREE_ID = A.EVAL_DEGREE_ID
                    AND B.RIVAL_GRP_ID=A.RIVAL_GRP_ID) USER_CNT,
               TO_CHAR(A.REFL_DT, 'YYYYMMDD') AS REFL_DT,
               A.SORT_ORDER
          FROM CBE_RIVAL_GRP A
         WHERE A.YEAR=#findYear#
           AND A.EVAL_DEGREE_ID=#findEvalDegreeId#
         ORDER BY A.SORT_ORDER 
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 경쟁그룹 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: CBE_RIVAL_GRP
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR                  
			 , EVAL_DEGREE_ID        
			 , RIVAL_GRP_ID          
			 , RIVAL_GRP_NM          
			 , NULL AS WORK_TERM
			 , REFL_DT               
			 , SORT_ORDER            
		  FROM CBE_RIVAL_GRP 
		 WHERE 1 = 1 
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND RIVAL_GRP_ID = #rivalGrpId#	      
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 코드 채번
	  #	기능	: SELECT
	  #	TABLE	: CBE_RIVAL_GRP
	==================================================================
	-->
	<select id="getRivalGrpId" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT 'RG'||LPAD(NVL(MAX(SUBSTR(RIVAL_GRP_ID,3,6)),0)+1,5,'0') SEQ FROM CBE_RIVAL_GRP WHERE YEAR=#year#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 경쟁그룹 등록
	  #	기능	: INSERT
	  #	TABLE	: CBE_RIVAL_GRP
	==================================================================
	-->	
	<insert id="insertData" parameterClass="hashMap">
		INSERT INTO CBE_RIVAL_GRP ( 
			   YEAR
			 , EVAL_DEGREE_ID
			 , RIVAL_GRP_ID
			 , RIVAL_GRP_NM
			 , WORK_TERM
			 , CREATE_DT
			 , SORT_ORDER
			 ) VALUES ( 
			   #year#
			 , #evalDegreeId#
			 , #rivalGrpId#
			 , #rivalGrpNm#
			 , #workTerm#
			 , SYSDATE
			 , #sortOrder#
			 )
	</insert>	
	
	<!--
	==================================================================   
	  # 설명	: 경쟁그룹 수정
	  #	기능	: UPDATE
	  #	TABLE	: CBE_RIVAL_GRP
	==================================================================
	-->	
	<update id="updateData" parameterClass="hashMap">
		UPDATE CBE_RIVAL_GRP 
		   SET RIVAL_GRP_NM           = #rivalGrpNm# 
			 , WORK_TERM              = #workTerm# 
			 , MODIFY_DT              = SYSDATE 
			 , SORT_ORDER             = #sortOrder# 
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND RIVAL_GRP_ID = #rivalGrpId#		
	</update>	
	

	<!--
	==================================================================   
	  # 설명	: 경쟁그룹 삭제
	  #	기능	: UPDATE
	  #	TABLE	: CBE_RIVAL_GRP
	==================================================================
	-->	
	<update id="deleteData" parameterClass="hashMap">
		DELETE FROM CBE_RIVAL_GRP 
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND RIVAL_GRP_ID = #rivalGrpId#
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 직급 목록 조회
	  #	기능	: SELECT
	  #	TABLE	: CBE_WEIGHT_GRP_JIKGUB
	==================================================================
	-->
	<select id="jikgubList" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR
		     , JIKGUB_ID
		FROM CBE_RIVAL_GRP_JIKGUB 
		WHERE YEAR = #year#
		  AND EVAL_DEGREE_ID=#evalDegreeId#
		  AND RIVAL_GRP_ID=#rivalGrpId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 직급 목록 조회
	  #	기능	: SELECT
	  #	TABLE	: CBE_WEIGHT_GRP_JIKGUB
	==================================================================
	-->
	<select id="deptList" parameterClass="hashMap" resultClass="hashMap">
		SELECT MAX(F_CBE_GRP_DEPT_LIST(#year#, #evalDegreeId#, #rivalGrpId#, 'CBE_RIVAL_GRP_DEPT', 'SC_DEPT_NM')) SC_DEPT_NM,
		       REPLACE(MAX(F_CBE_GRP_DEPT_LIST(#year#, #evalDegreeId#, #rivalGrpId#, 'CBE_RIVAL_GRP_DEPT', 'SC_DEPT_ID') ) 
		       		 ,','
		       		 ,'|') SC_DEPT_ID   
          FROM CBE_RIVAL_GRP_DEPT A
         INNER JOIN BSC_SC_DEPT B ON A.YEAR=B.YEAR AND A.SC_DEPT_ID=B.SC_DEPT_ID
         WHERE A.YEAR=#year#
           AND A.EVAL_DEGREE_ID=#evalDegreeId#
           AND A.RIVAL_GRP_ID=#rivalGrpId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 지표Pool 사용중인 지표목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getUseScDeptList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.SC_DEPT_ID,
		       B.SC_DEPT_NM
          FROM CBE_RIVAL_GRP_DEPT A
         INNER JOIN BSC_SC_DEPT B ON A.YEAR=B.YEAR AND A.SC_DEPT_ID=B.SC_DEPT_ID
         WHERE A.YEAR=#findYear#
           AND A.EVAL_DEGREE_ID=#evalDegreeId#
           AND A.RIVAL_GRP_ID=#rivalGrpId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가대상자매핑 삭제
	  #	기능	: UPDATE
	  #	TABLE	: CBE_WEIGHT_GRP_DEPT
	==================================================================
	-->	
	<update id="deleteDeptData" parameterClass="hashMap">
		DELETE FROM CBE_RIVAL_GRP_DEPT 
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND RIVAL_GRP_ID = #rivalGrpId#
		   AND RIVAL_GRP_ID = #rivalGrpId#
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 평가대상자매핑 등록
	  #	기능	: INSERT
	  #	TABLE	: CBE_WEIGHT_GRP_DEPT
	==================================================================
	-->	
	<insert id="insertDeptData" parameterClass="hashMap">
		INSERT INTO CBE_RIVAL_GRP_DEPT ( 
			   YEAR
			 , EVAL_DEGREE_ID
			 , RIVAL_GRP_ID
			 , SC_DEPT_ID
			 , CREATE_DT
			 ) VALUES ( 
			   #year#
			 , #evalDegreeId#
			 , #rivalGrpId#
			 , #scDeptId#
			 , SYSDATE
			 )
	</insert>
	
	<!--
	==================================================================   
	  # 설명	: 평가대상자매핑 삭제
	  #	기능	: UPDATE
	  #	TABLE	: CBE_WEIGHT_GRP_DEPT
	==================================================================
	-->	
	<update id="deleteJikgubData" parameterClass="hashMap">
		DELETE FROM CBE_RIVAL_GRP_JIKGUB 
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND RIVAL_GRP_ID = #rivalGrpId#
	</update>	
	
	<!--
	==================================================================   
	  # 설명	: 평가대상자매핑 등록
	  #	기능	: INSERT
	  #	TABLE	: CBE_WEIGHT_GRP_DEPT
	==================================================================
	-->	
	<insert id="insertJikgubData" parameterClass="hashMap">
	<!-- 
		INSERT INTO CBE_RIVAL_GRP_JIKGUB ( 
			   YEAR
			 , EVAL_DEGREE_ID
			 , RIVAL_GRP_ID
			 , JIKGUB_ID
			 , CREATE_DT
			 ) VALUES ( 
			   #year#
			 , #evalDegreeId#
			 , #rivalGrpId#
			 , #jikgubId#
			 , SYSDATE
			 )
	-->
	MERGE INTO CBE_RIVAL_GRP_JIKGUB O
	 	USING (SELECT #year# AS YEAR
				    , #evalDegreeId# AS EVAL_DEGREE_ID
				    , #rivalGrpId# AS RIVAL_GRP_ID
				    , #jikgubId# AS JIKGUB_ID
				    , SYSDATE AS CREATE_DT
			     FROM DUAL) I
	 	ON (O.YEAR = I.YEAR
	 	AND O.EVAL_DEGREE_ID = I.EVAL_DEGREE_ID
	 	AND O.RIVAL_GRP_ID = I.RIVAL_GRP_ID
	 	AND O.JIKGUB_ID = I.JIKGUB_ID)
	 	WHEN MATCHED THEN
	 		UPDATE SET O.CREATE_DT = I.CREATE_DT
	 	WHEN NOT MATCHED THEN
	 		INSERT (O.YEAR, O.EVAL_DEGREE_ID, O.RIVAL_GRP_ID, O.JIKGUB_ID, O.CREATE_DT )
	 		VALUES (I.YEAR, I.EVAL_DEGREE_ID, I.RIVAL_GRP_ID, I.JIKGUB_ID, I.CREATE_DT)
	</insert>
	
	
	
	<!--
	==================================================================   
	  # 설명	: 평가대상자매핑 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: CBE_EVAL_MASTER
	==================================================================
	-->
	<select id="getUserList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR,
	            A.EVAL_DEGREE_ID,
	            A.EVAL_MEMB_USER_ID, 
	            A.NAME,
	            A.RIVAL_GRP_ID,
	            CASE WHEN B.RIVAL_GRP_NM IS NULL THEN NULL ELSE B.RIVAL_GRP_NM END RIVAL_GRP_NM,
	            C.SC_DEPT_NM
	            , ITEM_FRS_DEPT_ID, ITEM_SEC_DEPT_ID, ITEM_TEAM_ID
                , FDM.SC_DEPT_NM AS ITEM_FRS_DEPT_NM
                , SDM.SC_DEPT_NM AS ITEM_SEC_DEPT_NM
                , TDM.SC_DEPT_NM AS ITEM_TEAM_NM
	            , A.JIKGUB_NM
	            , A.POS_NM
	            , F_CODE_NM('155', A.EVAL_METHOD_GBN, A.YEAR) AS EVAL_METHOD_GBN_NM
	            , A.WORK_TERM  
	  FROM CBE_EVAL_MASTER A
	  LEFT OUTER JOIN CBE_RIVAL_GRP B 
	               ON A.YEAR=B.YEAR 
	              AND A.EVAL_DEGREE_ID = B.EVAL_DEGREE_ID 
	              AND A.RIVAL_GRP_ID=B.RIVAL_GRP_ID 
	  LEFT OUTER JOIN BSC_SC_DEPT C 
	               ON A.YEAR=C.YEAR 
	              AND A.SC_DEPT_ID=C.SC_DEPT_ID
	  LEFT OUTER JOIN BSC_SC_DEPT FDM ON A.YEAR = FDM.YEAR AND A.ITEM_FRS_DEPT_ID = FDM.SC_DEPT_ID
      LEFT OUTER JOIN BSC_SC_DEPT SDM ON A.YEAR = SDM.YEAR AND A.ITEM_SEC_DEPT_ID = SDM.SC_DEPT_ID
      LEFT OUTER JOIN BSC_SC_DEPT TDM ON A.YEAR = TDM.YEAR AND A.ITEM_TEAM_ID = TDM.SC_DEPT_ID	  
	WHERE A.YEAR = #year#
	     AND A.EVAL_DEGREE_ID = #evalDegreeId#
	     AND A.WORK_TERM <![CDATA[ >= ]]>(SELECT WORK_TERM
				                            FROM CBE_EVAL_INIT_INFO
				                           WHERE YEAR = #year#
				                             AND EVAL_DEGREE_ID=#evalDegreeId# )
     	AND A.SC_DEPT_ID IN (SELECT SC_DEPT_ID
                               FROM CBE_RIVAL_GRP_DEPT
                              WHERE YEAR = #year#
                                AND EVAL_DEGREE_ID=#evalDegreeId#
                                AND RIVAL_GRP_ID=#rivalGrpId# )
    	AND A.JIKGUB_ID IN (SELECT JIKGUB_ID
                              FROM CBE_RIVAL_GRP_JIKGUB
                             WHERE YEAR = #year#
                               AND EVAL_DEGREE_ID = #evalDegreeId#
                               AND RIVAL_GRP_ID = #rivalGrpId# )     
	</select>
	
	
	<!--
	==================================================================   
	  # 설명	: 가중치그룹 수정
	  #	기능	: UPDATE
	  #	TABLE	: CBE_EVAL_MASTER
	==================================================================
	-->	
	<update id="updateRivalGrpData" parameterClass="hashMap">
		UPDATE CBE_EVAL_MASTER
		   SET RIVAL_GRP_ID = #rivalGrpId#
		     , EVAL_METHOD_GBN = '10'
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND EVAL_MEMB_USER_ID = #reflUserId#
	</update>	
	
	
	<!--
	==================================================================   
	  # 설명	: 가중치그룹 수정
	  #	기능	: UPDATE
	  #	TABLE	: CBE_RIVAL_GRP
	==================================================================
	-->	
	<update id="updateRivalGrpReflDtData" parameterClass="hashMap">
		UPDATE CBE_RIVAL_GRP
   		   SET REFL_DT = SYSDATE
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND RIVAL_GRP_ID = #rivalGrpId#
	</update>	
	
	
	
	
</sqlMap>


