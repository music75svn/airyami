<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="prs.mng.actualApprove">
    <!--
    ==================================================================   
      # 설명    : typeAlias 선언
      #    기능    : SETTING
      #    TABLE    : 
    ==================================================================
    -->
    <typeAlias alias="hashMap"             type="java.util.HashMap" />
    
    <!--
    ==================================================================   
      # 설명    : 성과계획서 관리 목록 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getList" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.YEAR
             , #findMon# AS MON
             , A.EVAL_MEMB_EMPN
             , A.EVAL_MEMB_EMPN_SEQ
             , A.KOR_NM
             , A.DEPT_CD
             , A.DEPT_FULL_NM
             , A.CAST_TC
             , A.POS_TC
             , A.CAST_TC_NM 
             , A.POS_TC_NM 
             , A.PRS_YN
             , A.EVAL_GRP_ID
             , SUBSTR(A.FROM_DT,0,4) || '.' || SUBSTR(A.FROM_DT,5,2) || '.' || SUBSTR(A.FROM_DT,7,2) || '~' || SUBSTR(A.TO_DT,0,4) || '.' || SUBSTR(A.TO_DT,5,2) || '.' || SUBSTR(A.TO_DT,7,2) AS WORKDATE
             , A.FROM_DT
             , A.TO_DT
             , A.MANAGER_USER_ID
             , A.MANAGER_USER_NM
             , A.PLAN_STATUS_ID
             , A.PLAN_STATUS_NM
             , A.PLAN_YN
             , A.ACT_STATUS_ID
             , F_CODE_NM('217', A.ACT_STATUS_ID , A.YEAR) ACT_STATUS_NM 
         FROM (
            SELECT A.YEAR
                 , #findMon# AS MON
                 , A.EVAL_MEMB_EMPN
                 , A.EVAL_MEMB_EMPN_SEQ
                 , A.KOR_NM
                 , A.DEPT_CD
                 , F_DEPT_FULL_NM(A.YEAR, A.DEPT_CD, 'BSC_INSA_DEPT') AS DEPT_FULL_NM
                 , A.CAST_TC
                 , A.POS_TC
                 , F_CODE_NM('170', A.CAST_TC , A.YEAR) CAST_TC_NM 
                 , F_CODE_NM('171', A.POS_TC , A.YEAR) POS_TC_NM 
                 , A.PRS_YN
                 , A.EVAL_GRP_ID
                 , A.FROM_DT
                 , A.TO_DT
                 , A.MANAGER_USER_ID
                 , (SELECT KOR_NM FROM BSC_INSA WHERE A.YEAR = YEAR AND A.MANAGER_USER_ID = EMPN) AS MANAGER_USER_NM
                 , A.PLAN_STATUS_ID
                 , CASE WHEN A.PLAN_STATUS_ID IS NULL THEN '미입력' ELSE  F_CODE_NM('217', A.PLAN_STATUS_ID , A.YEAR)  END PLAN_STATUS_NM
                 , A.PLAN_YN
                 , NVL((
                    SELECT MAX(S2.ACT_STATUS_ID) 
                    FROM PRS_MNG_TARGET S1 
                    LEFT OUTER JOIN PRS_MNG_ACTUAL S2
                        ON S1.YEAR = S2.YEAR
                        AND S2.MON = #findMon#    
                        AND S1.EVAL_MEMB_EMPN = S2.EVAL_MEMB_EMPN
                        AND S1.EVAL_MEMB_EMPN_SEQ = S2.EVAL_MEMB_EMPN_SEQ
                        AND S1.TARGET_ID = S2.TARGET_ID
                    WHERE A.YEAR = S1.YEAR
                    AND A.EVAL_MEMB_EMPN = S1.EVAL_MEMB_EMPN
                    AND A.EVAL_MEMB_EMPN_SEQ = S1.EVAL_MEMB_EMPN_SEQ
                    ),'06') AS ACT_STATUS_ID
                 , (
                    SELECT MAX(S2.RETURN_REASON) 
                    FROM PRS_MNG_TARGET S1 
                    LEFT OUTER JOIN PRS_MNG_ACTUAL S2
                        ON S1.YEAR = S2.YEAR
                        AND S2.MON = #findMon#    
                        AND S1.EVAL_MEMB_EMPN = S2.EVAL_MEMB_EMPN
                        AND S1.EVAL_MEMB_EMPN_SEQ = S2.EVAL_MEMB_EMPN_SEQ
                        AND S1.TARGET_ID = S2.TARGET_ID
                    WHERE A.YEAR = S1.YEAR
                    AND A.EVAL_MEMB_EMPN = S1.EVAL_MEMB_EMPN
                    AND A.EVAL_MEMB_EMPN_SEQ = S1.EVAL_MEMB_EMPN_SEQ
                    ) AS RETURN_REASON
            FROM V_PRS_MNG_MEMBER A
            	INNER JOIN PRS_MNG_ACT_IN_TERM B
	                ON A.YEAR = B.YEAR
	                AND B.MON = #findMon#
	                <!-- 
	                AND TO_CHAR(TO_DATE(A.FROM_DT), 'YYYYMM') <![CDATA[ <= ]]> TO_CHAR(TO_DATE(B.START_DT), 'YYYYMM')
	                AND TO_CHAR(TO_DATE(A.TO_DT), 'YYYYMM') <![CDATA[ >= ]]> TO_CHAR(TO_DATE(B.END_DT), 'YYYYMM')
	                -->
	                <isEqual property="findMon" compareValue="10">
	                AND TO_CHAR(TO_DATE(A.FROM_DT), 'YYYYMM') <![CDATA[ <= ]]> A.YEAR || '01'
	                AND TO_CHAR(TO_DATE(A.TO_DT), 'YYYYMM') <![CDATA[ >= ]]> A.YEAR || '03'
	                </isEqual>
	                <isEqual property="findMon" compareValue="20">
	                AND TO_CHAR(TO_DATE(A.FROM_DT), 'YYYYMM') <![CDATA[ <= ]]> A.YEAR || '04'
	                AND TO_CHAR(TO_DATE(A.TO_DT), 'YYYYMM') <![CDATA[ >= ]]> A.YEAR || '06'
	                </isEqual>
	                <isEqual property="findMon" compareValue="30">
	                AND TO_CHAR(TO_DATE(A.FROM_DT), 'YYYYMM') <![CDATA[ <= ]]> A.YEAR || '07'
	                AND TO_CHAR(TO_DATE(A.TO_DT), 'YYYYMM') <![CDATA[ >= ]]> A.YEAR || '09'
	                </isEqual>
	                <isEqual property="findMon" compareValue="40">
	                AND TO_CHAR(TO_DATE(A.FROM_DT), 'YYYYMM') <![CDATA[ <= ]]> A.YEAR || '10'
	                AND TO_CHAR(TO_DATE(A.TO_DT), 'YYYYMM') <![CDATA[ >= ]]> A.YEAR || '12'
	                </isEqual>
        ) A
        WHERE A.YEAR= #findYear#
          AND A.PRS_YN ='Y'
          AND A.PLAN_YN ='Y'
        <isNotEqual prepend="AND" property="findDeptCd" compareValue="0000">
            A.DEPT_CD IN (
                SELECT DEPT_CD
                FROM BSC_INSA_DEPT
                WHERE YEAR = #findYear#
                START WITH DEPT_CD = #findDeptCd#
                CONNECT BY PRIOR YEAR = YEAR
                AND PRIOR DEPT_CD = UP_DEPT_CD
            )
        </isNotEqual>
        <isNotEqual prepend="AND" property="isAdmin" compareValue="Y">
            A.MANAGER_USER_ID = #loginUserId#
        </isNotEqual>
        <isNotEmpty prepend="AND" property="findActStatusId" >
            A.ACT_STATUS_ID = #findActStatusId#
        </isNotEmpty>
        ORDER BY A.KOR_NM, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ
    </select>

    <!--
    ==================================================================   
      # 설명    : 성과계획서 실적관리 목록 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getActualList" parameterClass="hashMap" resultClass="hashMap">
        SELECT   A.YEAR
                , A.DIRECTION_CD
                , F_CODE_NM('218', A.DIRECTION_CD , A.YEAR) DIRECTION_NM 
                , A.TARGET_ID
                , A.TARGET_NM
                , A.METRIC_NM
                , A.TARGET_VALUE
                , A.UNIT
                , A.WEIGHT
                , C.CODE_NM AS DFFLY_NM
                , ROUND(B.EVAL_SCORE,3) EVAL_SCORE
                , F_CODE_NM('013', A.UNIT , A.YEAR) UNIT_NM 
                , A.Q1_TARGET_VALUE
                , A.Q2_TARGET_VALUE
                , A.Q3_TARGET_VALUE
                , A.Q4_TARGET_VALUE
                , CASE WHEN #findMon# = '10' THEN A.Q1_TARGET_VALUE
                       WHEN #findMon# = '20' THEN A.Q2_TARGET_VALUE
                       WHEN #findMon# = '30' THEN A.Q3_TARGET_VALUE
                       WHEN #findMon# = '40' THEN A.Q4_TARGET_VALUE
                   END AS Q_TARGET_VALUE
                , A.CONTENT
                , B.VALUE, ROUND(B.SCORE, 2) SCORE, B.EVAL_GRADE, B.ACT_STATUS_ID, B.CONTENT
        FROM PRS_MNG_TARGET A
        LEFT OUTER JOIN PRS_MNG_ACTUAL B
            ON A.YEAR = B.YEAR
            AND B.MON = #findMon#    
            AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN
            AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ
            AND A.TARGET_ID = B.TARGET_ID
        LEFT OUTER JOIN BSC_CODE C
        	ON A.DFFLY = C.CODE_ID
        	AND C.CODE_GRP_ID = '231'
        	AND A.YEAR = C.YEAR 
        WHERE A.YEAR = #findYear#
        AND A.EVAL_MEMB_EMPN = #evalMembEmpn#    
        AND A.EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
        ORDER BY A.SORT_ORDER, A.DIRECTION_CD, A.TARGET_ID
    </select>
    
    <!--
    ==================================================================   
      # 설명    : 반려사유조회
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getReturnList" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.YEAR
            , A.EVAL_MEMB_EMPN
            , A.EVAL_MEMB_EMPN_SEQ
            , MAX(A.RETURN_REASON) AS RETURN_REASON
            , MAX(A.ACT_STATUS_ID) AS ACT_STATUS_ID
        FROM PRS_MNG_ACTUAL A
        WHERE A.YEAR              = #findYear#
        AND A.MON                 = #findMon#
        AND A.EVAL_MEMB_EMPN      = #evalMembEmpn#
        AND A.EVAL_MEMB_EMPN_SEQ  = #evalMembEmpnSeq#
        GROUP BY A.YEAR, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ
    </select>

    <!--
    ==================================================================   
      # 설명    : 성과계획서 설적 상태 수정
      #    기능    : UPDATE
      #    TABLE    : 
    ==================================================================
    -->    
    <update id="updateStatusData" parameterClass="hashMap">
        UPDATE PRS_MNG_ACTUAL 
           SET    ACT_STATUS_ID     = #actStatusId#
                , RETURN_REASON     = #returnReason#
                , MODIFY_ID         = #loginUserId#
                , MODIFY_DT         = SYSDATE
           WHERE YEAR               = #year# 
             AND MON                = #mon#
             AND EVAL_MEMB_EMPN     = #evalMembEmpn#
             AND EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
    </update>
    
</sqlMap>