<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="mem.base.memApartEvalGun">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: MEM_EVAL_GUN
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />
	 

	<!--
	==================================================================   
	  # 설명	: 별도평가군관리 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_CODE, MEM_USER, MEM_APART_EVAL_GUN
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		    SELECT
		           A.CODE_ID AS EVAL_EXP_RS_ID
		         , A.CODE_NM AS EVAL_EXP_RS_NM
		         , SUM(COUNT(B.EMP_NO)) OVER(PARTITION BY B.YEAR, B.EVAL_EXP_RS_ID) AS TARGET_COUNT
		         , NVL(C.GRADE_ID, '') AS GRADE_ID
		         , D.GRADE_ITEM_NM AS GRADE_NM
		      FROM BSC_CODE A
		         , MEM_USER B
		         , MEM_APART_EVAL_GUN C
		         , BSC_ECM_GRADE_DISTRI_EVAL_ITEM D
		     WHERE A.CODE_GRP_ID = '242'
		       AND A.DELETE_DT IS NULL
		       AND A.CODE_ID != '99'
		       AND A.CODE_ID = B.EVAL_EXP_RS_ID(+)
		       AND A.YEAR = B.YEAR(+)
		       AND A.YEAR = #findYear#
		       AND A.YEAR = C.YEAR(+)
		       AND A.CODE_ID = C.EVAL_EXP_RS_ID(+)
               AND C.YEAR = D.YEAR
               AND D.EVAL_METHOD_ID= 'G000010'
               AND C.GRADE_ID = D.GRADE_ITEM_ID
		    GROUP BY A.CODE_ID, A.CODE_NM, A.SORT_ORDER, B.YEAR, B.EVAL_EXP_RS_ID, C.GRADE_ID, D.GRADE_ITEM_NM
		    ORDER BY A.SORT_ORDER
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 별도평가군 등급 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_GRADE_DISTRI_EVAL_ITEM
	==================================================================
	-->
	<select id="getEvalGrade" parameterClass="hashMap" resultClass="hashMap">
	    SELECT
	        YEAR,
	        GRADE_ITEM_ID,
	        GRADE_ITEM_NM
	    FROM
	        BSC_ECM_GRADE_DISTRI_EVAL_ITEM          
	    WHERE
	        YEAR= #findYear# /**P*/             
	        AND EVAL_METHOD_ID= 'G000010' /**P*/          
	    ORDER BY
	        SORT_ORDER    
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 별도평가군관리 정렬순서 일괄 저장
	  #	기능	: UPDATE
	  #	TABLE	: MEM_EVAL_GUN
	==================================================================
	-->	
	<update id="allSaveData" parameterClass="hashMap">
	 	 MERGE INTO MEM_APART_EVAL_GUN A
		       USING (SELECT #findYear# YEAR, #evalExpRsId# EVAL_EXP_RS_ID FROM DUAL) B
		          ON (A.YEAR = B.YEAR AND A.EVAL_EXP_RS_ID = B.EVAL_EXP_RS_ID)
		  WHEN MATCHED THEN
		       UPDATE SET 
		              GRADE_ID = #grade#
		  WHEN NOT MATCHED THEN
		       INSERT (
		              YEAR
		            , EVAL_EXP_RS_ID
		            , GRADE_ID
		            , CREATE_DT
		       ) VALUES (
		              #findYear#
		            , #evalExpRsId#
		            , #grade#
		            , SYSDATE
		       )	
	</update>	
	
    <!--
    ==================================================================
      # 설명    : 평가군대상자목록
      #    기능    : SELECT
      #    TABLE    : MEM_USER
    ==================================================================
    -->
    <select id="getApartEvalGunUserList" parameterClass="hashMap" resultClass="hashMap">
        SELECT
		      A.YEAR
		    , A.EMP_NO
		    , A.EMP_NM
		    , A.DEPT_CD
		    , F_DEPT_LEV2_NM(A.YEAR, A.DEPT_CD) AS DEPT_KOR_NM
		    , F_CODE_NM('170', A.CAST_TC , A.YEAR) CAST_TC_NM 
		    , F_CODE_NM('171', A.POS_TC , A.YEAR) POS_TC_NM 
		FROM MEM_USER A
		    INNER JOIN BSC_INSA_DEPT B
		        ON A.YEAR = B.YEAR
		        AND A.DEPT_CD = B.DEPT_CD
		WHERE A.YEAR = #findYear#
		  AND A.EVAL_EXP_RS_ID = #findEvalExpRsId#
    </select>
	
	<!--
	==================================================================
	  # 설명	: 사용자정보 조회
	  #	기능	: SELECT
	  #	TABLE	: V_ROLE_USER
	==================================================================
	-->
	<select id="selectUserList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.EMP_NO AS USER_ID
	         , A.EMP_NM AS USER_NM
	         , A.DEPT_CD AS DEPT_ID
	         , F_DEPT_LEV2_NM(V_YEAR VARCHAR2, A.DEPT_CD) AS DEPT_NMA.DEPT_NM
	         , A.CAST_TC AS JIKGUB_CD
	         , F_CODE_NM('170', A.CAST_TC , A.YEAR) AS JIKGUB_NM 
	         , A.POS_TC AS POS_CD
			 , F_CODE_NM('171', A.POS_TC , A.YEAR) AS POS_NM 
	         , '' AS EMAIL
		 FROM MEM_USER A
		WHERE 1=1
		  AND A.YEAR = #findYear#
		<isNotEmpty prepend="AND" property="userNm">
             UPPER(A.EMP_NM) LIKE  '%' || TRIM(UPPER(#userNm#)) ||'%'
		</isNotEmpty>
		<isEmpty prepend="AND" property="userNm">
			 A.DEPT_CD = #deptId#
			<!--  A.DEPT_ID = SUBSTR(#deptId#, 2) -->
		</isEmpty>
		AND A.EMP_NO NOT IN (SELECT EMP_NO FROM MEM_USER WHERE YEAR = #findYear# AND EVAL_EXP_RS_ID = #findEvalExpRsId#)
		ORDER BY A.EMP_NM
	</select>

	<!--
	==================================================================   
	  # 설명	: 평가자별 평가제출 여부 수정
	  #	기능	: UPDATE
	  #	TABLE	: MEM_USER
	==================================================================
	-->	
	<update id="updateEvalExpRsId" parameterClass="hashMap">
		UPDATE MEM_USER
		   SET EVAL_TGT_YN = 'N'
		     , EVAL_EXP_RS_ID   = #findEvalExpRsId#
             , MODIFY_DT        = SYSDATE
         WHERE YEAR             = #findYear#
           AND EMP_NO           = #empNo#
	</update>
</sqlMap>