<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="prs.evalCon.evalConMileage">

    <!--
    ==================================================================   
      # 설명    : typeAlias 선언
      #    기능    : SETTING
      #    TABLE    : 
    ==================================================================
    -->
    <typeAlias alias="hashMap"             type="java.util.HashMap" />
     

    <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 마일리지관리 목록 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getList" parameterClass="hashMap" resultClass="hashMap">
      SELECT YEAR
			, EMPN
			, KOR_NM
			, DEPT_CD
			, DEPT_KOR_NM
			, GRADE
			, MILEAGE
			, MILEAGE2
			, (NVL(MILEAGE,0) + NVL(MILEAGE2,0)) AS SUM_MILEAGE
			, (USE_MILEAGE + FINAL_MILEAGE) AS TOTAL_MILEAGE
			, USE_MILEAGE
			, FINAL_MILEAGE
	FROM (  SELECT A.YEAR
				 , A.EMPN
				 , E.USER_NM AS KOR_NM
				 , NVL(C.DEPT_CD, E.DEPT_ID) AS DEPT_CD
				 , F_DEPT_FULL_NM(#findYear#, NVL(C.DEPT_CD, E.DEPT_ID),'BSC_INSA_DEPT') DEPT_KOR_NM
				 , A.GRADE
                 , A.MILEAGE
                 , Z.MILEAGE AS MILEAGE2
				 , B.FINAL_MILEAGE
				 , CASE WHEN B1.GUBUN = 'U' THEN SUM(B1.MILEAGE) ELSE 0 END  USE_MILEAGE
			FROM CON_EMP_MILEAGE A
			LEFT OUTER JOIN CON_EMP_MILEAGE Z
              ON Z.YEAR = A.YEAR -1
             AND Z.EMPN = A.EMPN
		    LEFT OUTER JOIN  ( SELECT FINAL_MILEAGE , EMPN , MILEAGE_NO FROM CON_EMP_MILEAGE_USE
                           		WHERE EMPN IN ( SELECT EMPN FROM CON_EMP_MILEAGE_USE
                                      			WHERE EMPN IN  (SELECT EMPN FROM  CON_EMP_MILEAGE WHERE YEAR =#findYear#)
                                    			) ) B ON A.EMPN = B.EMPN
            INNER JOIN  ( SELECT EMPN , MAX (MILEAGE_NO) AS MILEAGE_NO FROM CON_EMP_MILEAGE_USE
                                                  WHERE EMPN IN (SELECT EMPN FROM  CON_EMP_MILEAGE WHERE YEAR =#findYear#)
                                               GROUP BY EMPN) D ON B.EMPN = D.EMPN AND B.MILEAGE_NO = D.MILEAGE_NO
			LEFT OUTER JOIN CON_EMP_MILEAGE_USE B1 ON A.EMPN = B1.EMPN AND B1.GUBUN = 'U'
			LEFT OUTER JOIN  CON_EMP_MEMBER C ON A.YEAR = C.YEAR AND A.EMPN  = C.EMPN
            LEFT OUTER JOIN V_ROLE_USER E ON A.EMPN = E.SABUN
			WHERE A.YEAR = #findYear#
			<isNotEqual prepend="AND" property="findDeptCd" compareValue="0000"> 
			 C.DEPT_CD = #findDeptCd#
			 </isNotEqual> 
			GROUP BY A.YEAR, A.EMPN, C.KOR_NM, E.USER_NM, C.DEPT_CD,E.DEPT_ID, A.GRADE, A.MILEAGE,Z.MILEAGE, B1.GUBUN,B.FINAL_MILEAGE
		)
		WHERE 1=1
		<isNotEmpty property="findEmpnNameText">
			<isEqual prepend="AND" property="findNameEmpn" compareValue="findEmpn">
				EMPN LIKE '%' || #findEmpnNameText# ||'%'
			</isEqual>
			<isEqual prepend="AND" property="findNameEmpn" compareValue="findName">
				KOR_NM LIKE '%' || #findEmpnNameText# ||'%'
			</isEqual>
		</isNotEmpty>
		<isNotEqual prepend="AND" property="adminYn" compareValue="Y"> 
			 EMPN = #sabun#
		 </isNotEqual> 
		ORDER BY KOR_NM
    </select>
    
    <!--
	==================================================================   
	  # 설명	: 마일리지 부여 입력(평가제외자 포함)
	  #	기능	: INSERT
	  #	TABLE	: EVAL_CON_MILEAGE
	==================================================================
	-->	
	<insert id="insertMileage" parameterClass="hashMap">
		CALL KGS_MILEAGE.EVAL_CON_MILEAGE(#year#)
	</insert>
	
	 <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 마일리지 부여시 가져오는 평가자
      #    기능    : SELECT
      #    TABLE    : CON_EMP_MILEAGE
    ==================================================================
    -->
    <select id="getEmpn" parameterClass="hashMap" resultClass="hashMap">
	    SELECT EMPN FROM CON_EMP_MILEAGE
	    WHERE YEAR = #year#
	    ORDER BY EMPN
	</select>
	
     <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 마일리지관리 등록
      #    기능    : INSERT
      #    TABLE    : 
      
    ==================================================================
    -->    
    <insert id="insertMileageAddData" parameterClass="hashMap">
     <selectKey resultClass="java.lang.String" keyProperty="SEQ" >
			 SELECT NVL(MAX(MILEAGE_NO),0)+1  FROM CON_EMP_MILEAGE_USE WHERE EMPN = #empn#
		</selectKey> 
  			CALL KGS_MILEAGE.EVAL_CON_MILEAGEUSE(#SEQ# , #empn#)
    </insert>

    <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 마일리지관리 상세 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getDetailList" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.MILEAGE_NO
             , A.EMPN
             , A.REWARD_CD
             , A.MILEAGE
             , A.GUBUN
             , CASE WHEN A.CONTENT IS NULL THEN B.CODE_NM ELSE A.CONTENT END CONTENT
             , USE_YEAR AS YEAR
             , B.ETC2 AS GUBUN_NM
             , A.FINAL_MILEAGE    
          FROM  CON_EMP_MILEAGE_USE A
          LEFT OUTER JOIN BSC_CODE B ON  A.REWARD_CD = B.CODE_ID AND B.CODE_GRP_ID ='227'
        WHERE 1 = 1 
        AND EMPN = #findEmpn#   
        ORDER BY MILEAGE_NO
        
    </select>
    
    <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 마일리지관리 상세 보기(잔여 마일리지 조회)
      #    기능    : SELECT
      #    TABLE    : CON_EMP_MILEAGE_USE
	    SELECT A.FINAL_MILEAGE FROM CON_EMP_MILEAGE_USE A 
	    WHERE A.EMPN = #empn#  AND A.MILEAGE_NO IN (SELECT MAX(MILEAGE_NO) FROM CON_EMP_MILEAGE_USE WHERE EMPN = #empn#   )
    ==================================================================
    -->
    <select id="getFinalMileage" parameterClass="hashMap" resultClass="java.lang.String">
    SELECT SUM(CASE WHEN GUBUN = 'S' THEN MILEAGE ELSE 0 END) - SUM(CASE WHEN GUBUN = 'U' THEN MILEAGE ELSE 0 END) MILEAGE
		FROM CON_EMP_MILEAGE_USE A
		 WHERE A.EMPN =  #empn#  
    </select>
	
	<!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 마일리지관리 상세 보기(잔여 마일리지 조회)
      #    기능    : SELECT
      #    TABLE    : CON_EMP_MILEAGE_USE
	    SELECT A.FINAL_MILEAGE FROM CON_EMP_MILEAGE_USE A 
	    WHERE A.EMPN = #empn#  AND A.MILEAGE_NO IN (SELECT MAX(MILEAGE_NO) FROM CON_EMP_MILEAGE_USE WHERE EMPN = #empn#   )
    ==================================================================
    -->
    <select id="getFinalMileage2" parameterClass="hashMap" resultClass="java.lang.Integer">
    SELECT NVL(SUM(CASE WHEN GUBUN = 'S' THEN MILEAGE ELSE 0 END) - SUM(CASE WHEN GUBUN = 'U' THEN MILEAGE ELSE 0 END),0) MILEAGE
		FROM CON_EMP_MILEAGE_USE A
		 WHERE A.EMPN =  #empn#  
    </select>
    
	<!--
	==================================================================   
	  # 설명	: 마일리지이력항목 a-jax
	  #	기능	: SELECT
	  #	TABLE	: BSC_CODE
	==================================================================
	-->
	<select id="getGubunId" parameterClass="hashMap" resultClass="hashMap">
		SELECT ETC1 AS GUBUN_ID 
			 , ETC2 AS GUBUN_NM
			 , CODE_NM AS CONTENT 
		FROM BSC_CODE WHERE CODE_GRP_ID = '227' AND CODE_ID = #rewardCd#
	</select>
    
    <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 마일리지관리 상세 조회 (사용하지 않음.)
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.MILEAGE_NO
             , A.EMPN
             , A.REWARD_CD
             , A.MILEAGE
             , A.GUBUN
       		 , CASE WHEN A.CONTENT IS NULL THEN B.CODE_NM ELSE A.CONTENT END CONTENT
       		 , A.FINAL_MILEAGE
      		  FROM  CON_EMP_MILEAGE_USE A
         LEFT OUTER JOIN BSC_CODE B ON  A.REWARD_CD = B.CODE_ID AND B.CODE_GRP_ID ='227'
       WHERE 1 = 1 
        AND A.EMPN = #empn# 
        AND A.MILEAGE_NO = #mileageNo#
    </select>
    
    <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 마일리지 이력관리 등록
      #    기능    : INSERT
      #    TABLE    : 
    ==================================================================
    -->    
    <insert id="insertData" parameterClass="hashMap">
    <selectKey resultClass="java.lang.String" keyProperty="SEQ" >
			 SELECT NVL(MAX(MILEAGE_NO),0)+1  FROM CON_EMP_MILEAGE_USE WHERE EMPN = #empn#
		</selectKey> 
    INSERT INTO CON_EMP_MILEAGE_USE(
    						  MILEAGE_NO
							, EMPN
							, REWARD_CD
							, MILEAGE
							, CONTENT
							, CREATE_DT
							, USE_YEAR
							, GUBUN
							, FINAL_MILEAGE
							)
    			VALUES(
    			  #SEQ#
    			, #empn#
    			, #rewardCd#
    			, #mileage#
    			, #content#
    			, SYSDATE
    			, #useYear#
    			, #gubunId#
    			, #total#
    			)
    </insert>
    
    <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 마일리지 이력 삭제
      #    기능    : UPDATE
      #    TABLE    : 
    ==================================================================
    -->    
    <update id="deleteMileageUse" parameterClass="hashMap">
        DELETE FROM  CON_EMP_MILEAGE_USE
         WHERE 1 = 1 
         AND EMPN = #empn#
         AND MILEAGE_NO = #mileageNo#

    </update>
    
    <!--
    ==================================================================   
      # 설명    : 직원개인기여도평가 최종 마일리지 수정
      #    기능    : UPDATE
      #    TABLE    : 
    ==================================================================
    -->    
    <update id="updateMileageUse" parameterClass="hashMap">
        UPDATE CON_EMP_MILEAGE_USE A SET
		      FINAL_MILEAGE = (SELECT 
		      						FINAL_MILEAGE 
		      						+ (SELECT 
		      								CASE WHEN GUBUN = 'S' THEN MILEAGE * -1 
		      									ELSE MILEAGE 
		      								END 
		      							FROM CON_EMP_MILEAGE_USE 
		      							WHERE MILEAGE_NO = #mileageNo# 
		      							AND EMPN = #empn#) 
		      				   FROM CON_EMP_MILEAGE_USE 
		      				   WHERE EMPN = A.EMPN 
		      				     AND MILEAGE_NO = A.MILEAGE_NO
		      				  )
		WHERE EMPN = #empn#
		  AND MILEAGE_NO >= #mileageNo#
    </update>
    
    <!--
	==================================================================
	  # 설명	: 사용자정보 조회
	  #	기능	: SELECT
	  #	TABLE	: V_ROLE_USER
	==================================================================
	-->
	<select id="selectUserList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.USER_ID
	         , A.USER_NM
	         , A.DEPT_ID
	         , A.DEPT_NM
	         , A.JIKGUB_CD
	         , A.JIKGUB_NM
	         , A.POS_CD
	         , A.POS_NM
	         , A.EMAIL
	         , (SELECT SUM(CASE 
			               WHEN GUBUN = 'S' THEN MILEAGE 
			               ELSE 0 
			                END) - SUM(CASE WHEN GUBUN = 'U' THEN MILEAGE 
			                           ELSE 0 
			                            END
			                           ) MILEAGE   
			       FROM CON_EMP_MILEAGE_USE    
			      WHERE
			       EMPN =   A.USER_ID ) AS TOTAL
		 FROM V_ROLE_USER A
		WHERE 1=1
		  AND A.USER_ID IN (SELECT EMPN FROM CON_EMP_MILEAGE WHERE YEAR = #findYear#)
		<isNotEmpty prepend="AND" property="userNm">
             UPPER(A.USER_NM) LIKE  '%' || TRIM(UPPER(#userNm#)) ||'%'
		</isNotEmpty>
		<!-- 
		<isNotEqual prepend="AND" property="deptId" compareValue="0000"> 
		 A.DEPT_CD = #deptId#
		</isNotEqual> 
		-->
		<isEmpty prepend="AND" property="userNm">
			 A.DEPT_ID = #deptId#
			<!--  A.DEPT_ID = SUBSTR(#deptId#, 2) -->
		</isEmpty>
		ORDER BY A.USER_NM
	</select>
    
</sqlMap>


