<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="cbe.exc.excEvalUser">

	<!--
	==================================================================
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />

	<!--
	==================================================================
	  # 설명	: 별도평가대상자 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->
	<select id="evalUserList" parameterClass="hashMap" resultClass="hashMap">
			<!-- SELECT A.YEAR
				 , A.EMPN
				 , B.KOR_NM
				 , B.DEPT_CD
				 , C.DEPT_KOR_NM
				 , A.EVAL_DEGREE_ID
	    	  FROM BSC_EXC_EVAL_USER A
   LEFT OUTER JOIN BSC_INSA B
	    		ON A.EMPN = B.EMPN AND A.YEAR = B.YEAR
   LEFT OUTER JOIN BSC_INSA_DEPT C
	    		ON B.DEPT_CD = C.DEPT_CD AND A.YEAR = C.YEAR
	         WHERE YEAR = #findYear# -->
	         SELECT EMPN, SC_DEPT_ID, SC_DEPT_NM, KOR_NM, DEPT_CD, DEPT_KOR_NM, EVAL_DEGREE_ID, CAST_TC_NM, POS_TC_NM, ROWN, END_PCMT_DATE, NVL(RPT_YN, 'N') RPT_YN  FROM (
					SELECT A.YEAR
					                 , A.EMPN
					                 , A.SC_DEPT_ID
					                 , B.KOR_NM
					                 , A.RPT_YN
					                 , B.DEPT_CD
					                 , F_DEPT_FULL_NM (#findYear#, A.SC_DEPT_ID, 'BSC_SC_DEPT') SC_DEPT_NM
					                 , F_DEPT_FULL_NM(#findYear#, B.DEPT_CD, 'BSC_INSA_DEPT') DEPT_KOR_NM
					                 , A.EVAL_DEGREE_ID
					                 , (SELECT CODE_NM FROM BSC_CODE WHERE YEAR = A.YEAR AND CODE_GRP_ID = '170' AND CODE_ID = B.CAST_TC ) CAST_TC_NM
					                 , ( SELECT CODE_NM FROM BSC_CODE WHERE YEAR = A.YEAR AND CODE_GRP_ID = '171' AND CODE_ID = B.POS_TC ) POS_TC_NM
					                 , ROW_NUMBER() OVER (PARTITION BY A.EMPN ORDER BY B.EMPN, B.END_PCMT_DATE DESC) ROWN
					                 , END_PCMT_DATE
					              FROM BSC_EXC_EVAL_USER A
					   LEFT OUTER JOIN BSC_INSA_PCMT B
					                ON A.EMPN = B.EMPN AND A.YEAR = B.YEAR
					   LEFT OUTER JOIN BSC_INSA_DEPT C
					                ON B.DEPT_CD = C.DEPT_CD AND A.YEAR = C.YEAR
					             WHERE YEAR = #findYear#
					             AND A.EXC_CODE IS NULL
					               )
					               WHERE ROWN = '1'
					               ORDER BY DEPT_CD, EMPN

    </select>

    <!--
	==================================================================
	  # 설명	: 별도평가대상자 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_EXC_EVAL_USER
	  # 기존소스 :
	  SELECT EVAL_METHOD_ID, EVAL_METHOD_NM
		  FROM BSC_ECM_EVAL_GRADE_CONVERT_TAB
		 WHERE YEAR = #year# AND DELETE_DT IS NULL
	==================================================================
	-->
	<select id="getEvalMethod" parameterClass="hashMap" resultClass="hashMap">

			SELECT A.YEAR AS YEAR
				 , A.EMPN AS EMPN
				 , B.KOR_NM AS KOR_NM
				 , B.DEPT_CD AS DEPT_CD
				 , C.DEPT_KOR_NM AS DEPT_KORS_NM
				 , NVL(A.RPT_YN, 'N') RPT_YN
			  FROM BSC_EXC_EVAL_USER A
   LEFT OUTER JOIN BSC_INSA B
			    ON A.EMPN = B.EMPN
			    AND A.YEAR = B.YEAR
   LEFT OUTER JOIN BSC_INSA_DEPT C
			    ON B.DEPT_CD = C.DEPT_CD
			    AND B.YEAR = C.YEAR
			 WHERE 1 = 1
			   AND A.EMPN = #empn#

    </select>
	<!--
	==================================================================
	  # 설명	: 별도평가부서 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_EXC_EVAL_DEPT
	==================================================================
	-->

	<select id="getExcDeptList" parameterClass="hashMap" resultClass="hashMap">
		  SELECT A.YEAR
		       , A.EVAL_DEGREE_ID
		       , A.SC_DEPT_ID
		       , F_DEPT_FULL_NM (A.YEAR, A.SC_DEPT_ID, 'BSC_SC_DEPT') SC_DEPT_NM
		    FROM BSC_EXC_EVAL_DEPT A
		    LEFT OUTER JOIN  BSC_SC_DEPT_MAPPING B
        		ON A.YEAR = B.YEAR
        		AND A.SC_DEPT_ID = B.SC_DEPT_ID
		   	WHERE A.YEAR = #findYear#
		    AND A.EVAL_DEGREE_ID = #evalDegreeId#
			ORDER BY A.SC_DEPT_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 평가실시 목록 보기 (사용하지 않습니다.)
	  #	기능	: SELECT
	  #	TABLE	: BSC_SPE_EVAL_DEPT
	==================================================================
	-->
	<select id="evalDegreeList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR,
               A.EVAL_DEGREE_ID,
               A.SC_DEPT_ID,
               B.SC_DEPT_NM,
               A.EVAL_USER_ID,
               A.EVAL_METHOD_ID,
               (SELECT USER_NM FROM V_ROLE_USER WHERE USER_ID=A.EVAL_USER_ID) EVAL_USER_NM,
               NVL(A.EVAL_SUBMIT_YN,'N') EVAL_SUBMIT_YN
         FROM BSC_SPE_EVAL_DEPT A
         INNER JOIN(
                     SELECT YEAR,
                            SC_DEPT_ID,
                            SUBSTR(SYS_CONNECT_BY_PATH(SC_DEPT_NM,'>'),2, length(SYS_CONNECT_BY_PATH(SC_DEPT_NM,'>')))SC_DEPT_NM
                       FROM ( SELECT * FROM BSC_SC_DEPT WHERE YEAR = #findYear#)
                      WHERE DELETE_DT IS NULL
                      START WITH UP_SC_DEPT_ID IS NULL
                      CONNECT BY PRIOR SC_DEPT_ID = UP_SC_DEPT_ID) B ON A.YEAR=B.YEAR AND A.SC_DEPT_ID=B.SC_DEPT_ID
         LEFT OUTER JOIN BSC_ECM_EVAL_GRADE_CONVERT_TAB C ON A.YEAR=C.YEAR AND A.EVAL_METHOD_ID=C.EVAL_METHOD_ID
        WHERE A.YEAR=#findYear#
          AND A.EVAL_DEGREE_ID=#findEvalDegreeId#
          <isNotEmpty property="findEvalUserId" prepend="AND">
       			A.EVAL_USER_ID = #findEvalUserId#
       	  </isNotEmpty>
        ORDER BY A.SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 평가대상자 중복여부 확인
	  #	기능	: SELECT
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->
	<select id="evalExistUserList" parameterClass="hashMap" resultClass="java.lang.Integer">
			SELECT COUNT(1) AS CNT
	    	  FROM BSC_EXC_EVAL_USER
	         WHERE YEAR = #year#
	           AND EMPN = #excUserId#
	           AND EVAL_DEGREE_ID = #evalDegreeId#
    </select>

    <!--
	==================================================================
	  # 설명	: 권한 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->
	<update id="deleteAdminData" parameterClass="hashMap">
		DELETE FROM BSC_ADMIN
         WHERE ADMIN_GUBUN ='50'
         AND USER_ID = #excUserId#
	</update>

    <!--
	==================================================================
	  # 설명	: 권한 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->
	<update id="deleteAdminDataUpdate" parameterClass="hashMap">
		DELETE FROM BSC_ADMIN
         WHERE ADMIN_GUBUN ='50'
         AND USER_ID = #empn#
	</update>

	<!--
	==================================================================
	  # 설명	: 권한 삭제 (checkBox 선택 후, 삭제 시 사용합니다.)
	  #	기능	: DELETE
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->
	<update id="deleteAdminsData" parameterClass="hashMap">
		DELETE FROM BSC_ADMIN
         WHERE ADMIN_GUBUN ='50'
         AND USER_ID = #empnIds#
	</update>

	<!--
	==================================================================
	  # 설명	: 권한 삭제 (별도평가대상자 가져오기 시 사용합니다.)
	  #	기능	: DELETE
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->
	<update id="deleteAllAdminsData" parameterClass="hashMap">
		DELETE FROM BSC_ADMIN
         WHERE ADMIN_GUBUN ='50'

	</update>

	<!--
	==================================================================
	  # 설명	: 권한 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->
	<insert id="insertAdminBaseData" parameterClass="hashMap">
		INSERT INTO BSC_ADMIN (
					ADMIN_GUBUN
				  , USER_ID
				  )VALUES(
				  	'50'
				  , #excUserId#
        		  )
	</insert>

	<!--
	==================================================================
	  # 설명	: 권한 등록 (별도평가대상자 가져오기 시 사용합니다.)
	  #	기능	: INSERT
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->
	<insert id="insertAllAdminData" parameterClass="hashMap">
		INSERT INTO BSC_ADMIN (ADMIN_GUBUN, USER_ID)
			SELECT DISTINCT '50'
		    	   , EMPN
		      FROM BSC_EXC_EVAL_USER
		     WHERE YEAR = #year#
		     AND EXC_CODE IS NULL
	</insert>

	<!--
	==================================================================
	  # 설명	: 권한 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->
	<insert id="insertAdminBaseDataUpdate" parameterClass="hashMap">
		INSERT INTO BSC_ADMIN (
					ADMIN_GUBUN
				  , USER_ID
				  )VALUES(
				  	'50'
				  , #excUserId#
        		  )
	</insert>

	<!--
	==================================================================
	  # 설명	: 권한 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->
	<insert id="updateAdminBaseData" parameterClass="hashMap">
		UPDATE BSC_ADMIN SET
				   ADMIN_GUBUN = '50'
				 , USER_ID = #excUserId#
			 WHERE 1=1
			   AND USER_ID = #empn#
	</insert>

	<!--
	==================================================================
	  # 설명	: 별도평가 대상자 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->
	<insert id="insertData" parameterClass="hashMap">
		INSERT INTO BSC_EXC_EVAL_USER (
   					YEAR
   				  , EVAL_DEGREE_ID
   				  , EMPN
   				  , EVAL_METHOD_ID
   				  , GRADE_ITEM_ID
   				  , EVAL_SUBMIT_YN
   				  , CREATE_DT
   				  , SC_DEPT_ID
   				  , EXC_CODE
   				  , RPT_YN
   				  ) VALUES (
   				  	#year#
   				  , #evalDegreeId#
   				  , #excUserId#
   				  , #evalMethodId#
   				  , null
   				  , null
   				  , SYSDATE
   				  , #scDeptId#
   				  , null
   				  , #rptYn#)
	</insert>

	<!--
	==================================================================
	  # 설명	: 별도평가대상자 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->
	<update id="updateData" parameterClass="hashMap">
		UPDATE BSC_EXC_EVAL_USER
		   SET
		   	   EMPN          	= #excUserId#,
		       EVAL_METHOD_ID   = #evalMethodId#,
		       SC_DEPT_ID		= #scDeptId#,
		       RPT_YN			= #rptYn#,
		       MODIFY_DT        = SYSDATE
		 WHERE 1 = 1
		   AND YEAR = #year#
		   AND EMPN = #empn#
	</update>


	<!--
	==================================================================
	  # 설명	: 별도평가대상자 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->
	<update id="deleteData" parameterClass="hashMap">
		DELETE FROM BSC_EXC_EVAL_USER
		 WHERE 1 = 1
		    AND YEAR = #year#
		    AND EVAL_DEGREE_ID = #evalDegreeIds#
		    AND EMPN = #empnIds#
	</update>

	<!--
	==================================================================
	  # 설명	: 별도평가대상자 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->
	<delete id="deleteUserData" parameterClass="hashMap">
		DELETE FROM BSC_EXC_EVAL_USER
		 WHERE 1 = 1
		    AND YEAR = #year#
		    AND EXC_CODE IS NULL
	</delete>

	<!--
	==================================================================
	  # 설명	: 별도평가대상자 가져오기 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->
	<insert id="insertUserWorkData" parameterClass="hashMap">
		INSERT INTO BSC_EXC_EVAL_USER (YEAR, EVAL_DEGREE_ID, GRADE_ITEM_ID, EMPN, CREATE_DT)
			 SELECT A.YEAR,
			       #evalDegreeId#,
			       'D',
			       A.EMPN,
			       SYSDATE,
			  FROM (SELECT YEAR, EMPN, WORK_MON
			          FROM (  SELECT YEAR, EMPN, SUM (WORK_MON) WORK_MON
			                    FROM V_PRS_RE_MON
			                   WHERE YEAR = #findYear#
			                     AND EMPN NOT IN (SELECT EMPN FROM BSC_INSA_PCMT WHERE YEAR = #findYear# AND PCMT_TC IN ( '81','82','83','84','85','86','89','8H','8I') )
			                GROUP BY YEAR, EMPN
			                ORDER BY WORK_MON)
			         WHERE WORK_MON <![CDATA[<]]> 3) A
			       LEFT OUTER JOIN BSC_INSA B
			          ON A.YEAR = B.YEAR AND A.EMPN = B.EMPN
			       LEFT OUTER JOIN BSC_DEPTINFO C
			          ON B.DEPT_CD = C.DEPT_ID
			       LEFT OUTER JOIN BSC_CODE D
			          ON     B.POS_TC = D.CODE_ID
			             AND D.CODE_GRP_ID = '171'
			             AND B.YEAR = D.YEAR
			WHERE POS_TC NOT IN ( '17', '25', '33', '43', '54', '64')
			AND WORK_MON <![CDATA[<>]]> 0
	</insert>

	<!--
	==================================================================
	  # 설명	: 별도평가대상자 가져오기 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->
	<insert id="insertUserDirData" parameterClass="hashMap">
		INSERT INTO BSC_EXC_EVAL_USER (YEAR, EVAL_DEGREE_ID, GRADE_ITEM_ID, EMPN, CREATE_DT)
			  SELECT A.YEAR, #evalDegreeId#, 'B', A.EMPN, SYSDATE
            	FROM BSC_INSA A
			   WHERE A.POS_TC IN ( '17', '25', '33', '43', '54', '64')
				 AND YEAR = #findYear#
	</insert>

	<!--
	==================================================================
	  # 설명	: 별도평가대상자 가져오기 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->
	<insert id="insertUserData" parameterClass="hashMap">
		INSERT INTO BSC_EXC_EVAL_USER (YEAR, EVAL_DEGREE_ID, EMPN, CREATE_DT, SC_DEPT_ID, RPT_YN)
			  SELECT   YEAR,
				       #evalDegreeId#,
				       EMPN,
				       SYSDATE,
				       SC_DEPT_ID,
				       'N'
				  FROM (SELECT YEAR,
				               EMPN,
				               KOR_NM,
				               DEPT_CD,
				               DEPT_KOR_NM,
				               CAST_TC,
				               POS_TC,
				               WORK_MON,
				               PCMT_TC,
				               SC_DEPT_ID,
				               ROW_NUMBER ()
				                  OVER (PARTITION BY A.EMPN ORDER BY EMPN, END_PCMT_DATE DESC)
				                  ROWN,
				               B.OULEVEL,
				               CASE OULEVEL
				                  WHEN 1
				                  THEN
				                     CASE
				                        WHEN POS_TC IN
				                                ('12',
				                                 '21',
				                                 '31',
				                                 '1C',
				                                 '2C',
				                                 '39',
				                                 '1C',
				                                 '2C')
				                        THEN
				                           'Y'
				                        ELSE
				                           'N'
				                     END
				                  WHEN 2
				                  THEN
				                     CASE WHEN POS_TC IN ('22', '32') THEN 'Y' ELSE 'N' END
				               END
				                  YN
				          FROM    BSC_INSA_PCMT A
				               LEFT OUTER JOIN
				                  BSC_DEPTINFO B
				               ON A.DEPT_CD = B.DEPT_ID
				               LEFT OUTER JOIN BSC_SC_DEPT_MAPPING C
                               ON A.YEAR = C.YEAR
                               AND A.DEPT_CD = C.DEPT_ID
                               LEFT OUTER JOIN  BSC_EXC_EVAL_DEPT D
                               ON C.YEAR = D.YEAR
                               AND C.SC_DEPT_ID = D.SC_DEPT_ID
				         WHERE DEPT_CD IN
				                  (SELECT DEPT_ID
				                     FROM BSC_DEPTINFO
				                    WHERE DEPT_ID IN
				                             (SELECT DEPT_ID
				                                FROM BSC_SC_DEPT_MAPPING
				                               WHERE SC_DEPT_ID IN
				                                        (SELECT SC_DEPT_ID
				                                           FROM BSC_EXC_EVAL_DEPT
				                                          WHERE YEAR = #findYear#
				                                                AND EVAL_DEGREE_ID =
				                                                       'ECD0001')
				                                     AND YEAR = #findYear#))
				               AND CAST_TC<![CDATA[ < 40
				               AND PCMT_TC NOT IN ( '81','82','83','84','85','86','89','8H','8I')
				               AND WORK_MON >]]> 0
				               and year = #findYear#)
				 WHERE ROWN = 1 AND YN = 'Y' AND YEAR = #findYear#
	</insert>

	<!--
	==================================================================
	  # 설명	: 별도평가부서 확정 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_EXC_SUBMIT
	==================================================================
	-->
	<insert id="insertDeptYnData" parameterClass="hashMap">
		MERGE INTO BSC_EXC_SUBMIT A
        USING DUAL
           ON (A.YEAR = #year# )
         WHEN MATCHED THEN
                UPDATE SET A.USER_YN = #userYn#, A.MODIFY_DT = SYSDATE
         WHEN NOT MATCHED THEN
                INSERT (YEAR, USER_YN, CREATE_DT)
                VALUES (#year#, #userYn#, SYSDATE)
	</insert>

</sqlMap>


