<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="bsc.mon.main">

	<!--
	==================================================================
	  # 설명		: typeAlias 선언
	  #	기능		: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />


	<!--
	==================================================================
	  # 설명	: 성과비율 목록
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getSignalRate" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR,
			   CODE_ID AS STATUS,
               NVL(B.CNT, 0) AS COUNT,
               TO_CHAR(NVL(B.CNT, 0) /(SELECT COUNT(METRIC_ID) FROM BSC_METRICSCORE WHERE YEAR = #year# AND MON = #mon# AND ANAL_CYCLE = #analCycle# AND SC_DEPT_ID = #scDeptId#) * 100) AS RATE
		FROM (
			SELECT	YEAR,
					CODE_ID,
					SORT_ORDER
			FROM BSC_CODE
			WHERE YEAR = #year#
				AND CODE_GRP_ID='021'
			UNION ALL
			SELECT #year#,
				   '_',
				    100
		    FROM DUAL) A
	    		LEFT OUTER JOIN (
		    		SELECT  STATUS,
		    				COUNT(STATUS) CNT
    				FROM (SELECT NVL(STATUS,'_') AS STATUS
		                  FROM BSC_METRICSCORE
		                  WHERE YEAR = #year#
		                  	AND MON = #mon#
		                  	AND ANAL_CYCLE = #analCycle#
		                  	AND SC_DEPT_ID = #scDeptId#)
		                 GROUP BY STATUS
            ) B ON A.CODE_ID=B.STATUS
        WHERE B.CNT IS NOT NULL
        ORDER BY A.SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 조직성과점수
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getDeptScore" parameterClass="hashMap" resultClass="String">
		SELECT TO_CHAR(NVL(A.SCORE, 0)) AS SCORE
		  FROM BSC_DEPTSCORE A
		 WHERE A.YEAR = #year#
	       AND A.MON = #mon#
		   AND A.ANAL_CYCLE = #analCycle#
		   AND A.SC_DEPT_ID = #scDeptId#
	</select>

	<!--
	==================================================================
	  # 설명	: 비교조직 저장 유무 확인
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getViewYn" parameterClass="hashMap" resultClass="String">
		SELECT CASE WHEN COUNT(SC_DEPT_ID)>0
        	THEN 'Y' ELSE 'N' END VIEW_YN
        FROM BSC_USER_DEPT
        WHERE YEAR = #year#
        	AND USER_ID = #userId#
	</select>

	<!--
	==================================================================
	  # 설명	: 전 성과조직 목록
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getCompareDeptList" parameterClass="hashMap" resultClass="hashMap">
		SELECT     A.SC_DEPT_ID AS CODE_ID
		         , A.SC_DEPT_NM AS CODE_NM
		         , A.UP_SC_DEPT_ID AS UP_CODE_ID
		         , LEVEL AS LEVEL_ID
		         , A.LEVEL_ID || '^' || A.SC_DEPT_GRP_ID || '^' || A.BSC_USER_ID || '^' || A.MANAGER_USER_ID || '^' || A.CHILD_DEPT_CNT || '^' AS PARAM<!-- TREE에서 PARAMETER 전달용 -->
		         , CASE WHEN B.SC_DEPT_ID IS NOT NULL THEN 'Y' ELSE 'N' END CHECK_YN
		      FROM (SELECT T.*
		                 , NVL ((SELECT   COUNT (1)
		                             FROM BSC_SC_DEPT
		                            WHERE YEAR = T.YEAR
		                              AND UP_SC_DEPT_ID = T.SC_DEPT_ID
		                         GROUP BY YEAR, UP_SC_DEPT_ID), '0') AS CHILD_DEPT_CNT
		              FROM BSC_SC_DEPT T) A
		              	LEFT OUTER JOIN BSC_USER_DEPT B
		              		ON A.YEAR=B.YEAR
		              		AND A.SC_DEPT_ID=B.SC_DEPT_ID
		              		AND B.USER_ID = #userId#
		     WHERE A.YEAR = #year#
		       AND A.DELETE_DT IS NULL
		START WITH A.UP_SC_DEPT_ID IS NULL
		CONNECT BY PRIOR A.SC_DEPT_ID = A.UP_SC_DEPT_ID
		       AND PRIOR A.YEAR = A.YEAR
		ORDER SIBLINGS BY SORT_ORDER
	</select>


	<!--
	==================================================================
	  # 설명	: 비교조직 차트 목록
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPTSCORE
	==================================================================
	-->
	<select id="getTeamSecondCompareCnt" parameterClass="hashMap" resultClass="java.lang.String">
			SELECT COUNT(1) CNT
			  FROM (SELECT A.SC_DEPT_ID,
            			   A.SC_DEPT_NM
					  FROM BSC_SC_DEPT A
					 WHERE A.YEAR = #year#
					   AND A.DELETE_DT IS NULL
					   AND A.UP_SC_DEPT_ID IN (SELECT #scDeptId# FROM DUAL)
                    )
	</select>

	<!--
	==================================================================
	  # 설명	: 비교조직 차트 목록
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPTSCORE
	==================================================================
	-->
	<select id="getTeamSecondCompare" parameterClass="hashMap" resultClass="hashMap">
			        SELECT A.SC_DEPT_ID,
            			   A.SC_DEPT_NM
					  FROM BSC_SC_DEPT A
					       LEFT OUTER JOIN BSC_DEPTSCORE B
					       ON A.YEAR = B.YEAR
					       AND B.MON = #mon#
					       AND B.ANAL_CYCLE = #analCycle#
					       AND A.SC_DEPT_ID = B.SC_DEPT_ID
					 WHERE A.YEAR = #year#
					   AND A.DELETE_DT IS NULL
					   AND A.UP_SC_DEPT_ID IN (SELECT #scDeptId# FROM DUAL)
					 ORDER BY A.SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 비교조직 차트 목록
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPTSCORE
	==================================================================
	-->
	<select id="getTeamCompareCnt" parameterClass="hashMap" resultClass="java.lang.String">
			SELECT COUNT(1) CNT
			  FROM (SELECT A.SC_DEPT_ID,
            			   A.SC_DEPT_NM
					  FROM BSC_SC_DEPT A
					 WHERE A.YEAR = #year#
					   AND A.DELETE_DT IS NULL
					   AND A.UP_SC_DEPT_ID IN (SELECT UP_SC_DEPT_ID
                                                 FROM BSC_SC_DEPT
                                                WHERE YEAR = #year#
                                                  AND DELETE_DT IS NULL
                                                  AND SC_DEPT_ID = #scDeptId#
                                               )
                    )
	</select>

	<!--
	==================================================================
	  # 설명	: 비교조직 차트 목록
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPTSCORE
	==================================================================
	-->
	<select id="getTeamCompare" parameterClass="hashMap" resultClass="hashMap">
			        SELECT A.YEAR
					     , A.SC_DEPT_ID
					     , A.SC_DEPT_NM
					     <!-- , TO_CHAR(B.SCORE) AS SCORE  -->
					     , TO_CHAR((SELECT SUM(ROUND(WEIGHT_SCORE,3)) 
					          FROM BSC_METRICSCORE 
					         WHERE YEAR = A.YEAR 
					           AND MON = A.MON 
					           AND ANAL_CYCLE = A.ANAL_CYCLE 
					           AND SC_DEPT_ID = A.SC_DEPT_ID )) AS SCORE
					     , B.STATUS
					     <!-- , TO_CHAR(B.CONVERSION_SCORE) AS CONVERSION_SCORE  -->
					     , TO_CHAR((SELECT SUM(ROUND(WEIGHT_SCORE,3)) 
					          FROM BSC_METRICSCORE 
					         WHERE YEAR = A.YEAR 
					           AND MON = A.MON 
					           AND ANAL_CYCLE = A.ANAL_CYCLE 
					           AND SC_DEPT_ID = A.SC_DEPT_ID )) AS CONVERSION_SCORE   
					  FROM BSC_SC_DEPT A
					  	   LEFT OUTER JOIN BSC_DEPTSCORE B
					       ON A.YEAR = B.YEAR
					       AND B.MON = #mon#
					       AND B.ANAL_CYCLE = #analCycle#
					       AND A.SC_DEPT_ID = B.SC_DEPT_ID
					 WHERE A.YEAR = #year#
					   AND A.DELETE_DT IS NULL
					   AND A.UP_SC_DEPT_ID IN (SELECT UP_SC_DEPT_ID
                                                 FROM BSC_SC_DEPT
                                                WHERE YEAR = #year#
                                                  AND DELETE_DT IS NULL
                                                  AND SC_DEPT_ID = #scDeptId#
                                               )
                     ORDER BY A.SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 비교조직 차트 목록
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPTSCORE
	==================================================================
	-->
	<select id="getSecondCompareCnt" parameterClass="hashMap" resultClass="java.lang.String">
			SELECT COUNT(1) CNT
			  FROM (SELECT A.SC_DEPT_ID,
                           A.SC_DEPT_NM
					  FROM (SELECT *
					  		  FROM BSC_SC_DEPT
							 WHERE YEAR = #year#
							   AND DELETE_DT IS NULL
							 START WITH SC_DEPT_ID = (SELECT X.SC_DEPT_ID
                                                        FROM (SELECT A.YEAR,
						                                             A.SC_DEPT_ID
						                                        FROM BSC_SC_DEPT A
						                                       WHERE A.YEAR = #year#
						                                         AND A.DELETE_DT IS NULL
						                                       START WITH A.SC_DEPT_ID=#scDeptId# AND YEAR = #year# AND DELETE_DT IS NULL
						                                     CONNECT BY PRIOR A.UP_SC_DEPT_ID = A.SC_DEPT_ID AND YEAR = #year# AND DELETE_DT IS NULL) X
						                                       WHERE X.YEAR = #year#
                                    				  )
                                   AND YEAR = #year#
                                   AND DELETE_DT IS NULL
						   CONNECT BY PRIOR SC_DEPT_ID = UP_SC_DEPT_ID AND YEAR = #year# AND DELETE_DT IS NULL
                           ) A
                     WHERE 1=1
                    )
	</select>

	<!--
	==================================================================
	  # 설명	: 비교조직 차트 목록
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPTSCORE
	==================================================================
	-->
	<select id="getSecondCompare" parameterClass="hashMap" resultClass="hashMap">
			        SELECT A.YEAR
					     , A.SC_DEPT_ID
					     , A.SC_DEPT_NM
					     <!-- , TO_CHAR(B.SCORE) AS SCORE -->
					     , TO_CHAR((SELECT SUM(ROUND(WEIGHT_SCORE,3)) 
					          FROM BSC_METRICSCORE 
					         WHERE YEAR = A.YEAR 
					           AND MON = A.MON 
					           AND ANAL_CYCLE = A.ANAL_CYCLE 
					           AND SC_DEPT_ID = A.SC_DEPT_ID )) AS CONVERSION_SCORE
					     , B.STATUS
					     <!-- , TO_CHAR(B.CONVERSION_SCORE) AS CONVERSION_SCORE -->
					     , TO_CHAR((SELECT SUM(ROUND(WEIGHT_SCORE,3)) 
					          FROM BSC_METRICSCORE 
					         WHERE YEAR = A.YEAR 
					           AND MON = A.MON 
					           AND ANAL_CYCLE = A.ANAL_CYCLE 
					           AND SC_DEPT_ID = A.SC_DEPT_ID )) AS CONVERSION_SCORE
					  FROM (SELECT *
					  		  FROM BSC_SC_DEPT
							 WHERE YEAR = #year#
							   AND DELETE_DT IS NULL
							 START WITH SC_DEPT_ID = (SELECT X.SC_DEPT_ID
                                                        FROM (SELECT A.YEAR,
						                                             A.SC_DEPT_ID
						                                        FROM BSC_SC_DEPT A
						                                       WHERE A.YEAR = #year#
						                                         AND A.DELETE_DT IS NULL
						                                       START WITH A.SC_DEPT_ID=#scDeptId# AND YEAR = #year# AND DELETE_DT IS NULL
						                                     CONNECT BY PRIOR A.UP_SC_DEPT_ID = A.SC_DEPT_ID AND YEAR = #year# AND DELETE_DT IS NULL) X
						                                       WHERE X.YEAR = #year#
                                    				  )
                                   AND YEAR = #year#
                                   AND DELETE_DT IS NULL
						   CONNECT BY PRIOR SC_DEPT_ID = UP_SC_DEPT_ID AND YEAR =#year# AND DELETE_DT IS NULL
                           ) A
                           LEFT OUTER JOIN BSC_DEPTSCORE B
                           ON A.YEAR = B.YEAR
                           AND B.MON = #mon#
                           AND B.ANAL_CYCLE = #analCycle#
                           AND A.SC_DEPT_ID = B.SC_DEPT_ID
                     WHERE 1=1
                     ORDER BY A.SORT_ORDER

	</select>

	<!--
	==================================================================
	  # 설명	: 비교조직 차트 목록
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPTSCORE
	==================================================================
	-->
	<select id="getDeptCompare" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
		     , A.SC_DEPT_ID
		     , A.SC_DEPT_NM
		     <!-- , TO_CHAR(NVL(A.CONVERSION_SCORE,'0')) AS SCORE -->
		     , TO_CHAR((SELECT SUM(ROUND(WEIGHT_SCORE,3)) 
					          FROM BSC_METRICSCORE 
					         WHERE YEAR = A.YEAR 
					           AND MON = A.MON 
					           AND ANAL_CYCLE = A.ANAL_CYCLE 
					           AND SC_DEPT_ID = A.SC_DEPT_ID )) AS SCORE
		     , A.STATUS
		     <!-- , TO_CHAR(NVL(A.CONVERSION_SCORE,'0')) AS CONVERSION_SCORE -->
		     , TO_CHAR((SELECT SUM(ROUND(WEIGHT_SCORE,3)) 
					          FROM BSC_METRICSCORE 
					         WHERE YEAR = A.YEAR 
					           AND MON = A.MON 
					           AND ANAL_CYCLE = A.ANAL_CYCLE 
					           AND SC_DEPT_ID = A.SC_DEPT_ID )) AS CONVERSION_SCORE
		     , RANK() OVER( ORDER BY NVL(A.CONVERSION_SCORE,'0') DESC) RANK
          FROM BSC_DEPTSCORE A
		       LEFT OUTER JOIN BSC_SC_DEPT B ON A.YEAR = B.YEAR AND A.SC_DEPT_ID = B.SC_DEPT_ID AND B.DELETE_DT IS NULL
		 WHERE A.YEAR = #year#
		   AND A.MON = #mon#
		   AND A.ANAL_CYCLE = #analCycle#
		   AND B.SC_DEPT_GRP_ID = #scDeptGrpId#
		   AND B.LEVEL_ID = #levelId#
		 ORDER BY B.SORT_ORDER ASC
	</select>

	<!--
	==================================================================
	  # 설명	: 하위 비교조직 차트 목록
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPTSCORE
	==================================================================
	-->
	<select id="getSubDeptCompare" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
		     , A.SC_DEPT_ID
		     , A.SC_DEPT_NM
		     <!-- , TO_CHAR(A.SCORE) AS SCORE -->
		     , TO_CHAR((SELECT SUM(ROUND(WEIGHT_SCORE,3)) 
					          FROM BSC_METRICSCORE 
					         WHERE YEAR = A.YEAR 
					           AND MON = A.MON 
					           AND ANAL_CYCLE = A.ANAL_CYCLE 
					           AND SC_DEPT_ID = A.SC_DEPT_ID )) AS SCORE
		     , A.STATUS
		     <!--  , TO_CHAR(A.CONVERSION_SCORE) AS CONVERSION_SCORE -->
		     , TO_CHAR((SELECT SUM(ROUND(WEIGHT_SCORE,3)) 
					          FROM BSC_METRICSCORE 
					         WHERE YEAR = A.YEAR 
					           AND MON = A.MON 
					           AND ANAL_CYCLE = A.ANAL_CYCLE 
					           AND SC_DEPT_ID = A.SC_DEPT_ID )) AS CONVERSION_SCORE
          FROM BSC_DEPTSCORE A
		       LEFT OUTER JOIN BSC_SC_DEPT B ON A.YEAR = B.YEAR AND A.SC_DEPT_ID = B.SC_DEPT_ID AND B.DELETE_DT IS NULL
		 WHERE A.YEAR = #year#
		   AND A.MON = #mon#
		   AND A.ANAL_CYCLE = #analCycle#
		   AND B.UP_SC_DEPT_ID = #upScDeptId#
		 ORDER BY B.SORT_ORDER ASC
	</select>

	<!--
	==================================================================
	  # 설명	: 2차사업소 비교조직 차트 목록
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPTSCORE
	==================================================================
	-->
	<select id="getSecondDeptCompare" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
		     , A.SC_DEPT_ID
		     , A.SC_DEPT_NM
		     <!-- , TO_CHAR(A.SCORE) AS SCORE -->
		     , TO_CHAR((SELECT SUM(ROUND(WEIGHT_SCORE,3)) 
					          FROM BSC_METRICSCORE 
					         WHERE YEAR = A.YEAR 
					           AND MON = A.MON 
					           AND ANAL_CYCLE = A.ANAL_CYCLE 
					           AND SC_DEPT_ID = A.SC_DEPT_ID )) AS SCORE
		     , A.STATUS
		     <!-- , TO_CHAR(A.CONVERSION_SCORE) AS CONVERSION_SCORE  -->
		     , TO_CHAR((SELECT SUM(ROUND(WEIGHT_SCORE,3)) 
					          FROM BSC_METRICSCORE 
					         WHERE YEAR = A.YEAR 
					           AND MON = A.MON 
					           AND ANAL_CYCLE = A.ANAL_CYCLE 
					           AND SC_DEPT_ID = A.SC_DEPT_ID )) AS CONVERSION_SCORE
          FROM BSC_DEPTSCORE A
		       LEFT OUTER JOIN BSC_SC_DEPT B ON A.YEAR = B.YEAR AND A.SC_DEPT_ID = B.SC_DEPT_ID AND B.DELETE_DT IS NULL
		 WHERE A.YEAR = #year#
		   AND A.MON = #mon#
		   AND A.ANAL_CYCLE = #analCycle#
           AND B.UP_SC_DEPT_ID IN (SELECT UP_SC_DEPT_ID
                                     FROM BSC_SC_DEPT
                                    WHERE YEAR = #year#
                                      AND SC_DEPT_ID = #scDeptId#)
		 ORDER BY B.SORT_ORDER ASC
	</select>

	<!--
	==================================================================
	  # 설명	: 정부경영평가 5년 차트 목록 GOV_METRIC_ID 취득
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPTSCORE
	==================================================================
	-->
	<select id="getGovMetricGraphId" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT GOV_METRIC_ID FROM (
			SELECT GOV_METRIC_ID, ROWNUM
			  FROM (  SELECT A.GOV_METRIC_ID
			            FROM GOV_METRIC A
			                 INNER JOIN GOV_EVAL_CAT_GRP C
			                    ON A.YEAR = C.YEAR
			                       AND A.EVAL_CAT_GRP_ID = C.EVAL_CAT_GRP_ID
			                 INNER JOIN GOV_EVAL_CAT D
			                    ON A.YEAR = D.YEAR AND A.EVAL_CAT_ID = D.EVAL_CAT_ID
			           WHERE A.GBN_ID = '01' AND A.YEAR = #findYear# AND A.DELETE_DT IS NULL
			        ORDER BY C.SORT_ORDER, D.SORT_ORDER, A.SORT_ORDER) A
			 WHERE ROWNUM = 1)
	</select>


	<!--
	==================================================================
	  # 설명	: 정부경영평가 5년 차트 목록
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPTSCORE
	==================================================================
	-->
	<select id="getGovMetric" parameterClass="hashMap" resultClass="hashMap" remapResults="true">
        SELECT MAX(#findYear#-4) YEAR4
             , MAX(#findYear#-3) YEAR3
             , MAX(#findYear#-2) YEAR2
             , MAX(#findYear#-1) YEAR1
             , MAX(#findYear#) YEAR0
             , MAX(GOV_METRIC_ID) GOV_METRIC_ID
             , MAX(GOV_METRIC_NM) GOV_METRIC_NM
             , MAX(DECODE(YEAR, #findYear# - 4    , PERSENT , '0')) AS Y4
             , MAX(DECODE(YEAR, #findYear# - 3    , PERSENT , '0')) AS Y3
             , MAX(DECODE(YEAR, #findYear# - 2    , PERSENT , '0')) AS Y2
             , MAX(DECODE(YEAR, #findYear# - 1    , PERSENT , '0')) AS Y1
             , MAX(DECODE(YEAR, #findYear#        , PERSENT , '0')) AS Y0
          FROM (SELECT A.YEAR
          			 , A.GOV_METRIC_ID
          			 , A.GOV_METRIC_NM
          			 , NVL(SCORE, 0) GOV_SCORE
  	                 , ROUND (
	                      CASE A.DIREC_ID
	                         WHEN '01' THEN ACTUAL / BEST_TARGET * 100
	                         WHEN '02' THEN F_PERSENT_DOWN (ACTUAL, BEST_TARGET)
	                      END
	                    , 3) PERSENT
    			  FROM (SELECT YEAR
    			  			 , GOV_METRIC_ID
    			  			 , GOV_METRIC_NM
    			  			 , BEST_TARGET
                             , DIREC_ID
                 		  FROM GOV_METRIC
               			 WHERE YEAR BETWEEN #findYear# - 4 AND #findYear#
               			   AND DELETE_DT IS NULL
                    	   AND GOV_METRIC_GRP_ID = (SELECT GOV_METRIC_GRP_ID
                                                      FROM GOV_METRIC
                                                     WHERE YEAR = #findYear#
                                                       AND GOV_METRIC_ID = #findGovMetricId#)
						) A
				  LEFT OUTER JOIN GOV_ACTUAL B
				    ON A.YEAR = B.YEAR
				   AND B.MON = #findMon#
				   AND A.GOV_METRIC_ID = B.GOV_METRIC_ID
   				 WHERE A.YEAR BETWEEN #findYear# - 4 AND #findYear#
				 ORDER BY A.YEAR
				)
	</select>

	<!--
	==================================================================
	  # 설명	: 성과조직 명 가져오기111
	  #	기능	: SELECT
	  #	TABLE	: BSC_SC_DEPT
	==================================================================
	-->
	<select id="getGovMetricNm" parameterClass="hashMap" resultClass="String">
		SELECT GOV_METRIC_NM
    	  FROM GOV_METRIC
		 WHERE YEAR=#findYear#
		   AND GOV_METRIC_ID = (SELECT GOV_METRIC_ID FROM (
								SELECT GOV_METRIC_ID, ROWNUM
								  FROM (  SELECT A.GOV_METRIC_ID
								            FROM GOV_METRIC A
								                 INNER JOIN GOV_EVAL_CAT_GRP C
								                    ON A.YEAR = C.YEAR
								                       AND A.EVAL_CAT_GRP_ID = C.EVAL_CAT_GRP_ID
								                 INNER JOIN GOV_EVAL_CAT D
								                    ON A.YEAR = D.YEAR AND A.EVAL_CAT_ID = D.EVAL_CAT_ID
								           WHERE A.GBN_ID = '01' AND A.YEAR = #findYear# AND A.DELETE_DT IS NULL
								        ORDER BY C.SORT_ORDER, D.SORT_ORDER, A.SORT_ORDER) A
								 WHERE ROWNUM = 1))
		   AND DELETE_DT IS NULL
	</select>

	<!--
	==================================================================
	  # 설명	: 성과조직 코드 가져오기
	  #	기능	: SELECT
	  #	TABLE	: BSC_SC_DEPT
	==================================================================
	-->
	<select id="getGovMetricId" parameterClass="hashMap" resultClass="String">
		SELECT GOV_METRIC_ID
    	  FROM GOV_METRIC
		 WHERE YEAR=#findYear#
		   AND GOV_METRIC_ID = (SELECT MIN(A.GOV_METRIC_ID) FROM GOV_METRIC A, GOV_SCORE_YEAR B WHERE A.YEAR= B.YEAR AND A.GOV_METRIC_ID= B.GOV_METRIC_ID AND A.GBN_ID = '01' AND A.YEAR = #findYear# AND A.DELETE_DT IS NULL)
		   AND DELETE_DT IS NULL
	</select>

	<!--
	==================================================================
	  # 설명	: 사용자지정 지표 목록
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getUserMetric" parameterClass="hashMap" resultClass="hashMap">
		SELECT METRIC_ID
          FROM BSC_USER_METRIC
         WHERE YEAR = #findYear#
           AND USER_ID = #userId#
	</select>


	<!--
	==================================================================
	  # 설명	: 성과조직 계량지표 목록
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getMetricList" parameterClass="hashMap" resultClass="hashMap">
		SELECT  A.YEAR,
				B.SC_DEPT_NM,
				A.METRIC_ID,
				A.METRIC_NM,
				CASE WHEN C.METRIC_ID IS NOT NULL THEN 'Y' ELSE 'N' END VIEW_YN
		FROM BSC_METRIC A
		    LEFT OUTER JOIN BSC_SC_DEPT B
		        ON A.YEAR=B.YEAR
		        AND A.SC_DEPT_ID=B.SC_DEPT_ID
		    LEFT OUTER JOIN BSC_USER_METRIC C
		        ON A.YEAR=C.YEAR
		        AND A.METRIC_ID=C.METRIC_ID
		        AND C.USER_ID = #userId#
		WHERE A.YEAR = #year#
			<!-- AND A.SC_DEPT_ID = #scDeptId# -->
			AND A.SC_DEPT_ID = 'D005000'
			AND A.TYPE_ID = '01'
			AND A.DELETE_DT IS NULL
			AND B.DELETE_DT IS NULL
	</select>

	<!--
	==================================================================
	  # 설명	: 사용자지정 지표실적 차트 목록
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getUserMetricActual" parameterClass="hashMap" resultClass="hashMap">
		SELECT MAX(A.YEAR) AS YEAR
             , MAX(A.METRIC_ID) AS METRIC_ID
             , MAX('['||D.SC_DEPT_NM||']'||B.METRIC_NM) AS METRIC_NM
             , TO_CHAR(MAX(CASE WHEN C.MON='01' THEN C.VALUE ELSE 0 END)) AS M1
             , TO_CHAR(MAX(CASE WHEN C.MON='02' THEN C.VALUE ELSE 0 END)) AS M2
             , TO_CHAR(MAX(CASE WHEN C.MON='03' THEN C.VALUE ELSE 0 END)) AS M3
             , TO_CHAR(MAX(CASE WHEN C.MON='04' THEN C.VALUE ELSE 0 END)) AS M4
             , TO_CHAR(MAX(CASE WHEN C.MON='05' THEN C.VALUE ELSE 0 END)) AS M5
             , TO_CHAR(MAX(CASE WHEN C.MON='06' THEN C.VALUE ELSE 0 END)) AS M6
             , TO_CHAR(MAX(CASE WHEN C.MON='07' THEN C.VALUE ELSE 0 END)) AS M7
             , TO_CHAR(MAX(CASE WHEN C.MON='08' THEN C.VALUE ELSE 0 END)) AS M8
             , TO_CHAR(MAX(CASE WHEN C.MON='09' THEN C.VALUE ELSE 0 END)) AS M9
             , TO_CHAR(MAX(CASE WHEN C.MON='10' THEN C.VALUE ELSE 0 END)) AS M10
             , TO_CHAR(MAX(CASE WHEN C.MON='11' THEN C.VALUE ELSE 0 END)) AS M11
             , TO_CHAR(MAX(CASE WHEN C.MON='12' THEN C.VALUE ELSE 0 END)) AS M12
        FROM BSC_USER_METRIC A
		     INNER JOIN BSC_METRIC B ON A.YEAR = B.YEAR AND A.METRIC_ID = B.METRIC_ID AND B.DELETE_DT IS NULL
		     LEFT OUTER JOIN BSC_ACTUAL C ON A.YEAR = C.YEAR AND A.METRIC_ID = C.METRIC_ID AND C.ANAL_CYCLE = 'Y' AND C.ACT_STATUS_ID = '04'
		     LEFT OUTER JOIN BSC_SC_DEPT D ON B.YEAR = D.YEAR AND B.SC_DEPT_ID = D.SC_DEPT_ID AND D.DELETE_DT IS NULL
       WHERE A.YEAR = #year#
		 AND A.USER_ID = #userId#
		 AND A.METRIC_ID = #metricId#
		 AND B.DELETE_DT IS NULL
		 <!-- AND (YEAR || MON) <![CDATA[<=]]> TO_CHAR (SYSDATE, 'YYYYMM') -->
       GROUP BY A.YEAR, B.SORT_ORDER, A.METRIC_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 사용자지정 정평지표실적 차트 목록
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getUserGovMetricActual" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR
		     , METRIC_ID
		     , METRIC_NM
		     , BEST_TARGET
		     , CASE WHEN #year# || '01' <![CDATA[<=]]> TO_CHAR (SYSDATE, 'YYYYMM') THEN M1 ELSE NULL END M1
		     , CASE WHEN #year# || '02' <![CDATA[<=]]> TO_CHAR (SYSDATE, 'YYYYMM') THEN M2 ELSE NULL END M2
		     , CASE WHEN #year# || '03' <![CDATA[<=]]> TO_CHAR (SYSDATE, 'YYYYMM') THEN M3 ELSE NULL END M3
		     , CASE WHEN #year# || '04' <![CDATA[<=]]> TO_CHAR (SYSDATE, 'YYYYMM') THEN M4 ELSE NULL END M4
		     , CASE WHEN #year# || '05' <![CDATA[<=]]> TO_CHAR (SYSDATE, 'YYYYMM') THEN M5 ELSE NULL END M5
		     , CASE WHEN #year# || '06' <![CDATA[<=]]> TO_CHAR (SYSDATE, 'YYYYMM') THEN M6 ELSE NULL END M6
		     , CASE WHEN #year# || '07' <![CDATA[<=]]> TO_CHAR (SYSDATE, 'YYYYMM') THEN M7 ELSE NULL END M7
		     , CASE WHEN #year# || '08' <![CDATA[<=]]> TO_CHAR (SYSDATE, 'YYYYMM') THEN M8 ELSE NULL END M8
		     , CASE WHEN #year# || '09' <![CDATA[<=]]> TO_CHAR (SYSDATE, 'YYYYMM') THEN M9 ELSE NULL END M9
		     , CASE WHEN #year# || '10' <![CDATA[<=]]> TO_CHAR (SYSDATE, 'YYYYMM') THEN M10 ELSE NULL END M10
		     , CASE WHEN #year# || '11' <![CDATA[<=]]> TO_CHAR (SYSDATE, 'YYYYMM') THEN M11 ELSE NULL END M11
		     , CASE WHEN #year# || '12' <![CDATA[<=]]> TO_CHAR (SYSDATE, 'YYYYMM') THEN M12 ELSE NULL END M12
		     , CASE
		          WHEN BEST_TARGET > 100 THEN 100
		          WHEN BEST_TARGET > 90 THEN 90
		          WHEN BEST_TARGET > 80 THEN 80
		          WHEN BEST_TARGET > 70 THEN 70
		          WHEN BEST_TARGET > 60 THEN 60
		          WHEN BEST_TARGET > 50 THEN 50
		          WHEN BEST_TARGET > 40 THEN 40
		          WHEN BEST_TARGET > 30 THEN 30
		          WHEN BEST_TARGET > 20 THEN 20
		          WHEN BEST_TARGET > 10 THEN 10
		          WHEN BEST_TARGET > 5 THEN 5
		          WHEN BEST_TARGET > 1 THEN 1
		          WHEN BEST_TARGET > 0 THEN 0
		          WHEN BEST_TARGET > -1 THEN -1
		       END
		          VIEW_TARGET
			 , DIREC_ID
		     , ACTUAL_MAX
		     , ACTUAL_MIN
		     <!-- , CASE WHEN DIREC_ID = '01' THEN ACTUAL_MIN + (ACTUAL_MIN * 0.1) ELSE 0 END VIEW_TARGET_MIN -->
		     , 0 VIEW_TARGET_MIN
		     , ROUND(CASE WHEN DIREC_ID = '02' THEN BEST_TARGET - (BEST_TARGET * 0.3) ELSE 0 END, 1) VIEW_ACTUAL_MIN
		     , ROUND(CASE WHEN DIREC_ID = '02' THEN ACTUAL_MAX + (ACTUAL_MAX * 0.1) ELSE 0 END, 1) VIEW_ACTUAL_MAX
		     <!-- 달성률 추가 시작 -->
	         , ROUND (CASE DIREC_ID WHEN '01' THEN M1 / BEST_TARGET * 100 WHEN '02' THEN F_PERSENT_DOWN (M1, BEST_TARGET) END, 3) PERSENT1
	         , ROUND (CASE DIREC_ID WHEN '01' THEN M2 / BEST_TARGET * 100 WHEN '02' THEN F_PERSENT_DOWN (M2, BEST_TARGET) END, 3) PERSENT2
	         , ROUND (CASE DIREC_ID WHEN '01' THEN M3 / BEST_TARGET * 100 WHEN '02' THEN F_PERSENT_DOWN (M3, BEST_TARGET) END, 3) PERSENT3
	         , ROUND (CASE DIREC_ID WHEN '01' THEN M4 / BEST_TARGET * 100 WHEN '02' THEN F_PERSENT_DOWN (M4, BEST_TARGET) END, 3) PERSENT4
	         , ROUND (CASE DIREC_ID WHEN '01' THEN M5 / BEST_TARGET * 100 WHEN '02' THEN F_PERSENT_DOWN (M5, BEST_TARGET) END, 3) PERSENT5
	         , ROUND (CASE DIREC_ID WHEN '01' THEN M6 / BEST_TARGET * 100 WHEN '02' THEN F_PERSENT_DOWN (M6, BEST_TARGET) END, 3) PERSENT6
	         , ROUND (CASE DIREC_ID WHEN '01' THEN M7 / BEST_TARGET * 100 WHEN '02' THEN F_PERSENT_DOWN (M7, BEST_TARGET) END, 3) PERSENT7
	         , ROUND (CASE DIREC_ID WHEN '01' THEN M8 / BEST_TARGET * 100 WHEN '02' THEN F_PERSENT_DOWN (M8, BEST_TARGET) END, 3) PERSENT8
	         , ROUND (CASE DIREC_ID WHEN '01' THEN M9 / BEST_TARGET * 100 WHEN '02' THEN F_PERSENT_DOWN (M9, BEST_TARGET) END, 3) PERSENT9
	         , ROUND (CASE DIREC_ID WHEN '01' THEN M10 / BEST_TARGET * 100 WHEN '02' THEN F_PERSENT_DOWN (M10, BEST_TARGET) END, 3) PERSENT10
	         , ROUND (CASE DIREC_ID WHEN '01' THEN M11 / BEST_TARGET * 100 WHEN '02' THEN F_PERSENT_DOWN (M11, BEST_TARGET) END, 3) PERSENT11
	         , ROUND (CASE DIREC_ID WHEN '01' THEN M12 / BEST_TARGET * 100 WHEN '02' THEN F_PERSENT_DOWN (M12, BEST_TARGET) END, 3) PERSENT12
	          <!-- 달성률 추가 끝 -->
		  FROM (
		SELECT MAX(A.YEAR) AS YEAR
             , MAX(A.METRIC_ID) AS METRIC_ID
             , MAX (B.GOV_METRIC_NM) AS METRIC_NM
             , B.DIREC_ID
             , B.BEST_TARGET
<!--
             , TO_CHAR(MAX(CASE WHEN C.MON='01' THEN C.ACTUAL ELSE 0 END)) AS M1
             , TO_CHAR(MAX(CASE WHEN C.MON='02' THEN C.ACTUAL ELSE 0 END)) AS M2
             , TO_CHAR(MAX(CASE WHEN C.MON='03' THEN C.ACTUAL ELSE 0 END)) AS M3
             , TO_CHAR(MAX(CASE WHEN C.MON='04' THEN C.ACTUAL ELSE 0 END)) AS M4
             , TO_CHAR(MAX(CASE WHEN C.MON='05' THEN C.ACTUAL ELSE 0 END)) AS M5
             , TO_CHAR(MAX(CASE WHEN C.MON='06' THEN C.ACTUAL ELSE 0 END)) AS M6
             , TO_CHAR(MAX(CASE WHEN C.MON='07' THEN C.ACTUAL ELSE 0 END)) AS M7
             , TO_CHAR(MAX(CASE WHEN C.MON='08' THEN C.ACTUAL ELSE 0 END)) AS M8
             , TO_CHAR(MAX(CASE WHEN C.MON='09' THEN C.ACTUAL ELSE 0 END)) AS M9
             , TO_CHAR(MAX(CASE WHEN C.MON='10' THEN C.ACTUAL ELSE 0 END)) AS M10
             , TO_CHAR(MAX(CASE WHEN C.MON='11' THEN C.ACTUAL ELSE 0 END)) AS M11
             , TO_CHAR(MAX(CASE WHEN C.MON='12' THEN C.ACTUAL ELSE 0 END)) AS M12
-->
               , TO_CHAR (
                    CASE B.DIREC_ID
                       WHEN '01' THEN MAX (CASE WHEN C.MON = '01' THEN C.ACTUAL ELSE 0 END)
                       ELSE MIN (CASE WHEN C.MON = '01' THEN C.ACTUAL ELSE NULL END)
                    END)
                    AS M1
               , TO_CHAR (
                    CASE B.DIREC_ID
                       WHEN '01' THEN MAX (CASE WHEN C.MON = '02' THEN C.ACTUAL ELSE 0 END)
                       ELSE MIN (CASE WHEN C.MON = '02' THEN C.ACTUAL ELSE NULL END)
                    END)
                    AS M2
               , TO_CHAR (
                    CASE B.DIREC_ID
                       WHEN '01' THEN MAX (CASE WHEN C.MON = '03' THEN C.ACTUAL ELSE 0 END)
                       ELSE MIN (CASE WHEN C.MON = '03' THEN C.ACTUAL ELSE NULL END)
                    END)
                    AS M3
               , TO_CHAR (
                    CASE B.DIREC_ID
                       WHEN '01' THEN MAX (CASE WHEN C.MON = '04' THEN C.ACTUAL ELSE 0 END)
                       ELSE MIN (CASE WHEN C.MON = '04' THEN C.ACTUAL ELSE NULL END)
                    END)
                    AS M4
               , TO_CHAR (
                    CASE B.DIREC_ID
                       WHEN '01' THEN MAX (CASE WHEN C.MON = '05' THEN C.ACTUAL ELSE 0 END)
                       ELSE MIN (CASE WHEN C.MON = '05' THEN C.ACTUAL ELSE NULL END)
                    END)
                    AS M5
               , TO_CHAR (
                    CASE B.DIREC_ID
                       WHEN '01' THEN MAX (CASE WHEN C.MON = '06' THEN C.ACTUAL ELSE 0 END)
                       ELSE MIN (CASE WHEN C.MON = '06' THEN C.ACTUAL ELSE NULL END)
                    END)
                    AS M6
               , TO_CHAR (
                    CASE B.DIREC_ID
                       WHEN '01' THEN MAX (CASE WHEN C.MON = '07' THEN C.ACTUAL ELSE 0 END)
                       ELSE MIN (CASE WHEN C.MON = '07' THEN C.ACTUAL ELSE NULL END)
                    END)
                    AS M7
               , TO_CHAR (
                    CASE B.DIREC_ID
                       WHEN '01' THEN MAX (CASE WHEN C.MON = '08' THEN C.ACTUAL ELSE 0 END)
                       ELSE MIN (CASE WHEN C.MON = '08' THEN C.ACTUAL ELSE NULL END)
                    END)
                    AS M8
               , TO_CHAR (
                    CASE B.DIREC_ID
                       WHEN '01' THEN MAX (CASE WHEN C.MON = '09' THEN C.ACTUAL ELSE 0 END)
                       ELSE MIN (CASE WHEN C.MON = '09' THEN C.ACTUAL ELSE NULL END)
                    END)
                    AS M9
               , TO_CHAR (
                    CASE B.DIREC_ID
                       WHEN '01' THEN MAX (CASE WHEN C.MON = '10' THEN C.ACTUAL ELSE 0 END)
                       ELSE MIN (CASE WHEN C.MON = '10' THEN C.ACTUAL ELSE NULL END)
                    END)
                    AS M10
               , TO_CHAR (
                    CASE B.DIREC_ID
                       WHEN '01' THEN MAX (CASE WHEN C.MON = '11' THEN C.ACTUAL ELSE 0 END)
                       ELSE MIN (CASE WHEN C.MON = '11' THEN C.ACTUAL ELSE NULL END)
                    END)
                    AS M11
               , TO_CHAR (
                    CASE B.DIREC_ID
                       WHEN '01' THEN MAX (CASE WHEN C.MON = '12' THEN C.ACTUAL ELSE 0 END)
                       ELSE MIN (CASE WHEN C.MON = '12' THEN C.ACTUAL ELSE NULL END)
                    END)
                    AS M12
             , MAX (C.ACTUAL) ACTUAL_MAX
             , MIN (C.ACTUAL) ACTUAL_MIN
          FROM BSC_USER_METRIC A
		 INNER JOIN GOV_METRIC B ON A.YEAR = B.YEAR AND A.METRIC_ID = B.GOV_METRIC_ID AND B.DELETE_DT IS NULL
		  LEFT OUTER JOIN GOV_ACTUAL C
		  	ON A.YEAR = C.YEAR
		  AND A.METRIC_ID = C.GOV_METRIC_ID
		  <!-- AND C.STATUS_ID = '04'  -->
       WHERE A.YEAR = #year#
		 AND A.USER_ID = #userId#
		 AND A.METRIC_ID = #metricId#
		 AND B.DELETE_DT IS NULL
		 AND (YEAR || MON) <![CDATA[<=]]> (#year# || #mon#)
       GROUP BY A.YEAR, B.SORT_ORDER, A.METRIC_ID, B.DIREC_ID, B.BEST_TARGET)
	</select>

	<!--
	==================================================================
	  # 설명	: 공지사항 목록
	  #	기능	: SELECT
	  #	TABLE	: BSC_NOTICE
	==================================================================
	-->
	<select id="getNoticeList" parameterClass="hashMap" resultClass="hashMap">
		SELECT ID
		     , SUBJECT
		     , POPUP_GBN
		     , FROM_DT
		     , TO_DT
		     , WIDTH
		     , HEIGHT
		     , TO_CHAR(CREATE_DT,'YYYY.MM.DD') CREATE_DT
	   FROM BSC_NOTICE
	   WHERE 1=1
		<dynamic prepend="AND">
			<isNotEqual property="moreYN" compareValue="Y">
				ROWNUM <![CDATA[<= ]]>5
			</isNotEqual>
		</dynamic>
	   ORDER BY CREATE_DT DESC
	</select>

	<!--
	==================================================================
	  # 설명	: QnA 자료실 목록
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getBbsList" parameterClass="hashMap" resultClass="hashMap">

        SELECT T.*
             , (SELECT DEPT_NM FROM V_ROLE_USER WHERE USER_ID = BBS_REGISTER) AS DEPT_NM
        FROM (
           SELECT A.*, B.BBS_TOTAL, ROWNUM AS RM
           FROM (
              SELECT T.BBS_ID, BBS_SEQ, BBS_PSEQ, BBS_SORT1, BBS_SORT2, BBS_DEPT
               , BBS_CATEGORY, BBS_TITLE, BBS_READ, BBS_RECOMMAND, BBS_REGISTER
               , BBS_REGISTER_NAME, BBS_PASSWD, TO_CHAR(CREATE_DT,'YYYY.MM.DD HH24:MI') CREATE_DT, BBS_CONTENTS
              FROM BSC_COMMON_BOARD_BODY T
              WHERE BBS_ID = #findBbsId# AND DELETE_DT IS NULL
              AND (BBS_CATEGORY = NVL(#findBbsCategory#, '999') OR BBS_CATEGORY IS NULL)
              <isNotEmpty prepend="AND" property="findBbsTitle">
              	BBS_TITLE LIKE '%'||#findBbsTitle#||'%'
              </isNotEmpty>
              <isNotEmpty prepend="AND" property="findBbsRegisterName">
              	NVL(BBS_REGISTER_NAME,' ') LIKE '%'||#findRegisterName#||'%'
              </isNotEmpty>
             ORDER BY BBS_PSEQ DESC, BBS_SORT2
           ) A, (
              SELECT COUNT(1) AS BBS_TOTAL
              FROM BSC_COMMON_BOARD_BODY
              WHERE BBS_ID = #findBbsId# AND DELETE_DT IS NULL
              AND (BBS_CATEGORY = NVL(#findBbsCategory#, '999') OR BBS_CATEGORY IS NULL )
              <isNotEmpty prepend="AND" property="findBbsTitle">
              	BBS_TITLE LIKE '%'||#findBbsTitle#||'%'
              </isNotEmpty>
              <isNotEmpty prepend="AND" property="findBbsRegisterName">
              	NVL(BBS_REGISTER_NAME,' ') LIKE '%'||#findRegisterName#||'%'
              </isNotEmpty>
          ) B	   WHERE 1=1
		<dynamic prepend="AND">
			<isNotEqual property="moreYN" compareValue="Y">
				ROWNUM <![CDATA[<= ]]>5
			</isNotEqual>
		</dynamic>

          ORDER BY BBS_PSEQ DESC, BBS_SORT2
        ) T

	</select>


	<!--
	==================================================================
	  # 설명	: 성과조직종합현황 목록
	  #	기능	: SELECT
	  #	TABLE	: BSC_NOTICE
	==================================================================
	-->
	<select id="getTotalStatusList" parameterClass="hashMap" resultClass="hashMap">
	<![CDATA[
		SELECT A.SC_DEPT_NM,
			   C.CODE_NM AS A,
			   '' AS B
	    FROM BSC_SC_DEPT A
	    	LEFT OUTER JOIN BSC_KPI_APPROVE B
	    		ON A.YEAR=B.YEAR
	    		AND A.SC_DEPT_ID=B.SC_DEPT_ID
		    LEFT OUTER JOIN BSC_CODE C
		    	ON C.YEAR='9999'
		    	AND C.CODE_GRP_ID='027'
		    	AND B.APPROVE_STATUS_ID=C.CODE_ID
		    WHERE A.YEAR = #year#
		    	AND A.SC_DEPT_ID = #scDeptId#
		    	AND A.DELETE_DT IS NULL
	    	UNION ALL
		    SELECT (SELECT SC_DEPT_NM FROM BSC_SC_DEPT WHERE YEAR = #year# AND SC_DEPT_ID = #scDeptId# AND DELETE_DT IS NULL ) SC_DEPT_NM,
		    	   (SELECT TO_CHAR(COUNT(METRIC_ID)) FROM BSC_ACTUAL   WHERE YEAR = #year# AND MON = #mon#  AND ANAL_CYCLE='M' AND METRIC_ID IN (
		    	   		SELECT METRIC_ID  FROM BSC_METRIC A WHERE A.YEAR = #year# AND A.TYPE_ID='01' AND A.SC_DEPT_ID=#scDeptId# AND A.DELETE_DT IS NULL
		           ) AND STATUS_ID IN('03', '04')) AS A,
		           (SELECT TO_CHAR(COUNT(METRIC_ID)) FROM BSC_METRIC A WHERE A.YEAR = #year# AND A.TYPE_ID='01' AND A.SC_DEPT_ID=#scDeptId# AND A.DELETE_DT IS NULL) AS B
		    FROM DUAL
		    UNION ALL
		    SELECT (SELECT SC_DEPT_NM FROM BSC_SC_DEPT WHERE YEAR = #year# AND SC_DEPT_ID = #scDeptId# AND DELETE_DT IS NULL ) SC_DEPT_NM,
		    	   (SELECT TO_CHAR(COUNT(METRIC_ID)) FROM BSC_ACTUAL   WHERE YEAR = #year# AND MON = #mon#  AND ANAL_CYCLE='M' AND METRIC_ID IN (
		    	   		SELECT METRIC_ID  FROM BSC_METRIC A WHERE A.YEAR = #year# AND A.TYPE_ID='01' AND A.SC_DEPT_ID = #scDeptId# AND A.DELETE_DT IS NULL
		           ) AND STATUS_ID IN('04')) AS A,
		           (SELECT TO_CHAR(COUNT(METRIC_ID)) FROM BSC_METRIC A WHERE A.YEAR = #year# AND A.TYPE_ID='01' AND A.SC_DEPT_ID = #scDeptId# AND A.DELETE_DT IS NULL) AS B
		    FROM DUAL
	]]>
	</select>

	<!--
	==================================================================
	  # 설명	: 공지사항ID 팝업목록
	  #	기능	: SELECT
	  #	TABLE	: BSC_NOTICE
	==================================================================
	-->
	<select id="getPopupList" parameterClass="hashMap" resultClass="hashMap">
	<![CDATA[
		SELECT ID,
			   WIDTH,
			   HEIGHT
	    FROM BSC_NOTICE
	   	WHERE 1=1
	   	AND POPUP_GBN='Y'
	   	AND SYSDATE>=FROM_DT AND SYSDATE <= TO_DT
	   	ORDER BY ID
	]]>
	</select>

	<!--
	==================================================================
	  # 설명	: 사용자지정조직 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_USER_DEPT
	==================================================================
	-->
	<insert id="insertDeptData" parameterClass="hashMap">
		INSERT INTO BSC_USER_DEPT (
		       YEAR,
		       USER_ID,
		       SC_DEPT_ID
		     ) VALUES (
		       #year#,
		       #userId#,
		       #scDeptId#
		     )
	</insert>

	<!--
	==================================================================
	  # 설명	: 사용자지정조직 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_USER_DEPT
	==================================================================
	-->
	<insert id="deleteDeptData" parameterClass="hashMap">
		DELETE FROM BSC_USER_DEPT
		WHERE YEAR = #year#
		AND USER_ID = #userId#
	</insert>

	<!--
	==================================================================
	  # 설명	: 사용자지정지표 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_USER_METRIC
	==================================================================
	-->
	<insert id="insertMetricData" parameterClass="hashMap">
		INSERT INTO BSC_USER_METRIC (
		       YEAR,
		       USER_ID,
		       METRIC_ID
		     ) VALUES (
		       #findYear#,
		       #loginUserId#,
		       #metricId#
		     )
	</insert>

	<!--
	==================================================================
	  # 설명	: 사용자지정지표 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_USER_METRIC
	==================================================================
	-->
	<insert id="deleteMetricData" parameterClass="hashMap">
		DELETE FROM BSC_USER_METRIC
		WHERE YEAR = #findYear#
		AND USER_ID = #loginUserId#
	</insert>

	<!--
	==================================================================
	  # 설명	: 신호등현황 목록 보기
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getSignalList" parameterClass="hashMap" resultClass="hashMap">
		<![CDATA[
		SELECT A.CODE_ID, B.FROM_VALUE, B.TO_VALUE, A.CODE_NM, UPPER(B.COLOR) AS COLOR
		  FROM BSC_CODE A
		  	   LEFT OUTER JOIN BSC_COMMON_STATUS B
		   	        ON A.CODE_ID = B.STATUS_ID
		 		    AND B.YEAR = A.YEAR
		 WHERE A.CODE_GRP_ID = '021'
		   AND A.DELETE_DT IS NULL
		   AND A.YEAR = (SELECT CASE YEAR_YN WHEN 'Y' THEN #year# ELSE '9999' END FROM BSC_CODE_GRP WHERE CODE_GRP_ID = '021')
		 ORDER BY B.FROM_VALUE
		 ]]>
	</select>

	<!--
	==================================================================
	  # 설명	: 조직지표현황
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRICSCORE
	==================================================================
	-->
	<select id="getScDeptScoreList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
	         , A.METRIC_ID
	         , A.METRIC_NM
	         , A.SC_DEPT_ID
	         , A.WEIGHT
	         , A.UNIT
	         , A.UNIT_NM
	         , TO_CHAR(A.TARGET) AS TARGET
	         , TO_CHAR(A.ACTUAL) AS ACTUAL
             , TO_CHAR(A.FINAL_SCORE)  AS SCORE
	         , A.STATUS
	         , B.METRIC_ID AS UP_METRIC_ID
	         , C.ETC1
	         , TO_CHAR(ROUND (CASE A.SCORE_CAL_TYPE_ID WHEN '043' THEN F_PERSENT_DOWN (A.ACTUAL, A.TARGET) ELSE A.ACTUAL / A.TARGET * 100 END,3) ) AS PERSENT
         	 , TO_CHAR(ROUND (A.FINAL_SCORE * A.WEIGHT / 100, 3) )AS EXCSCORE
          FROM BSC_METRICSCORE A
               LEFT OUTER JOIN ( SELECT A.YEAR
                                      , B.METRIC_ID
                                      , A.SUB_METRIC_ID
                                   FROM BSC_CAL_METRIC A
                                        INNER JOIN BSC_METRIC B
                                              ON A.YEAR = B.YEAR
                                              AND A.METRIC_ID = B.METRIC_ID
                                              AND B.SC_DEPT_ID =  #scDeptId#
                                              AND B.DELETE_DT IS NULL
                                  WHERE A.YEAR = #findYear#
                                    AND A.DELETE_DT IS NULL) B
                     ON A.YEAR = B.YEAR
                     AND A.METRIC_ID = B.SUB_METRIC_ID
				LEFT OUTER JOIN BSC_CODE C
              		ON A.TYPE_ID = C.CODE_ID
         WHERE A.YEAR = #findYear#
           AND A.MON = #findMon#
           AND A.ANAL_CYCLE = #findAnalCycle#
           AND A.SC_DEPT_ID = #scDeptId#
           AND CODE_GRP_ID = '007'
	     ORDER BY A.SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 조직지표현황
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRICSCORE
	==================================================================
	-->
	<select id="getScDeptScoreCompList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
	         , A.METRIC_ID
	         , A.METRIC_NM
	         , A.SC_DEPT_ID
	         , A.WEIGHT
	         , A.UNIT
	         , A.UNIT_NM
	         , TO_CHAR(A.TARGET) AS TARGET
	         , TO_CHAR(A.ACTUAL) AS ACTUAL
             , TO_CHAR(A.FINAL_SCORE)  AS SCORE
	         , A.STATUS
	         , B.METRIC_ID AS UP_METRIC_ID
	         , C.ETC1
	         , TO_CHAR(ROUND (CASE A.SCORE_CAL_TYPE_ID WHEN '043' THEN F_PERSENT_DOWN (A.ACTUAL, A.TARGET) ELSE A.ACTUAL / A.TARGET * 100 END,3) ) AS PERSENT
         	 , TO_CHAR(ROUND (A.FINAL_SCORE * A.WEIGHT / 100, 3) )AS EXCSCORE
          FROM BSC_METRICSCORE A
               LEFT OUTER JOIN ( SELECT A.YEAR
                                      , B.METRIC_ID
                                      , A.SUB_METRIC_ID
                                   FROM BSC_CAL_METRIC A
                                        INNER JOIN BSC_METRIC B
                                              ON A.YEAR = B.YEAR
                                              AND A.METRIC_ID = B.METRIC_ID
                                              <!--AND B.SC_DEPT_ID =  #scDeptId#-->
                                              AND B.DELETE_DT IS NULL
                                  WHERE A.YEAR = #findYear#
                                    AND A.DELETE_DT IS NULL) B
                     ON A.YEAR = B.YEAR
                     AND A.METRIC_ID = B.SUB_METRIC_ID
				LEFT OUTER JOIN BSC_CODE C
					ON A.TYPE_ID = C.CODE_ID
         WHERE A.YEAR = #findYear#
           AND A.MON = #findMon#
           AND A.ANAL_CYCLE = #findAnalCycle#
           AND C.CODE_GRP_ID = '007'
           <isNotEmpty prepend="AND" property="scDeptCompId">
           		A.SC_DEPT_ID = #scDeptCompId#
           </isNotEmpty>
           <isEmpty prepend="AND" property="scDeptCompId">
           		A.SC_DEPT_ID = (SELECT SC_DEPT_ID FROM (
														 SELECT ROW_NUMBER () OVER (ORDER BY A.SC_DEPT_ID) RANK
													          , A.SC_DEPT_ID
													          , A.CONVERSION_SCORE
													   	   FROM BSC_DEPTSCORE A
													      INNER JOIN BSC_SC_DEPT B
													         ON A.YEAR = B.YEAR
													 		AND B.SC_DEPT_ID = A.SC_DEPT_ID
													 	  WHERE A.YEAR = #findYear#
													      	AND A.MON = #findMon#
													      	AND A.ANAL_CYCLE = #findAnalCycle#
													      	AND B.SC_DEPT_GRP_ID = #scDeptGrpId#
													      	AND A.CONVERSION_SCORE = (
													 								  SELECT MAX(A.CONVERSION_SCORE)
													   									FROM BSC_DEPTSCORE A
													   								   INNER JOIN BSC_SC_DEPT B
													   									  ON A.YEAR = B.YEAR
													 									 AND B.SC_DEPT_ID = A.SC_DEPT_ID
													 								   WHERE A.YEAR = #findYear#
													      								 AND A.MON = #findMon#
													      								 AND A.ANAL_CYCLE = #findAnalCycle#
													      								 AND B.SC_DEPT_GRP_ID = #scDeptGrpId#)
										             	)
								 WHERE RANK = '1')
           </isEmpty>
	     ORDER BY A.SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 계량지표총괄표 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: GOV_METRIC
	==================================================================
	-->
	<select id="getGovScoreList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR,
               B.EVAL_CAT_GRP_ID,
               B.EVAL_CAT_GRP_NM,
               C.EVAL_CAT_ID,
               C.EVAL_CAT_NM,
               A.GOV_METRIC_ID,
               A.GOV_METRIC_NM,
               A.MAIN_METRIC_YN,
               CASE WHEN A.MAIN_METRIC_YN != 'Y' THEN 'NNN'||A.GOV_METRIC_NM
               ELSE 'YYY'||A.GOV_METRIC_NM END AS SEL_GOV_METRIC_NM,
               A.DIREC_ID,
               A.WEIGHT,
               F_CODE_NM('147',A.DIREC_ID,A.YEAR) DIREC_NM,
               A.EVAL_METHOD_ID,
               F_CODE_NM('146',A.EVAL_METHOD_ID,A.YEAR) EVAL_METHOD_NM,
               ROUND(A.BEST_TARGET,3) TARGET,
               ROUND(D.ACTUAL,3) ACTUAL,
               <!-- 달성률 추가 시작 -->
	          ROUND (
	            CASE A.DIREC_ID
	               WHEN '01' THEN D.ACTUAL / A.BEST_TARGET * 100
	               WHEN '02' THEN F_PERSENT_DOWN (D.ACTUAL, A.BEST_TARGET)
	            END
	          , 3) PERSENT,
	          <!-- 달성률 추가 끝 -->
	           ROUND (D.SCORE * A.WEIGHT / 100, 3) AS EXCSCORE,
               ROUND(D.SCORE,3) SCORE,
               D.STATUS_ID,
               CASE WHEN A.MAIN_METRIC_YN = 'Y' THEN NVL(A.WEIGHT,0) ELSE 0 END MAIN_WEIGHT,
		       COUNT(1) OVER(PARTITION BY B.EVAL_CAT_GRP_ID ) GRP_CNT ,
		       ROW_NUMBER() OVER(PARTITION BY EVAL_CAT_GRP_ID ORDER BY B.SORT_ORDER, C.SORT_ORDER, A.SORT_ORDER, MAIN_METRIC_YN DESC) GRP_NUM,
		       COUNT(1) OVER(PARTITION BY EVAL_CAT_GRP_ID, EVAL_CAT_ID) CAT_CNT,
		       ROW_NUMBER() OVER(PARTITION BY EVAL_CAT_GRP_ID, EVAL_CAT_ID ORDER BY C.SORT_ORDER, A.SORT_ORDER, MAIN_METRIC_YN DESC) CAT_NUM
          FROM (SELECT ROWNUM MET_ORDER,
	                   X.YEAR,
	                   X.GOV_METRIC_ID,
	                   X.UP_METRIC_ID,
	                   X.GOV_METRIC_NM,
	                   X.EVAL_CAT_ID,
	                   X.EVAL_CAT_GRP_ID,
	                   X.DIREC_ID,
	                   X.EVAL_METHOD_ID,
	                   X.BEST_TARGET,
	                   X.MAIN_METRIC_YN,
	                   X.WEIGHT,
	                   X.SORT_ORDER
                  FROM (SELECT YEAR,
		                       GOV_METRIC_ID,
		                       UP_METRIC_ID,
		                       GOV_METRIC_NM,
		                       EVAL_CAT_ID,
		                       EVAL_CAT_GRP_ID,
		                       DIREC_ID,
		                       EVAL_METHOD_ID,
		                       BEST_TARGET,
		                       MAIN_METRIC_YN,
		                       WEIGHT,
		                       METRIC_SORT SORT_ORDER
             			  FROM V_GOV_METRIC
                         WHERE YEAR = #findYear#
                           AND GBN_ID = '01'
                           /* AND DELETE_DT IS NULL */
                         START WITH MAIN_METRIC_YN = 'Y'
                       CONNECT BY PRIOR GOV_METRIC_ID = UP_METRIC_ID
                              AND PRIOR YEAR = YEAR
                 ORDER SIBLINGS BY SORT_ORDER ASC
      				   ) X
                ) A
		      INNER JOIN GOV_EVAL_CAT_GRP B
		      ON A.YEAR = B.YEAR
		      AND A.EVAL_CAT_GRP_ID = B.EVAL_CAT_GRP_ID
		      INNER JOIN GOV_EVAL_CAT C
		      ON A.YEAR = C.YEAR
		      AND A.EVAL_CAT_ID = C.EVAL_CAT_ID
		      LEFT OUTER JOIN GOV_ACTUAL D
		      ON A.YEAR = D.YEAR
		      AND A.GOV_METRIC_ID = D.GOV_METRIC_ID
		      AND D.MON = #findMon#
		      ORDER BY B.SORT_ORDER, C.SORT_ORDER, A.MET_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 관점별 점수현황
	  #	기능	: SELECT
	  #	TABLE	: BSC_PERSSCORE
	==================================================================
	-->
	<select id="getPerspectiveScoreList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
		     , A.PERSPECTIVE_ID
		     , A.PERSPECTIVE_NM
		     , TO_CHAR(B.SCORE) AS SCORE
		     , B.STATUS
		FROM BSC_PERSPECTIVE A
		     LEFT OUTER JOIN BSC_PERSSCORE B
		          ON A.YEAR = B.YEAR
		          AND B.MON = #findMon#
		          AND A.PERSPECTIVE_ID = B.PERSPECTIVE_ID
		          AND B.ANAL_CYCLE = #findAnalCycle#
		          AND B.SC_DEPT_ID = #topScDeptId#
		WHERE A.YEAR = #findYear#
	      AND A.PERSPECTIVE_ID != 'P000005' <!-- 임시 주석 -->
		  AND A.DELETE_DT IS NULL
		ORDER BY A.SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 사용자별 지표
	  #	기능	: SELECT
	  #	TABLE	: BSC_USER_METRIC
	==================================================================
	-->
	<select id="getUserMetricList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.METRIC_ID
		     , B.METRIC_NM||'['||C.SC_DEPT_NM||']' AS METRIC_NM
		FROM BSC_USER_METRIC A
		     INNER JOIN BSC_METRIC B
		           ON A.YEAR = B.YEAR
		           AND A.METRIC_ID = B.METRIC_ID
	               AND B.DELETE_DT IS NULL
	         INNER JOIN BSC_SC_DEPT C
	               ON B.YEAR = C.YEAR
	               AND B.SC_DEPT_ID = C.SC_DEPT_ID
	               AND C.DELETE_DT IS NULL
		WHERE A.YEAR = #findYear#
		  AND A.USER_ID = #loginUserId#
		ORDER BY B.SORT_ORDER, B.METRIC_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 사용자별 정평지표
	  #	기능	: SELECT
	  #	TABLE	: BSC_USER_GOV_METRIC
	==================================================================
	-->
	<select id="getUserGovMetricList" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.METRIC_ID
             , B.GOV_METRIC_NM AS METRIC_NM
        FROM BSC_USER_METRIC A
             INNER JOIN GOV_METRIC B
                   ON A.YEAR = B.YEAR
                   AND A.METRIC_ID = B.GOV_METRIC_ID
                   AND B.DELETE_DT IS NULL
                   AND B.GBN_ID = '01'
        WHERE A.YEAR = #findYear#
          AND A.USER_ID = #loginUserId#
        ORDER BY B.SORT_ORDER, B.GOV_METRIC_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 정평지표
	  #	기능	: SELECT
	  #	TABLE	: BSC_USER_GOV_METRIC
	==================================================================
	-->
	<select id="getGovMetricList" parameterClass="hashMap" resultClass="hashMap" >
        SELECT GOV_METRIC_ID, GOV_METRIC_NM
          FROM GOV_METRIC
         WHERE YEAR = #findYear#
           AND GBN_ID = '01'
           AND DELETE_DT IS NULL
         ORDER BY SORT_ORDER, GOV_METRIC_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 조직명 가져오기
	  #	기능	: SELECT
	  #	TABLE	: BSC_SC_DEPT
	==================================================================
	-->
	<select id="getScDeptNm" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT SC_DEPT_NM
		  FROM BSC_SC_DEPT
		 WHERE YEAR = #findYear#
		   AND SC_DEPT_ID = #scDeptId#
	</select>

	<!--
	==================================================================
	  # 설명	: 조직명 가져오기(사용)
	  #	기능	: SELECT
	  #	TABLE	: BSC_SC_DEPT
	==================================================================
	-->
	<select id="getScDeptCompNm" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT SC_DEPT_NM
		  FROM BSC_SC_DEPT
		 WHERE YEAR = #findYear#
		   AND SC_DEPT_ID = (SELECT SC_DEPT_ID FROM (
													 SELECT ROW_NUMBER () OVER (ORDER BY A.SC_DEPT_ID) RANK
												          , A.SC_DEPT_ID
												          , A.CONVERSION_SCORE
												   	   FROM BSC_DEPTSCORE A
												      INNER JOIN BSC_SC_DEPT B
												         ON A.YEAR = B.YEAR
												 		AND B.SC_DEPT_ID = A.SC_DEPT_ID
												 	  WHERE A.YEAR = #findYear#
												      	AND A.MON = #findMon#
												      	AND A.ANAL_CYCLE =  #findAnalCycle#
												      	AND B.SC_DEPT_GRP_ID = #scDeptGrpId#
												      	AND A.CONVERSION_SCORE = (
												 								  SELECT MAX(A.CONVERSION_SCORE)
												   									FROM BSC_DEPTSCORE A
												   								   INNER JOIN BSC_SC_DEPT B
												   									  ON A.YEAR = B.YEAR
												 									 AND B.SC_DEPT_ID = A.SC_DEPT_ID
												 								   WHERE A.YEAR = #findYear#
												      								 AND A.MON = #findMon#
												      								 AND A.ANAL_CYCLE =  #findAnalCycle#
												      								 AND B.SC_DEPT_GRP_ID = #scDeptGrpId#)
										             )
								 WHERE RANK = '1')
	</select>

	<!--
	==================================================================
	  # 설명	: 개인KPI 리스트
	  #	기능	: SELECT
	  #	TABLE	: INSA_BSC_ACH_PLAN
	==================================================================
	-->
	<select id="getInsaUserKpiList" parameterClass="hashMap" resultClass="hashMap">
		SELECT EVU_STD_ID
		     , EMP_ID
		     , EMP_NM
		     , ITEM_NO
		     , TASK_TXT
		     , RSLT_TXT
		     , SELF_GRD_CD
		     , WT
		     , DIFF_CD
		     , EXECUTE_GIGAN
		     , SUPT_TXT
		FROM INSA_BSC_ACH_PLAN
		WHERE EMP_ID = #loginUserId#
		    AND EVU_STD_ID IN ( SELECT MAX(EVU_STD_ID)
		                          FROM INSA_BSC_ACH_PLAN
		                         WHERE EMP_ID = #loginUserId# )
		ORDER BY ITEM_NO ASC
	</select>

	<!--
	==================================================================
	  # 설명	: 개인KPI 실적상세 리스트
	  #	기능	: SELECT
	  #	TABLE	: INSA_BSC_ACH_PLAN
	==================================================================
	-->
	<select id="getInsaUserKpiDetailList" parameterClass="hashMap" resultClass="hashMap">
		SELECT EVU_STD_ID
		     , EMP_ID
		     , EMP_NM
		     , ITEM_NO
		     , SEQ_NO
		     , STA_YM
		     , END_YM
		     , DTL_PLAN_TXT
		     , RSLT_TXT
		     , ACHV_RATE
		 FROM INSA_BSC_ACH_PLAN_DETAIL
		WHERE EVU_STD_ID = #evuStdId#
		  AND EMP_ID = #empId#
		  AND ITEM_NO = #itemNo#
		ORDER BY SEQ_NO ASC
	</select>

	<!--
	==================================================================
	  # 설명	: 조직성과점수
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getUserTaskNm" parameterClass="hashMap" resultClass="String">
		SELECT TASK_TXT
		  FROM INSA_BSC_ACH_PLAN
		 WHERE EVU_STD_ID = #evuStdId#
		   AND EMP_ID = #empId#
		   AND ITEM_NO = #itemNo#
	</select>

	<!--
	==================================================================
	  # 설명	: 지표연계 리스트
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRICSCORE
	==================================================================
	-->
	<select id="getMetricMatrixList" parameterClass="hashMap" resultClass="hashMap">
		WITH METRIC_MATRIX AS (
		        SELECT /*+ INDEX(B PK_BSC_SC_DEPT) */
		                    A.LV, A.YEAR, A.METRIC_ID, A.METRIC_NM
		                  , A.UP_METRIC_ID, A.SC_DEPT_ID
		                  , A.SORT_ORDER
		                  , B.SORT_ORDER AS DEPT_ORDER
		                  , B.SC_DEPT_NM, C.SCORE, C.STATUS
		        FROM (
		                    SELECT LEVEL AS LV , A.YEAR , A.METRIC_ID, A.METRIC_NM
		                              , A.UP_METRIC_ID, A.SORT_ORDER, A.SC_DEPT_ID
		                    FROM BSC_METRIC A
		                    WHERE A.YEAR = #findYear#
		                        AND A.DELETE_DT IS NULL
		                    START WITH A.METRIC_ID = #metricId#
		                    CONNECT BY PRIOR A.YEAR = A.YEAR
		                                 AND PRIOR A.METRIC_ID = A.UP_METRIC_ID
		                    ORDER SIBLINGS BY A.SORT_ORDER
		        ) A
		         LEFT OUTER JOIN BSC_SC_DEPT B ON A.YEAR = B.YEAR AND A.SC_DEPT_ID = B.SC_DEPT_ID AND B.DELETE_DT IS NULL
		         LEFT OUTER JOIN BSC_METRICSCORE C ON A.YEAR = C.YEAR AND C.MON = #findMon# AND C.ANAL_CYCLE = #findAnalCycle# AND A.METRIC_ID = C.METRIC_ID
		)
		SELECT A.METRIC_ID AS METRIC_ID_LEV1, A.METRIC_NM AS METRIC_NM_LEV1, A.SC_DEPT_NM AS SC_DEPT_NM_LEV1, A.STATUS AS STATUS_LEV1
		     , B.METRIC_ID AS METRIC_ID_LEV2, B.METRIC_NM AS METRIC_NM_LEV2, B.SC_DEPT_NM AS SC_DEPT_NM_LEV2, B.STATUS AS STATUS_LEV2
		     , C.METRIC_ID AS METRIC_ID_LEV3, C.METRIC_NM AS METRIC_NM_LEV3, C.SC_DEPT_NM AS SC_DEPT_NM_LEV3, C.STATUS AS STATUS_LEV3
		     , D.METRIC_ID AS METRIC_ID_LEV4, D.METRIC_NM AS METRIC_NM_LEV4, D.SC_DEPT_NM AS SC_DEPT_NM_LEV4, D.STATUS AS STATUS_LEV4
		     , COUNT(1) OVER(PARTITION BY NVL(A.METRIC_ID, ROWNUM)) AS LEV1_CNT
		     , ROW_NUMBER() OVER(PARTITION BY NVL(A.METRIC_ID, ROWNUM) ORDER BY A.DEPT_ORDER, A.SORT_ORDER, B.DEPT_ORDER, B.SORT_ORDER, C.DEPT_ORDER, C.SORT_ORDER, D.DEPT_ORDER, D.SORT_ORDER) AS LEV1_INDEX
		     , COUNT(1) OVER(PARTITION BY NVL(B.METRIC_ID, ROWNUM)) AS LEV2_CNT
		     , ROW_NUMBER() OVER(PARTITION BY NVL(B.METRIC_ID, ROWNUM) ORDER BY A.DEPT_ORDER, A.SORT_ORDER, B.DEPT_ORDER, B.SORT_ORDER, C.DEPT_ORDER, C.SORT_ORDER, D.DEPT_ORDER, D.SORT_ORDER) AS LEV2_INDEX
		     , COUNT(1) OVER(PARTITION BY NVL(C.METRIC_ID, ROWNUM)) AS LEV3_CNT
		     , ROW_NUMBER() OVER(PARTITION BY NVL(C.METRIC_ID, ROWNUM) ORDER BY A.DEPT_ORDER, A.SORT_ORDER, B.DEPT_ORDER, B.SORT_ORDER, C.DEPT_ORDER, C.SORT_ORDER, D.DEPT_ORDER, D.SORT_ORDER) AS LEV3_INDEX
		     , COUNT(1) OVER(PARTITION BY NVL(D.METRIC_ID, ROWNUM)) AS LEV4_CNT
		     , ROW_NUMBER() OVER(PARTITION BY NVL(D.METRIC_ID, ROWNUM) ORDER BY A.DEPT_ORDER, A.SORT_ORDER, B.DEPT_ORDER, B.SORT_ORDER, C.DEPT_ORDER, C.SORT_ORDER, D.DEPT_ORDER, D.SORT_ORDER) AS LEV4_INDEX
		FROM METRIC_MATRIX A
		         LEFT OUTER JOIN METRIC_MATRIX B ON A.YEAR = B.YEAR AND A.METRIC_ID = B.UP_METRIC_ID
		         LEFT OUTER JOIN METRIC_MATRIX C ON B.YEAR = C.YEAR AND B.METRIC_ID = C.UP_METRIC_ID
		         LEFT OUTER JOIN METRIC_MATRIX D ON C.YEAR = D.YEAR AND C.METRIC_ID = D.UP_METRIC_ID
		         LEFT OUTER JOIN METRIC_MATRIX E ON D.YEAR = E.YEAR AND D.METRIC_ID = E.UP_METRIC_ID
		WHERE A.LV = '1'
		ORDER BY A.DEPT_ORDER, A.SORT_ORDER, B.DEPT_ORDER, B.SORT_ORDER, C.DEPT_ORDER, C.SORT_ORDER, D.DEPT_ORDER, D.SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 조직지표현황
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRICSCORE
	==================================================================
	-->
	<select id="getScDeptMatrixScoreList" parameterClass="hashMap" resultClass="hashMap">
  		SELECT A.YEAR
             , A.SC_DEPT_ID
             , A.SC_DEPT_NM
             , A.METRIC_ID
             , A.METRIC_NM
             , A.WEIGHT
             , A.UNIT
             , A.UNIT_NM
             , A.EVAL_CYCLE
             , A.EVAL_CYCLE_NM
             , TO_CHAR(A.TARGET) AS TARGET
             , TO_CHAR(A.ACTUAL) AS ACTUAL
             , TO_CHAR(A.SCORE)  AS SCORE
             , A.STATUS
             , B.METRIC_ID AS UP_METRIC_ID
             , C.INSERT_USER_ID
             , D.USER_NM AS INSERT_USER_NM
          FROM BSC_METRICSCORE A
               LEFT OUTER JOIN ( SELECT A.YEAR
                                      , B.METRIC_ID
                                      , A.SUB_METRIC_ID
                                   FROM BSC_CAL_METRIC A
                                        INNER JOIN BSC_METRIC B
                                              ON A.YEAR = B.YEAR
                                              AND A.METRIC_ID = B.METRIC_ID
                                              AND B.SC_DEPT_ID = (SELECT SC_DEPT_ID FROM BSC_METRIC WHERE YEAR = #findYear# AND METRIC_ID = #metricId#)
                                              AND B.DELETE_DT IS NULL
                                  WHERE A.YEAR = #findYear#
                                    AND A.DELETE_DT IS NULL) B
                     ON A.YEAR = B.YEAR
                     AND A.METRIC_ID = B.SUB_METRIC_ID
                LEFT OUTER JOIN BSC_METRIC C ON A.YEAR = C.YEAR AND A.METRIC_ID = C.METRIC_ID AND C.DELETE_DT IS NULL
                LEFT OUTER JOIN V_ROLE_USER D ON C.INSERT_USER_ID = D.USER_ID
         WHERE A.YEAR = #findYear#
           AND A.MON = #findMon#
           AND A.ANAL_CYCLE = #findAnalCycle#
           AND A.METRIC_ID IN ( SELECT #metricId# FROM DUAL
                                 UNION
                                SELECT SUB_METRIC_ID
                                  FROM BSC_CAL_METRIC
                                 WHERE YEAR = #findYear#
                                   AND METRIC_ID = #metricId#
                               )
         ORDER BY A.SORT_ORDER
	</select>
	
		<!--
	==================================================================   
	  # 설명	: 조직성과도관리 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: 
	==================================================================
	-->
	<select id="scDeptDiagMngMain" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
		     , A.SC_DEPT_ID
		     , A.SC_DEPT_NM
		     , A.UP_SC_DEPT_ID
		     , A.LEVEL_ID
		     , A.SC_DEPT_GRP_ID
		     , A.SC_DEPT_GRP_NM
		     , A.DEPT_KIND
		     , A.DEPT_KIND_NM
		     , B.SUB_DEPT_X_POS
		     , B.SUB_DEPT_Y_POS
		     , ROUND(A.SCORE, 3) SCORE
		     , A.STATUS
		     , A.STATUS_NM
		  FROM (SELECT A.YEAR
		             , A.SC_DEPT_ID
		             , A.SC_DEPT_NM
		             , A.UP_SC_DEPT_ID
		             , A.LEVEL_ID
		             , A.SC_DEPT_GRP_ID
		             , E.CODE_NM AS SC_DEPT_GRP_NM
		             , A.DEPT_KIND
		             , F.CODE_NM AS DEPT_KIND_NM
		             , B.DW_DEPT_X_POS AS SUB_DEPT_X_POS
		             , B.DW_DEPT_Y_POS AS SUB_DEPT_Y_POS
		             , C.SCORE
		             , C.STATUS
		             , D.CODE_NM AS STATUS_NM
		          FROM (           SELECT A.YEAR
		                                , A.SC_DEPT_ID
		                                , A.SC_DEPT_NM
		                                , A.UP_SC_DEPT_ID
		                                , LEVEL AS LEVEL_ID
		                                , A.SC_DEPT_GRP_ID
		                                , A.DEPT_KIND
		                             FROM BSC_SC_DEPT A
		                            WHERE A.YEAR = #findYear#
		                              AND (A.DIAGRAM_GUBUN = '01'
		                                OR  A.SC_DEPT_GRP_ID = '01')
		                              AND A.DELETE_DT IS NULL
		                              AND LEVEL <![CDATA[<]]> 4
		                       START WITH A.SC_DEPT_ID = 'D000001'
		                       CONNECT BY PRIOR A.YEAR = A.YEAR
		                              AND PRIOR A.SC_DEPT_ID = A.UP_SC_DEPT_ID
		                ORDER SIBLINGS BY A.SORT_ORDER) A
		               LEFT OUTER JOIN BSC_SC_DEPT_ORG_CHART B
		                  ON A.YEAR = B.YEAR
		                 AND A.SC_DEPT_ID = B.DW_DEPT_ID
		                 AND B.DIAGRAM_GUBUN = '01'
		                 AND B.SC_DEPT_ID = 'D000001'
		               LEFT OUTER JOIN BSC_DEPTSCORE C
		                  ON C.YEAR = B.YEAR
		                 AND A.SC_DEPT_ID = C.SC_DEPT_ID
		                 AND C.MON = #findMon#
		                 AND C.ANAL_CYCLE = #findAnalCycle#
		               LEFT OUTER JOIN BSC_CODE D
		                  ON C.YEAR = D.YEAR
		                 AND C.STATUS = D.CODE_ID
		                 AND D.CODE_GRP_ID = '021'
		               LEFT OUTER JOIN BSC_CODE E
		                  ON A.YEAR = E.YEAR
		                 AND A.SC_DEPT_GRP_ID = E.CODE_ID
		                 AND E.CODE_GRP_ID = '003'
		               LEFT OUTER JOIN BSC_CODE F
		                  ON F.YEAR = '9999'
		                 AND A.DEPT_KIND = F.CODE_ID
		                 AND F.CODE_GRP_ID = '025'
		               LEFT OUTER JOIN BSC_SC_DEPT G
		                  ON A.YEAR = G.YEAR
		                 AND G.SC_DEPT_ID = 'D000001') A
		                , (SELECT A.YEAR
		                        , A.SC_DEPT_ID
		                        , CASE
		                             WHEN A.SC_DEPT_ID = 'D000001' THEN '155' <!-- KGS -->
		                             WHEN A.SC_DEPT_ID = 'D006311' THEN '160' <!-- 기획조정실 -->
		                             WHEN A.SC_DEPT_ID = 'D006315' THEN '225' <!-- 경영지원처 -->
		                             WHEN A.SC_DEPT_ID = 'D006320' THEN '279' <!-- 고객홍보실 -->
		                             WHEN A.SC_DEPT_ID = 'D006305' THEN '310' <!-- 검사지원처 -->
		                             WHEN A.SC_DEPT_ID = 'D006327' THEN '291' <!-- 기준처 -->
		                             WHEN A.SC_DEPT_ID = 'D006328' THEN '252' <!-- 사고점검처 -->
		                             WHEN A.SC_DEPT_ID = 'D006340' THEN '194' <!-- 시험검사처 -->
		                             WHEN A.SC_DEPT_ID = 'D006343' THEN '132' <!-- 석유화학진단처 -->
		                             WHEN A.SC_DEPT_ID = 'D006344' THEN '67' <!-- 산업시설진단처 -->
		                             WHEN A.SC_DEPT_ID = 'D006345' THEN '20' <!-- 해외사업진단처 -->
		                             WHEN A.SC_DEPT_ID = 'D006346' THEN '5' <!-- 배관진단처 -->
		                             WHEN A.SC_DEPT_ID = 'D006369' THEN '38' <!-- 교육원(통합) -->
		                             WHEN A.SC_DEPT_ID = 'D006360' THEN '95' <!-- 연구원(통합) -->                       
               						 WHEN A.SC_DEPT_ID = 'D006411' THEN '15' <!-- 방폭인증센터 -->
		                             ELSE '0'
		                          END
		                             SUB_DEPT_X_POS
		                        , CASE
		                             WHEN A.SC_DEPT_ID = 'D000001' THEN '100' <!-- KGS -->
		                             WHEN A.SC_DEPT_ID = 'D006311' THEN '0' <!-- 기획조정실 -->
		                             WHEN A.SC_DEPT_ID = 'D006315' THEN '8' <!-- 경영지원처 -->
		                             WHEN A.SC_DEPT_ID = 'D006320' THEN '38' <!-- 고객홍보실 -->
		                             WHEN A.SC_DEPT_ID = 'D006305' THEN '90' <!-- 검사지원처 -->
		                             WHEN A.SC_DEPT_ID = 'D006327' THEN '146' <!-- 기준처 -->
		                             WHEN A.SC_DEPT_ID = 'D006328' THEN '187' <!-- 사고점검처 -->
		                             WHEN A.SC_DEPT_ID = 'D006340' THEN '200' <!-- 시험검사처 -->
		                             WHEN A.SC_DEPT_ID = 'D006343' THEN '200' <!-- 석유화학진단처 -->
		                             WHEN A.SC_DEPT_ID = 'D006344' THEN '192' <!-- 산업시설진단처 -->
		                             WHEN A.SC_DEPT_ID = 'D006345' THEN '149' <!-- 해외사업진단처 -->
		                             WHEN A.SC_DEPT_ID = 'D006346' THEN '90' <!-- 배관진단처 -->
		                             WHEN A.SC_DEPT_ID = 'D006369' THEN '34' <!-- 교육원(통합) -->
		                             WHEN A.SC_DEPT_ID = 'D006360' THEN '3' <!-- 연구원(통합) -->                              
               						 WHEN A.SC_DEPT_ID = 'D006411' THEN '63' <!-- 방폭인증센터 -->          
		                             ELSE '0'
		                          END
		                             SUB_DEPT_Y_POS
		                     FROM BSC_SC_DEPT A
		                    WHERE A.YEAR = #findYear#
		                      AND (A.DIAGRAM_GUBUN = '01'
		                        OR  A.SC_DEPT_GRP_ID = '01')
		                      AND A.DELETE_DT IS NULL
		                      AND LEVEL <![CDATA[<]]> 4
		               START WITH A.SC_DEPT_ID = 'D000001'
		               CONNECT BY PRIOR A.YEAR = A.YEAR
		                      AND PRIOR A.SC_DEPT_ID = A.UP_SC_DEPT_ID
		        ORDER SIBLINGS BY A.SORT_ORDER) B
		 WHERE A.YEAR = B.YEAR
		   AND A.SC_DEPT_ID = B.SC_DEPT_ID
	</select>
	
	<!--
	==================================================================
	  # 설명	: 사용자별 지표
	  #	기능	: SELECT
	  #	TABLE	: BSC_USER_METRIC
	==================================================================
	-->
	<select id="getUserMetricListMain" parameterClass="hashMap" resultClass="hashMap">
		  SELECT *
		    FROM (SELECT A.METRIC_ID, B.METRIC_NM || '[' || C.SC_DEPT_NM || ']' AS METRIC_NM, '1' SORT_ORDER
		            FROM BSC_USER_METRIC A
		                 INNER JOIN BSC_METRIC B
		                    ON A.YEAR = B.YEAR
		                   AND A.METRIC_ID = B.METRIC_ID
		                   AND B.DELETE_DT IS NULL
		                 INNER JOIN BSC_SC_DEPT C
		                    ON B.YEAR = C.YEAR
		                   AND B.SC_DEPT_ID = C.SC_DEPT_ID
		                   AND C.DELETE_DT IS NULL
		           WHERE A.YEAR = #findYear#
		             AND A.USER_ID = #loginUserId#
		          UNION ALL
		          SELECT A.METRIC_ID, D.GOV_METRIC_NM AS METRIC_NM, '0' SORT_ORDER
		            FROM    BSC_USER_METRIC A
		                 INNER JOIN
		                    GOV_METRIC D
		                 ON A.YEAR = D.YEAR
		                AND A.METRIC_ID = D.GOV_METRIC_ID
		                AND D.DELETE_DT IS NULL
		           WHERE A.YEAR = #findYear#          
		             AND A.USER_ID = #loginUserId#)
		ORDER BY SORT_ORDER, METRIC_ID
	</select>
	
	<!--
	==================================================================
	  # 설명	: 사용자지정 지표실적 차트 목록
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getUserMetricActualMain" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.*
		     , ROUND (CASE SCORE_CAL_TYPE_ID WHEN '043' THEN F_PERSENT_DOWN (M1, T_M1) ELSE M1 / T_M1 * 100 END, 3) PERSENT1
		     , ROUND (CASE SCORE_CAL_TYPE_ID WHEN '043' THEN F_PERSENT_DOWN (M2, T_M2) ELSE M2 / T_M2 * 100 END, 3) PERSENT2
		     , ROUND (CASE SCORE_CAL_TYPE_ID WHEN '043' THEN F_PERSENT_DOWN (M3, T_M3) ELSE M3 / T_M3 * 100 END, 3) PERSENT3
		     , ROUND (CASE SCORE_CAL_TYPE_ID WHEN '043' THEN F_PERSENT_DOWN (M4, T_M4) ELSE M4 / T_M4 * 100 END, 3) PERSENT4
		     , ROUND (CASE SCORE_CAL_TYPE_ID WHEN '043' THEN F_PERSENT_DOWN (M5, T_M5) ELSE M5 / T_M5 * 100 END, 3) PERSENT5
		     , ROUND (CASE SCORE_CAL_TYPE_ID WHEN '043' THEN F_PERSENT_DOWN (M6, T_M6) ELSE M6 / T_M6 * 100 END, 3) PERSENT6
		     , ROUND (CASE SCORE_CAL_TYPE_ID WHEN '043' THEN F_PERSENT_DOWN (M7, T_M7) ELSE M7 / T_M7 * 100 END, 3) PERSENT7
		     , ROUND (CASE SCORE_CAL_TYPE_ID WHEN '043' THEN F_PERSENT_DOWN (M8, T_M8) ELSE M8 / T_M8 * 100 END, 3) PERSENT8
		     , ROUND (CASE SCORE_CAL_TYPE_ID WHEN '043' THEN F_PERSENT_DOWN (M9, T_M9) ELSE M9 / T_M9 * 100 END, 3) PERSENT9
		     , ROUND (CASE SCORE_CAL_TYPE_ID WHEN '043' THEN F_PERSENT_DOWN (M10, T_M10) ELSE M10 / T_M10 * 100 END, 3) PERSENT10
		     , ROUND (CASE SCORE_CAL_TYPE_ID WHEN '043' THEN F_PERSENT_DOWN (M11, T_M11) ELSE M11 / T_M11 * 100 END, 3) PERSENT11
		     , ROUND (CASE SCORE_CAL_TYPE_ID WHEN '043' THEN F_PERSENT_DOWN (M12, T_M12) ELSE M12 / T_M12 * 100 END, 3) PERSENT12
		  FROM (  SELECT MAX (A.YEAR) AS YEAR
		               , MAX (A.METRIC_ID) AS METRIC_ID
		               , MAX ('[' || D.SC_DEPT_NM || ']' || B.METRIC_NM) AS METRIC_NM
		               , MAX (SCORE_CAL_TYPE_ID) SCORE_CAL_TYPE_ID                                                /* 043 하향 지표*/
		               , MAX (C.VALUE) ACTUAL_MAX
		               , MIN (C.VALUE) ACTUAL_MIN
		               , MAX (E.TGT_VALUE) TARGET_MAX
		               , TO_CHAR (MAX (CASE WHEN C.MON = '01' THEN C.VALUE ELSE NULL END)) AS M1
		               , TO_CHAR (MAX (CASE WHEN C.MON = '02' THEN C.VALUE ELSE NULL END)) AS M2
		               , TO_CHAR (MAX (CASE WHEN C.MON = '03' THEN C.VALUE ELSE NULL END)) AS M3
		               , TO_CHAR (MAX (CASE WHEN C.MON = '04' THEN C.VALUE ELSE NULL END)) AS M4
		               , TO_CHAR (MAX (CASE WHEN C.MON = '05' THEN C.VALUE ELSE NULL END)) AS M5
		               , TO_CHAR (MAX (CASE WHEN C.MON = '06' THEN C.VALUE ELSE NULL END)) AS M6
		               , TO_CHAR (MAX (CASE WHEN C.MON = '07' THEN C.VALUE ELSE NULL END)) AS M7
		               , TO_CHAR (MAX (CASE WHEN C.MON = '08' THEN C.VALUE ELSE NULL END)) AS M8
		               , TO_CHAR (MAX (CASE WHEN C.MON = '09' THEN C.VALUE ELSE NULL END)) AS M9
		               , TO_CHAR (MAX (CASE WHEN C.MON = '10' THEN C.VALUE ELSE NULL END)) AS M10
		               , TO_CHAR (MAX (CASE WHEN C.MON = '11' THEN C.VALUE ELSE NULL END)) AS M11
		               , TO_CHAR (MAX (CASE WHEN C.MON = '12' THEN C.VALUE ELSE NULL END)) AS M12
		               , TO_CHAR (MAX (CASE WHEN E.MON = '01' THEN E.TGT_VALUE ELSE NULL END)) AS T_M1
		               , TO_CHAR (MAX (CASE WHEN E.MON = '02' THEN E.TGT_VALUE ELSE NULL END)) AS T_M2
		               , TO_CHAR (MAX (CASE WHEN E.MON = '03' THEN E.TGT_VALUE ELSE NULL END)) AS T_M3
		               , TO_CHAR (MAX (CASE WHEN E.MON = '04' THEN E.TGT_VALUE ELSE NULL END)) AS T_M4
		               , TO_CHAR (MAX (CASE WHEN E.MON = '05' THEN E.TGT_VALUE ELSE NULL END)) AS T_M5
		               , TO_CHAR (MAX (CASE WHEN E.MON = '06' THEN E.TGT_VALUE ELSE NULL END)) AS T_M6
		               , TO_CHAR (MAX (CASE WHEN E.MON = '07' THEN E.TGT_VALUE ELSE NULL END)) AS T_M7
		               , TO_CHAR (MAX (CASE WHEN E.MON = '08' THEN E.TGT_VALUE ELSE NULL END)) AS T_M8
		               , TO_CHAR (MAX (CASE WHEN E.MON = '09' THEN E.TGT_VALUE ELSE NULL END)) AS T_M9
		               , TO_CHAR (MAX (CASE WHEN E.MON = '10' THEN E.TGT_VALUE ELSE NULL END)) AS T_M10
		               , TO_CHAR (MAX (CASE WHEN E.MON = '11' THEN E.TGT_VALUE ELSE NULL END)) AS T_M11
		               , TO_CHAR (MAX (CASE WHEN E.MON = '12' THEN E.TGT_VALUE ELSE NULL END)) AS T_M12
		            FROM BSC_USER_METRIC A
		                 INNER JOIN BSC_METRIC B
		                    ON A.YEAR = B.YEAR
		                   AND A.METRIC_ID = B.METRIC_ID
		                   AND B.DELETE_DT IS NULL
		                 LEFT OUTER JOIN BSC_ACTUAL C
		                    ON A.YEAR = C.YEAR
		                   AND A.METRIC_ID = C.METRIC_ID
		                   AND C.ANAL_CYCLE = 'Y'
		                   AND C.ACT_STATUS_ID = '04'
		                 LEFT OUTER JOIN BSC_TARGET E
		                    ON A.YEAR = E.YEAR
		                   AND A.METRIC_ID = E.METRIC_ID
		                   AND E.ANAL_CYCLE = 'Y'
		                   AND E.TGT_STATUS_ID = '04'
		                 LEFT OUTER JOIN BSC_SC_DEPT D
		                    ON B.YEAR = D.YEAR
		                   AND B.SC_DEPT_ID = D.SC_DEPT_ID
		                   AND D.DELETE_DT IS NULL
		           WHERE A.YEAR = #year#
		             AND A.USER_ID = #userId#
		             AND A.METRIC_ID = #metricId#
		             AND B.DELETE_DT IS NULL
		             AND (A.YEAR || C.MON) <![CDATA[<=]]> (#year# || #mon#)
		        GROUP BY A.YEAR, B.SORT_ORDER, A.METRIC_ID) A
	</select>
</sqlMap>


