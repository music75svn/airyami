<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="prs.eval.evalAction">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />
	 

	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		 SELECT A.YEAR,
                A.EVAL_GRP_ID,
                B.EVAL_GRP_NM,
                A.EVAL_SEQ,
                B.EVAL_METHOD_ID,
                B.CONTENT,
                NVL(A.EVAL_SUBMIT_YN,'N') EVAL_SUBMIT_YN,
                (SELECT COUNT(1) 
                    FROM PRS_EVAL_MEMB_USER
                  WHERE YEAR = A.YEAR
                      AND EVAL_GRP_ID = A.EVAL_GRP_ID
                ) MEMB_CNT
           FROM PRS_EVAL_USER A
                INNER JOIN PRS_EVAL_GRP B
                ON A.YEAR = B.YEAR
                AND A.EVAL_GRP_ID = B.EVAL_GRP_ID
	      WHERE A.YEAR = #findYear#
	        AND A.EVAL_DEGREE_ID = #findEvalDegreeId#
	        AND A.EVAL_USER_ID = #findEvalUserId#
	      ORDER BY B.SORT_ORDER
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getEvalDegreeList" parameterClass="hashMap" resultClass="hashMap">
		  SELECT YEAR,
		         EVAL_DEGREE_ID,
		         EVAL_DEGREE_NM           
            FROM BSC_ECM_EVAL_DEGREE           
           WHERE YEAR= #findYear#    
           ORDER BY EVAL_DEGREE_ID
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<select id="getEvalUserList" parameterClass="hashMap" resultClass="hashMap">
		  SELECT DISTINCT A.EVAL_USER_ID,
                 B.USER_NM AS EVAL_USER_NM 
            FROM PRS_EVAL_USER A
                 LEFT OUTER JOIN V_ROLE_USER B
                 ON A.EVAL_USER_ID = B.USER_ID
           WHERE A.YEAR = #findYear#
             AND A.EVAL_DEGREE_ID = #findEvalDegreeId#   
           ORDER BY B.USER_NM 
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getEvalPeriodYn" parameterClass="hashMap" resultClass="java.lang.String">
		  SELECT CASE WHEN TO_CHAR( SYSDATE , 'YYYYMMDD') BETWEEN  PRS_START_DT AND PRS_END_DT THEN 'Y' ELSE 'N' END AS EVAL_PERIOD_YN      
            FROM BSC_ECM_EVAL_DEGREE 
           WHERE YEAR = #findYear#
             AND EVAL_DEGREE_ID = #findEvalDegreeId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getEvalDegreeNm" parameterClass="hashMap" resultClass="java.lang.String">
		  SELECT EVAL_DEGREE_NM
            FROM BSC_ECM_EVAL_DEGREE 
           WHERE YEAR = #year#
             AND EVAL_DEGREE_ID = #evalDegreeId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: V_ROLE_USER
	==================================================================
	-->
	<select id="getEvalUserNm" parameterClass="hashMap" resultClass="java.lang.String">
		  SELECT USER_NM
            FROM V_ROLE_USER 
           WHERE USER_ID = #evalUserId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getEvalGrpNm" parameterClass="hashMap" resultClass="java.lang.String">
		  SELECT EVAL_GRP_NM
            FROM PRS_EVAL_GRP 
           WHERE YEAR = #year#
             AND EVAL_DEGREE_ID = #evalDegreeId#
             AND EVAL_GRP_ID = #evalGrpId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<select id="getTotCnt" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT COUNT(1) MEMB_CNT
          FROM PRS_EVAL_MEMB_USER
         WHERE YEAR = #year#
           AND EVAL_DEGREE_ID = #evalDegreeId#
           AND EVAL_GRP_ID = #evalGrpId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<select id="getEvalCnt" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT COUNT(1) MEMB_CNT
          FROM PRS_EVAL
         WHERE YEAR = #year#
           AND EVAL_DEGREE_ID = #evalDegreeId#
           AND EVAL_GRP_ID = #evalGrpId#
           AND EVAL_USER_ID = #evalUserId#
           AND (GRADE_ITEM_ID != '' OR GRADE_ITEM_ID IS NOT NULL)
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<select id="getEvalGradeList" parameterClass="hashMap" resultClass="hashMap">
		   SELECT B.EVAL_METHOD_ID,
                  C.GRADE_ITEM_ID,
                  C.GRADE_ITEM_NM,
                  C.GRADE_ITEM_RATE,
                  NVL(D.ITEM_DISTRI_CNT,0) AS ITEM_DISTRI_CNT
             FROM PRS_EVAL_GRP A
                  INNER JOIN BSC_ECM_EVAL_GRADE_CONVERT_TAB B
                  ON A.YEAR = B.YEAR
                  AND A.EVAL_METHOD_ID = B.EVAL_METHOD_ID
                  INNER JOIN BSC_ECM_GRADE_DISTRI_EVAL_ITEM C
                  ON B.YEAR = C.YEAR
                  AND B.EVAL_METHOD_ID = C.EVAL_METHOD_ID
                  LEFT OUTER JOIN BSC_ECM_GRADE_DISTRI_TAB D
                  ON C.YEAR = D.YEAR
                  AND C.EVAL_METHOD_ID = D.EVAL_METHOD_ID
                  AND C.GRADE_ITEM_ID = D.GRADE_ITEM_ID
                  AND D.ITEM_CNT=#totCnt#
            WHERE A.YEAR = #year#
              AND A.EVAL_GRP_ID = #evalGrpId#
            ORDER BY C.SORT_ORDER
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<select id="getEvalList" parameterClass="hashMap" resultClass="hashMap" remapResults="true">
		           SELECT A.YEAR,
		                  A.EVAL_DEGREE_ID,
		                  A.EVAL_GRP_ID,
		                  C.DEPT_ID,
                  		  C.DEPT_NM,
		                  A.EVAL_MEMB_USER_ID,
		                  C.USER_NM AS EVAL_MEMB_USER_NM,
		                  MAX(PE.FEED) AS FEED,
		                  <iterate property="gradeIdArray" conjunction=",">
		                  MAX(CASE WHEN B.GRADE_ITEM_ID='$gradeIdArray[]$' THEN PE.GRADE_ITEM_ID END) $gradeIdArray[]$
		                  </iterate>
                     FROM PRS_EVAL_MEMB_USER A
                          LEFT OUTER JOIN ( SELECT B.EVAL_METHOD_ID,
                                                   C.GRADE_ITEM_ID,
                                                   C.GRADE_ITEM_NM,
                                                   C.GRADE_ITEM_RATE,
                                                   D.ITEM_DISTRI_CNT
                                              FROM PRS_EVAL_GRP A
                                                   INNER JOIN BSC_ECM_EVAL_GRADE_CONVERT_TAB B
                                                   ON A.YEAR = B.YEAR
                                                   AND A.EVAL_METHOD_ID = B.EVAL_METHOD_ID
                                                   INNER JOIN BSC_ECM_GRADE_DISTRI_EVAL_ITEM C
                                                   ON B.YEAR = C.YEAR
                                                   AND B.EVAL_METHOD_ID = C.EVAL_METHOD_ID
                                                   LEFT OUTER JOIN BSC_ECM_GRADE_DISTRI_TAB D
                                                   ON C.YEAR = D.YEAR
                                                   AND C.EVAL_METHOD_ID = D.EVAL_METHOD_ID
                                                   AND C.GRADE_ITEM_ID = D.GRADE_ITEM_ID
                                                   AND D.ITEM_CNT=#totCnt#
                                             WHERE A.YEAR = #year#
                                               AND A.EVAL_GRP_ID = #evalGrpId#
                                             ORDER BY C.SORT_ORDER
                                           ) B
	                      ON 1=1
	                      LEFT OUTER JOIN PRS_EVAL PE           
			              ON A.YEAR = PE.YEAR            
			              AND A.EVAL_DEGREE_ID = PE.EVAL_DEGREE_ID            
			              AND A.EVAL_GRP_ID = PE.EVAL_GRP_ID            
			              AND PE.EVAL_USER_ID =  #evalUserId#    
			              AND A.EVAL_MEMB_USER_ID = PE.EVAL_MEMB_USER_ID   
			              AND B.GRADE_ITEM_ID = PE.GRADE_ITEM_ID  
	                      LEFT OUTER JOIN V_ROLE_USER C
	                      ON A.EVAL_MEMB_USER_ID = C.USER_ID
                    WHERE A.YEAR = #year#
                      AND A.EVAL_GRP_ID =  #evalGrpId#  
            		  AND A.EVAL_DEGREE_ID = #evalDegreeId#   
                    GROUP BY A.YEAR,
		                     A.EVAL_DEGREE_ID,
		                     A.EVAL_GRP_ID,
		                     C.DEPT_ID,
                     		 C.DEPT_NM,
		                     A.EVAL_MEMB_USER_ID,
		                     C.USER_NM 

	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 삭제
	  #	기능	: UPDATE
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->	
	<update id="submitUpdateData" parameterClass="hashMap">
		UPDATE PRS_EVAL_USER 
		   SET EVAL_SUBMIT_YN = #evalSubmitYn#
		 WHERE 1 = 1 
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND EVAL_GRP_ID = #evalGrpId#
		   AND EVAL_USER_ID = #evalUserId#
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 등록
	  #	기능	: INSERT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->	
	<insert id="insertData" parameterClass="hashMap">
		INSERT INTO PRS_EVAL( 
			   YEAR
			 , EVAL_DEGREE_ID
			 , EVAL_GRP_ID
			 , EVAL_USER_ID
			 , EVAL_MEMB_USER_ID
			 , GRADE_ITEM_ID
			 , FEED
			 , CREATE_DT
			 ) VALUES ( 
			   #year#
			 , #evalDegreeId#
			 , #evalGrpId#
			 , #evalUserId#
			 , #userId#
			 , #gradeId#
			 , #feed#
			 , SYSDATE
			 )
	</insert>	

	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 삭제
	  #	기능	: UPDATE
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->	
	<update id="deleteData" parameterClass="hashMap">
		DELETE FROM PRS_EVAL 
		 WHERE 1 = 1 
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND EVAL_GRP_ID = #evalGrpId#
		   AND EVAL_USER_ID = #evalUserId#
	</update>
	
	
</sqlMap>


