<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="bsc.base.metric">

	<!--
	==================================================================
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />


	<!--
	==================================================================
	  # 설명	: 조직별KPI관리 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
     SELECT *
       FROM(
		SELECT /*+ ordered */
	            A.YEAR
	          , A.PERSPECTIVE_ID
              , J.PERSPECTIVE_NM
	          , A.STRATEGY_ID
	          , H.STRATEGY_NM
	          , A.CSF_ID
	          , CSF.CSF_NM
	          <!-- , H.DIRECTION_NM STRATEGY_NM -->
	          , A.METRIC_ID
	          , A.METRIC_NM
	          , I.METRIC_ID AS UP_METRIC_ID
	          , A.METRIC_GRP_ID
	          , B.METRIC_GRP_NM
	          , A.TYPE_ID
	          , A.METRIC_PROPERTY_ID
	          , A.EVAL_CYCLE
	          , A.UNIT
	          , A.WEIGHT
	          , A.SORT_ORDER
	          , A.ACTUAL_Y
	          , A.INSERT_USER_ID
              , F.USER_NM AS INSERT_USER_NM
              , A.APPROVE_USER_ID
              , G.USER_NM AS APPROVE_USER_NM
	          , NVL(E.ACTION_CNT, 0) ||'/'|| NVL(E.PLAN_CNT, 0) AS PLAN_CNT
	          , CASE WHEN A.TYPE_ID =  '01' THEN TO_CHAR(D.TGT_VALUE) ELSE TARGETY_TXT END TARGETY
	          , F_CODE_NM('007', A.TYPE_ID, A.YEAR) AS TYPE_NM
	          , F_CODE_NM('010', A.METRIC_PROPERTY_ID, A.YEAR) AS METRIC_PROPERTY_NM
	          , F_CODE_NM('008', A.EVAL_CYCLE, A.YEAR) AS EVAL_CYCLE_NM
	          , F_CODE_NM('013', A.UNIT, A.YEAR) AS UNIT_NM
	          , ADJUST_RATE
	          , A.DESCRIPTION
	          <!-- , H.DIRECTION_NM DB_INITIATIVE_NM -->
	          , J.SORT_ORDER AS SORT_ORDER1
              , C.SORT_ORDER AS SORT_ORDER2
              , A.SORT_ORDER AS SORT_ORDER3
	    FROM BSC_METRIC A
	         LEFT OUTER JOIN BSC_METRIC_GRP B ON A.YEAR = B.YEAR AND A.METRIC_GRP_ID = B.METRIC_GRP_ID
	         LEFT OUTER JOIN BSC_DEPT_STRATEGY C ON A.YEAR = C.YEAR AND A.STRATEGY_ID = C.STRATEGY_ID AND A.SC_DEPT_ID = C.SC_DEPT_ID
	         LEFT OUTER JOIN BSC_CSF CSF ON A.YEAR = CSF.YEAR AND A.CSF_ID = CSF.CSF_ID
	         LEFT OUTER JOIN BSC_TARGET D ON A.YEAR = D.YEAR AND A.METRIC_ID = D.METRIC_ID AND D.MON = '12' AND D.ANAL_CYCLE = 'Y'
	         LEFT OUTER JOIN (SELECT YEAR, METRIC_ID
	                               , COUNT(CASE WHEN PLAN_START_DT IS NOT NULL THEN 1 ELSE NULL END) AS PLAN_CNT
	                               , COUNT(CASE WHEN ACT_START_DT IS NOT NULL THEN 1 ELSE NULL END) AS ACTION_CNT
	                            FROM BSC_INITIATIVE
	                           WHERE YEAR = #findYear#
	                           GROUP BY YEAR, METRIC_ID) E ON A.YEAR = E.YEAR AND A.METRIC_ID = E.METRIC_ID
             LEFT OUTER JOIN V_ROLE_USER F ON A.INSERT_USER_ID = F.USER_ID
             LEFT OUTER JOIN V_ROLE_USER G ON A.APPROVE_USER_ID = G.USER_ID             
             <!-- LEFT OUTER JOIN BSC_DIRECTION H ON A.YEAR = H.YEAR AND C.STRATEGY_ID = H.DIRECTION_ID  -->
             LEFT OUTER JOIN(SELECT
                                  A.YEAR,
                                  A.METRIC_ID,
                                  B.SUB_METRIC_ID
                             FROM BSC_METRIC A
                            INNER JOIN BSC_CAL_METRIC B ON A.YEAR = B.YEAR AND A.METRIC_ID = B.METRIC_ID AND B.DELETE_DT IS NULL
                            WHERE A.YEAR =   #findYear#
                              AND A.SC_DEPT_ID = #findScDeptId#
                              AND A.DELETE_DT IS NULL) I ON A.YEAR=I.YEAR AND A.METRIC_ID=I.SUB_METRIC_ID
             LEFT OUTER JOIN BSC_PERSPECTIVE J
               ON A.YEAR = J.YEAR
              AND A.PERSPECTIVE_ID = J.PERSPECTIVE_ID
              AND J.DELETE_DT IS NULL
	    	 LEFT OUTER JOIN BSC_STRATEGY H
               ON A.YEAR = H.YEAR
              AND A.STRATEGY_ID = H.STRATEGY_ID
	    WHERE A.YEAR = #findYear#

	    <isNotEmpty prepend="AND" property="findScDeptId">
	    	A.SC_DEPT_ID = #findScDeptId#
	    </isNotEmpty>

	    <isEqual prepend="AND" property="findUseYn" compareValue="N">
           	A.DELETE_DT IS NOT NULL
	    </isEqual>

	    <isNotEqual prepend="AND" property="findUseYn" compareValue="N">
           	A.DELETE_DT IS NULL
	    </isNotEqual>
	    ) Z
	    START WITH Z.UP_METRIC_ID IS NULL
        CONNECT BY PRIOR Z.METRIC_ID = Z.UP_METRIC_ID
        ORDER SIBLINGS BY SORT_ORDER1, SORT_ORDER2, SORT_ORDER3
	</select>

	<!--
	==================================================================
	  # 설명	: 조직별KPI 가중치 합계 가져오기
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getDeptWeight" parameterClass="hashMap" resultClass="java.lang.String">
        SELECT NVL(SUM(WEIGHT), 0) AS WEIGHT_SUM
	      FROM BSC_METRIC A
	     WHERE A.YEAR = #findYear#

	    <isNotEmpty prepend="AND" property="findScDeptId">
	    	A.SC_DEPT_ID = #findScDeptId#
	    </isNotEmpty>

	    <isEqual prepend="AND" property="findUseYn" compareValue="N">
           	A.DELETE_DT IS NOT NULL
	    </isEqual>

	    <isNotEqual prepend="AND" property="findUseYn" compareValue="N">
           	A.DELETE_DT IS NULL
	    </isNotEqual>
	      AND A.METRIC_ID NOT IN(
                        SELECT
                              B.SUB_METRIC_ID
                          FROM BSC_METRIC A
                         INNER JOIN BSC_CAL_METRIC B ON A.YEAR = B.YEAR AND A.METRIC_ID = B.METRIC_ID AND B.DELETE_DT IS NULL
                         WHERE A.YEAR =   #findYear#
                           AND A.SC_DEPT_ID =  #findScDeptId#
                           AND A.DELETE_DT IS NULL)

	</select>

	<!--
	==================================================================
	  # 설명	: 조직별 담당자 및 KPI 승인상태 가져오기
	  #	기능	: SELECT
	  #	TABLE	: BSC_SC_DEPT, BSC_KPI_APPROVE
	==================================================================
	-->
	<select id="getScDeptInfo" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.SC_DEPT_ID
		     , A.SC_DEPT_NM
		     , A.BSC_USER_ID
		     , A.MANAGER_USER_ID
		     , B.APPROVE_STATUS_ID
		     , F_CODE_NM('027', NVL(B.APPROVE_STATUS_ID , '02'), A.YEAR)  AS APPROVE_STATUS_NM
		FROM BSC_SC_DEPT A
		     LEFT OUTER JOIN BSC_KPI_APPROVE B ON A.YEAR = B.YEAR AND A.SC_DEPT_ID = B.SC_DEPT_ID
		WHERE A.YEAR = #findYear#
		  AND A.SC_DEPT_ID = #findScDeptId#
	</select>


	<!--
	==================================================================
	  # 설명	: 조직별KPI 입력 마감정보 가져오기
	  #	기능	: SELECT
	  #	TABLE	: BSC_CLOSING_MANAGE
	==================================================================
	-->
	<select id="getCloseYn" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT NVL(MAX(KPI_CLOSING_YN), 'N') AS KPI_CLOSING_YN
		  FROM BSC_CLOSING_MANAGE
		 WHERE YEAR = #findYear#
	</select>

	<!--
	==================================================================
	  # 설명	: 조직별KPI관리 상세 보기
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
		SELECT /*+ ORDERED */
		       A.YEAR
             , A.METRIC_ID
             , A.METRIC_NM
             , A.METRIC_GRP_ID
             , D.METRIC_GRP_NM
             , A.SC_DEPT_ID
             , A.TYPE_ID
             , A.STRATEGY_ID
			 , (SELECT STRATEGY_NM FROM BSC_STRATEGY WHERE YEAR = A.YEAR AND STRATEGY_ID = A.STRATEGY_ID AND DELETE_DT IS NULL) STRATEGY_NM
			 , A.PERSPECTIVE_ID
			 , (SELECT PERSPECTIVE_NM FROM BSC_PERSPECTIVE WHERE YEAR = A.YEAR AND PERSPECTIVE_ID = A.PERSPECTIVE_ID AND DELETE_DT IS NULL) PERSPECTIVE_NM
             , A.KPI_PURPOSE
             , A.BSC_METRIC_GBN
             , A.UP_METRIC_ID
             , CASE WHEN B.METRIC_NM IS NOT NULL THEN B.METRIC_NM ||' - '||C.SC_DEPT_NM ELSE NULL END UP_METRIC_NM
             , A.METRIC_PROPERTY_ID
       		 , A.DOWN_SCORE_YN
             , A.TAM_SHARE_YN
             , A.WEIGHT
             , A.EVAL_CYCLE
             , A.TIME_ROLLUP
             , A.DEPT_ROLLUP
             , A.CAL_GUBUN
             , A.ACT_CAL_TYPE
             , A.SCORE_CAL_TYPE_GUBUN
             , A.SCORE_CAL_TYPE_ID
             , J.CAL_TYPE_NM AS SCORE_CAL_TYPE_NM
             , A.TGT_INSERT_GUBUN
             , A.INITIATIVE_YN
             , A.UNIT
             , A.SORT_ORDER
             , A.ITEM_CD
             , G.ITEM_NM
             , A.INSERT_USER_ID
             , E.USER_NM AS INSERT_USER_NM
             , A.APPROVE_USER_ID
             , F.USER_NM AS APPROVE_USER_NM
             , A.ACTUAL_Y
             , A.ACTUAL_3Y
             , A.ACTUAL_2Y
             , A.ACTUAL_1Y
             , A.STRETCH_GOAL
             , A.MEDIUM_TARGETY
             , A.TARGET_Y1
             , A.TARGETY_TXT
             , A.CONTENT
             , A.DESCRIPTION
             , A.ADJUST_RATE
             , A.DEGREE_YN
             , A.CSF_ID
             , (SELECT CSF_NM FROM BSC_CSF WHERE YEAR = A.YEAR AND CSF_ID = A.CSF_ID AND DELETE_DT IS NULL) CSF_NM
             , A.DIRECTION_ID
             , CASE WHEN A.DELETE_DT IS NULL THEN 'Y' ELSE 'N' END AS USE_YN
             , A.DEGREE_INDEX_CD
             , A.DEGREE_CHALLENGE_CD
             , A.DEGREE_CONTROL1_CD
             , A.DEGREE_CONTROL2_CD
             , (SELECT CODE_NM FROM BSC_CODE WHERE YEAR = A.YEAR AND CODE_GRP_ID = '173' AND CODE_ID = A.DEGREE_INDEX_CD AND DELETE_DT IS NULL) DEGREE_INDEX_NM
       		 , (SELECT CODE_NM FROM BSC_CODE WHERE YEAR = A.YEAR AND CODE_GRP_ID = '174' AND CODE_ID = A.DEGREE_CHALLENGE_CD AND DELETE_DT IS NULL) DEGREE_CHALLENGE_NM
       		 , (SELECT CODE_NM FROM BSC_CODE WHERE YEAR = A.YEAR AND CODE_GRP_ID = '175' AND CODE_ID = A.DEGREE_CONTROL1_CD AND DELETE_DT IS NULL) DEGREE_CONTROL1_NM
       		 , (SELECT CODE_NM FROM BSC_CODE WHERE YEAR = A.YEAR AND CODE_GRP_ID = '176' AND CODE_ID = A.DEGREE_CONTROL2_CD AND DELETE_DT IS NULL) DEGREE_CONTROL2_NM
         FROM BSC_METRIC A
              LEFT OUTER JOIN BSC_METRIC B			ON A.YEAR = B.YEAR AND A.UP_METRIC_ID = B.METRIC_ID AND B.DELETE_DT IS NULL
              LEFT OUTER JOIN BSC_SC_DEPT C 		ON A.YEAR = C.YEAR AND B.SC_DEPT_ID = C.SC_DEPT_ID AND C.DELETE_DT IS NULL
              LEFT OUTER JOIN BSC_METRIC_GRP D 		ON A.YEAR = D.YEAR AND A.METRIC_GRP_ID = D.METRIC_GRP_ID AND D.DELETE_DT IS NULL
              LEFT OUTER JOIN V_ROLE_USER E 		ON A.INSERT_USER_ID = E.USER_ID
              LEFT OUTER JOIN V_ROLE_USER F 		ON A.APPROVE_USER_ID = F.USER_ID
              LEFT OUTER JOIN BSC_SYSTEM_ITEM G 	ON A.YEAR = G.YEAR AND A.ITEM_CD = G.ITEM_CD AND G.DELETE_DT IS NULL
              LEFT OUTER JOIN BSC_DEPT_STRATEGY H 	ON A.YEAR = H.YEAR AND A.STRATEGY_ID = H.STRATEGY_ID AND A.SC_DEPT_ID = H.SC_DEPT_ID AND H.DELETE_DT IS NULL
              <!-- LEFT OUTER JOIN BSC_DIRECTION K ON H.YEAR = K.YEAR AND H.STRATEGY_ID = K.DIRECTION_ID AND K.DELETE_DT IS NULL -->
              LEFT OUTER JOIN BSC_CAL_TYPE J 		ON A.SCORE_CAL_TYPE_ID = J.CAL_TYPE_ID AND J.CAL_TYPE_GUBUN = '01' AND J.DELETE_DT IS NULL
        WHERE A.YEAR = #year#
          AND A.METRIC_ID = #metricId#
	</select>

	<!--
	==================================================================
	  # 설명	: 지표산식 목록 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_CAL_TYPE_COL
	==================================================================
	-->
	<select id="calTypeColList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
             , A.METRIC_ID
             , A.CAL_TYPE_COL
             , A.CAL_TYPE_COL_NM
             , A.INSERT_GUBUN
             , A.UNIT
             , A.SOURCE_SYSTEM
             , A.ITEM_CD
             , B.ITEM_NM
        FROM BSC_CAL_TYPE_COL A
             LEFT OUTER JOIN BSC_SYSTEM_ITEM B ON A.YEAR = B.YEAR AND A.ITEM_CD = B.ITEM_CD AND B.DELETE_DT IS NULL
        WHERE A.YEAR = #year#
          AND A.METRIC_ID = #metricId#
          AND A.DELETE_DT IS NULL
        ORDER BY A.CAL_TYPE_COL ASC
	</select>

	<!--
	==================================================================
	  # 설명	: 득점산식 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_CAL_TYPE
	==================================================================
	-->
	<select id="scoreCalTypeList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.CAL_TYPE_ID
		     , A.CAL_TYPE_NM
		  FROM BSC_CAL_TYPE A
	 	 WHERE A.CAL_TYPE_GUBUN = '01'
	 	   AND A.DELETE_DT IS NULL
	 	 ORDER BY A.CAL_TYPE_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 구간대 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_EVAL_SECTION_GRP
	==================================================================
	-->
	<select id="evalSectionList" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.CODE_ID AS EVAL_SECTION_ID
             , A.CODE_NM AS EVAL_SECTION_NM
             , B.METRIC_ID
             , B.FROM_VALUE
             , B.TO_VALUE
             , B.CONVERSION_SCORE
             , CASE WHEN C.SCORE_CAL_TYPE_GUBUN = '04' THEN  B.TO_VALUE
                    ELSE B.FROM_VALUE
                    END VIEW_VAL
        FROM BSC_CODE A
                 LEFT OUTER JOIN BSC_EVAL_SECTION B
                         ON B.YEAR = #year#
                         AND B.METRIC_ID = #metricId#
                         AND A.CODE_ID = B.EVAL_SECTION_ID
                         AND B.DELETE_DT IS NULL
                 LEFT OUTER JOIN BSC_METRIC C
                         ON B.YEAR = C.YEAR
                         AND B.METRIC_ID = C.METRIC_ID
        WHERE A.CODE_GRP_ID = '020'
          AND A.YEAR = (SELECT CASE YEAR_YN WHEN 'Y' THEN #year# ELSE '9999' END FROM BSC_CODE_GRP WHERE CODE_GRP_ID = '020')
          AND A.DELETE_DT IS NULL
        ORDER BY A.SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 득점산식 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_CODE
	==================================================================
	-->
	<select id="gradeList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.CODE_ID
		     , A.CODE_NM
		  FROM BSC_CODE A
		 WHERE A.YEAR = #year#
		   AND A.CODE_GRP_ID = '118'
		 ORDER BY A.SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 조직별KPI관리 목록 보기
	  #	기능	: SELECT
	  #	TABLE	:
	==================================================================
	-->
	<select id="getStrategyList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.STRATEGY_ID
		     , A.STRATEGY_NM
		FROM BSC_STRATEGY A
		WHERE A.YEAR = #year#
		  AND A.DELETE_DT IS NULL
		ORDER BY A.SORT_ORDER, A.STRATEGY_NM
	</select>

	<!--
	==================================================================
	  # 설명	: 지표코드 채번
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getMetricId" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT F_PGM_SERI('BSC_METRIC','','','','','') SEQ FROM DUAL
	</select>

	<!--
	==================================================================
	  # 설명	: 조직별KPI관리 등록
	  #	기능	: INSERT
	  #	TABLE	:
	==================================================================
	-->
	<insert id="insertData" parameterClass="hashMap">
		INSERT INTO BSC_METRIC (
		       YEAR
		     , METRIC_ID
		     , METRIC_NM
		     , METRIC_GRP_ID
		     , SC_DEPT_ID
		     , TYPE_ID
		     , PERSPECTIVE_ID
		     , STRATEGY_ID
		     , CSF_ID
		     , DIRECTION_ID
		     , KPI_PURPOSE
		     , BSC_METRIC_GBN
		     , UP_METRIC_ID
		     , METRIC_PROPERTY_ID
		     , TAM_SHARE_YN
		     , EVAL_CYCLE
		     , TIME_ROLLUP
		     , DEPT_ROLLUP
		     , ACT_CAL_TYPE
		     , SCORE_CAL_TYPE_GUBUN
		     , SCORE_CAL_TYPE_ID
		     , TGT_INSERT_GUBUN
		     , UNIT
		     , ITEM_CD
		     , INSERT_USER_ID
		     , APPROVE_USER_ID
		     , ACTUAL_Y
		     , STRETCH_GOAL
		     , MEDIUM_TARGETY
		     , ADJUST_RATE
		     , CONTENT
		     , DESCRIPTION
		     , DEGREE_YN
		     , DEGREE_INDEX_CD
		     , DEGREE_CHALLENGE_CD
		     , DEGREE_CONTROL1_CD
		     , DEGREE_CONTROL2_CD
		     , CREATE_DT
		     , DELETE_DT
		     , DOWN_SCORE_YN
		   ) VALUES (
               #year#
             , #metricId#
             , #metricNm#
             , #metricGrpId#
             , #scDeptId#
             , #typeId#
             , #perspectiveId#
             , #strategyId#
             , #csfId#
             , #directionId#
             , #kpiPurpose#
             , #bscMetricGbn#
             , #upMetricId#
             , #metricPropertyId#
             , #tamShareYn#
             , #evalCycle#
             , #timeRollup#
             , #deptRollup#
             , #actCalType#
             , #scoreCalTypeGubun#
             , #scoreCalTypeId#
             , #tgtInsertGubun#
             , #unit#
             , #itemCd#
             , #insertUserId#
             , #approveUserId#
             , #actualY#
             , #stretchGoal#
             , #mediumTargety#
             , #adjustRate#
             , #content#
             , #description#
             , #degreeYn#
             , #degreeIndexCd#
             , #degreeChallengeCd#
             , #degreeControl1Cd#
             , #degreeControl1Cd#
             , SYSDATE
             ,
			 <isEqual property="useYn" compareValue="Y">
		     NULL
		     </isEqual>
		     <isNotEqual property="useYn" compareValue="Y">
		     SYSDATE
		     </isNotEqual>
		     , #downScoreYn#
		   )
	</insert>

	<!--
	==================================================================
	  # 설명	: 조직별KPI관리 수정
	  #	기능	: UPDATE
	  #	TABLE	:
	==================================================================
	-->
	<update id="updateData" parameterClass="hashMap">
		UPDATE BSC_METRIC
		   SET METRIC_NM            = #metricNm#
		     , METRIC_GRP_ID        = #metricGrpId#
		     , SC_DEPT_ID           = #scDeptId#
		     , TYPE_ID              = #typeId#
		     , PERSPECTIVE_ID		= #perspectiveId#
		     , STRATEGY_ID          = #strategyId#
		     , CSF_ID               = #csfId#
		     , DIRECTION_ID         = #directionId#
		     , KPI_PURPOSE          = #kpiPurpose#
		     , BSC_METRIC_GBN       = #bscMetricGbn#
		     , UP_METRIC_ID         = #upMetricId#
		     , METRIC_PROPERTY_ID   = #metricPropertyId#
		     , TAM_SHARE_YN         = #tamShareYn#
		     , EVAL_CYCLE           = #evalCycle#
		     , TIME_ROLLUP          = #timeRollup#
		     , DEPT_ROLLUP          = #deptRollup#
		     , ACT_CAL_TYPE         = #actCalType#
		     , SCORE_CAL_TYPE_GUBUN = #scoreCalTypeGubun#
		     , SCORE_CAL_TYPE_ID    = #scoreCalTypeId#
		     , TGT_INSERT_GUBUN     = #tgtInsertGubun#
		     , UNIT                 = #unit#
		     , ITEM_CD              = #itemCd#
		     , INSERT_USER_ID       = #insertUserId#
		     , APPROVE_USER_ID      = #approveUserId#
		     , ACTUAL_Y             = #actualY#
		     , STRETCH_GOAL         = #stretchGoal#
		     , MEDIUM_TARGETY       = #mediumTargety#
		     , ADJUST_RATE          = #adjustRate#
		     , CONTENT              = #content#
		     , DESCRIPTION          = #description#
		     , DEGREE_YN			= #degreeYn#
		     , DEGREE_INDEX_CD      = #degreeIndexCd#
		     , DEGREE_CHALLENGE_CD  = #degreeChallengeCd#
		     , DEGREE_CONTROL1_CD   = #degreeControl1Cd#
		     , DEGREE_CONTROL2_CD   = #degreeControl2Cd#
		     , MODIFY_DT            = SYSDATE
		    <isEqual property="useYn" compareValue="N">
            	, DELETE_DT         = SYSDATE
		    </isEqual>
		    <isNotEqual property="useYn" compareValue="N">
            	, DELETE_DT         = NULL
		    </isNotEqual>
		    , DOWN_SCORE_YN         = #downScoreYn#
		WHERE YEAR = #year#
		  AND METRIC_ID = #metricId#
	</update>

	<!--
	==================================================================
	  # 설명	: 지표 산식항목 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_CAL_TYPE_COL
	==================================================================
	-->
	<delete id="deleteCalTypeCol" parameterClass="hashMap">
		DELETE FROM BSC_CAL_TYPE_COL
		WHERE YEAR = #year#
		  AND METRIC_ID = #metricId#
	</delete>

	<!--
	==================================================================
	  # 설명	: 지표산식 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_METRIC_GRP
	==================================================================
	-->
	<insert id="insertCalTypeCol" parameterClass="hashMap">
		INSERT INTO BSC_CAL_TYPE_COL (
               YEAR
             , METRIC_ID
             , CAL_TYPE_COL
             , CAL_TYPE_COL_NM
             , INSERT_GUBUN
             , UNIT
             , SOURCE_SYSTEM
             , ITEM_CD
             , CREATE_DT
           ) VALUES (
               #year#
             , #metricId#
             , #calTypeCol#
             , #calTypeColNm#
             , #insertGubun#
             , #unit#
             , #sourceSystem#
             , #itemCd#
             , SYSDATE
             )
	</insert>

	<!--
	==================================================================
	  # 설명	: 지표 구간대항목 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_EVAL_SECTION
	==================================================================
	-->
	<delete id="deleteEvalSection" parameterClass="hashMap">
		DELETE FROM BSC_EVAL_SECTION
		WHERE YEAR = #year#
		  AND METRIC_ID = #metricId#
	</delete>

	<!--
	==================================================================
	  # 설명	: 지표 구간대항목 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_EVAL_SECTION
	==================================================================
	-->
	<insert id="insertEvalSection" parameterClass="hashMap">
		INSERT INTO BSC_EVAL_SECTION (
               YEAR
             , METRIC_ID
             , EVAL_SECTION_ID
             , FROM_VALUE
             , TO_VALUE
             , CONVERSION_SCORE
             , CREATE_DT
           ) VALUES (
               #year#
             , #metricId#
             , #evalSectionId#
             , #fromValue#
             , #toValue#
             , #conversionScore#
             , SYSDATE
               )
	</insert>

	<!--
	==================================================================
	  # 설명	: 조직별KPI관리 삭제
	  #	기능	: UPDATE
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<update id="deleteData" parameterClass="hashMap">
		UPDATE BSC_METRIC
		   SET DELETE_DT = SYSDATE
		 WHERE YEAR = #year#
		   AND METRIC_ID = #metricId#
	</update>


	<!--
	==================================================================
	  # 설명	: 지표POOL 데이터 조회후 셋팅(AJAX)
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC_GRP
	==================================================================
	-->
	<select id="getMetricGrpDataAjax" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
		     , A.METRIC_GRP_ID
		     , A.METRIC_GRP_NM
		     , A.TYPE_ID
		     , A.METRIC_PROPERTY_ID
		     , A.KPI_PURPOSE
		     , A.CHARGE_SC_DEPT_ID
		     , A.EVAL_CYCLE
		     , A.TIME_ROLLUP
		     , A.UNIT
		     , A.ACT_CAL_TYPE
		     , A.SCORE_CAL_TYPE_GUBUN
		     , A.SCORE_CAL_TYPE_ID
		     , A.CONTENT
		     , A.DESCRIPTION
		     , A.STRATEGY_ID
		     , A.CSF_ID
		     , A.DIRECTION_ID
		FROM BSC_METRIC_GRP A
		WHERE A.YEAR = #findYear#
		  AND A.METRIC_GRP_ID =  #findMetricGrpId#
	</select>

	<!--
	==================================================================
	  # 설명	: 측정주기 목록 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_ACT_REG_DEF_MON_GRP
	==================================================================
	-->
	<select id="regGrpMonList" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR
		     , METRIC_GRP_ID
		     , MON
		FROM BSC_ACT_REG_DEF_MON_GRP
		WHERE YEAR = #findYear#
		  AND METRIC_GRP_ID = #findMetricGrpId#
	</select>

	<!--
	==================================================================
	  # 설명	: 지표POOL 산식항목 데이터 조회후 셋팅(AJAX)
	  #	기능	: SELECT
	  #	TABLE	: BSC_CAL_TYPE_COL_GRP
	==================================================================
	-->
	<select id="getMetricGrpCalTypeColAjax" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
		     , A.METRIC_GRP_ID
		     , A.CAL_TYPE_COL
		     , A.CAL_TYPE_COL_NM
		     , A.INSERT_GUBUN
		     , A.UNIT
		     , A.SOURCE_SYSTEM
		     , A.ITEM_CD
		     , B.ITEM_NM
		FROM BSC_CAL_TYPE_COL_GRP A
		     LEFT OUTER JOIN BSC_SYSTEM_ITEM B ON A.YEAR = B.YEAR AND A.ITEM_CD = B.ITEM_CD AND B.DELETE_DT IS NULL
		WHERE A.YEAR = #findYear#
		  AND A.METRIC_GRP_ID =  #findMetricGrpId#
		  AND A.DELETE_DT IS NULL
		ORDER BY A.CAL_TYPE_COL
	</select>

	<!--
	==================================================================
	  # 설명	: 지표POOL 산식항목 데이터 조회후 셋팅(AJAX)
	  #	기능	: SELECT
	  #	TABLE	: BSC_EVAL_SECTION_GRP
	==================================================================
	-->
	<select id="getMetricGrpEvalSectionGrpAjax" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
		     , A.METRIC_GRP_ID
		     , A.EVAL_SECTION_ID
		     , A.FROM_VALUE
		     , A.TO_VALUE
		     , A.CONVERSION_SCORE
		     , CASE WHEN B.SCORE_CAL_TYPE_GUBUN = '04' THEN A.TO_VALUE
                    ELSE A.FROM_VALUE
                    END VIEW_VAL
		FROM BSC_EVAL_SECTION_GRP A
			 LEFT OUTER JOIN BSC_METRIC_GRP B ON A.YEAR = B.YEAR AND A.METRIC_GRP_ID = B.METRIC_GRP_ID
		WHERE A.YEAR = #findYear#
		  AND A.METRIC_GRP_ID =  #findMetricGrpId#
		  AND A.DELETE_DT IS NULL
		ORDER BY  A.EVAL_SECTION_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 지표목표 목록 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_TARGET, BSC_METRIC
	==================================================================
	-->
	<select id="getTargetList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
	         , A.METRIC_ID
	         , A.MON
	         , TO_CHAR(A.TGT_VALUE) AS TGT_VALUE
	         , B.UNIT
		  FROM BSC_TARGET A
		       LEFT OUTER JOIN BSC_METRIC B ON A.YEAR = B.YEAR  AND A.METRIC_ID = B.METRIC_ID
		 WHERE A.YEAR = #findYear#
		   AND A.METRIC_ID = #metricId#
		   AND A.ANAL_CYCLE = 'M'
		 ORDER BY YEAR, MON
	</select>


	<!--
	==================================================================
	  # 설명	: 지표 목표 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<delete id="deleteTarget" parameterClass="hashMap">
		DELETE FROM BSC_TARGET
		WHERE YEAR = #year#
		  AND METRIC_ID = #metricId#
	</delete>

	<!--
	==================================================================
	  # 설명	: 지표 목표 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<insert id="insertTarget" parameterClass="hashMap">
		INSERT INTO BSC_TARGET (
               YEAR
             , MON
             , ANAL_CYCLE
             , METRIC_ID
             , TGT_VALUE
             , INSERT_USER_ID
             , INSERT_USER_NM
             , CREATE_DT
		) VALUES (
               #year#
             , #mon#
             , 'M'
             , #metricId#
             , #tgtValue#
             , #loginUserId#
             , #loginUserNm#
             , SYSDATE
		)
	</insert>

	<!--
	==================================================================
	  # 설명	: 지표 목표 history 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_TARGET_HISTORY
	==================================================================
	-->
	<insert id="insertTargetHistory" parameterClass="hashMap">
		<selectKey resultClass="java.lang.String" keyProperty="SEQ" >
			SELECT NVL(MAX(SEQ)+1,1) AS SEQ
			  FROM BSC_TARGET_HISTORY
			 WHERE YEAR       = #year#
			   AND MON        = #mon#
			   AND ANAL_CYCLE = 'M'
			   AND METRIC_ID  = #metricId#
		</selectKey>
		INSERT INTO BSC_TARGET_HISTORY (
               YEAR
             , MON
             , ANAL_CYCLE
             , METRIC_ID
             , SEQ
             , TGT_VALUE
             , INSERT_USER_ID
             , INSERT_USER_NM
             , CREATE_DT
		) VALUES (
               #year#
             , #mon#
             , 'M'
             , #metricId#
             , #SEQ#
             , #tgtValue#
             , #loginUserId#
             , #loginUserNm#
             , SYSDATE
		)
	</insert>

	<!--
	==================================================================
	  # 설명	: 지표 기준월 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_ACT_REG_DEF_MON
	==================================================================
	-->
	<delete id="deleteActRegDefMon" parameterClass="hashMap">
		DELETE FROM BSC_ACT_REG_DEF_MON
		WHERE YEAR = #year#
		  AND METRIC_ID = #metricId#
	</delete>

	<!--
	==================================================================
	  # 설명	: 지표 기준월 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_ACT_REG_DEF_MON
	==================================================================
	-->
	<insert id="insertActRegDefMon" parameterClass="hashMap">
		INSERT INTO BSC_ACT_REG_DEF_MON (
               YEAR
             , METRIC_ID
             , MON
             , CREATE_DT
          ) VALUES (
               #year#
             , #metricId#
             , #mon#
             , SYSDATE
          )
	</insert>
	
	<!--
	==================================================================
	  # 설명	: 지표 목표 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<insert id="insertAllTarget" parameterClass="hashMap">
		MERGE INTO BSC_TARGET A
             USING (SELECT #year# YEAR, #metricId# METRIC_ID, #mon# MON FROM DUAL) B
                ON (A.YEAR = B.YEAR AND A.METRIC_ID = B.METRIC_ID AND A.MON = B.MON)       
        WHEN NOT MATCHED
        THEN
          INSERT (
               YEAR
             , MON
             , ANAL_CYCLE
             , METRIC_ID
             , TGT_VALUE
             , INSERT_USER_ID
             , INSERT_USER_NM
             , CREATE_DT
        ) VALUES (
               #year#
             , #mon#
             , 'M'
             , #metricId#
             , ''
             , #loginUserId#
             , #loginUserNm#
             , SYSDATE
        )
	</insert>
	
	<!--
	==================================================================
	  # 설명	: 목표 롤업 파라미터 맵
	  #	기능	: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<parameterMap id="targetRollupParamMap" class="java.util.HashMap">
		<parameter property="year" 		jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="metricId" 	jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
	</parameterMap>

	<!--
	==================================================================
	  # 설명	: 목표롤업 프로시져 실행
	  #	기능	: PROCEDURES
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<procedure id="execTargetTimeRollup" parameterMap="targetRollupParamMap">
		{CALL SP_BSC_TIME_ROLLUP_PLAN(?, ?)}
	</procedure>

	<!--
	==================================================================
	  # 설명	: 기존 권한 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->
	<delete id="deleteAdmin" parameterClass="hashMap">
		DELETE FROM BSC_ADMIN
		 WHERE ADMIN_GUBUN IN ('04','05')
	</delete>

	<!--
	==================================================================
	  # 설명	: KPI 담당자 입력(실적입력자)
	  #	기능	: INSERT
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->
	<insert id="insertInsertUserAdmin" parameterClass="hashMap">
		INSERT INTO BSC_ADMIN (ADMIN_GUBUN, USER_ID, DEPT_ID)
		SELECT DISTINCT '04'
		    ,  A.INSERT_USER_ID
		    , (SELECT MAX(DEPT_ID) AS DEPT_ID
		         FROM V_ROLE_USER
		        WHERE USER_ID = A.INSERT_USER_ID)
		  FROM BSC_METRIC A
		 WHERE A.DELETE_DT IS NULL
           AND A.INSERT_USER_ID IS NOT NULL
	</insert>

	<!--
	==================================================================
	  # 설명	: 실적승인자 입력
	  #	기능	: INSERT
	  #	TABLE	: BSC_ADMIN
	==================================================================
	-->
	<insert id="insertApproveUserAdmin" parameterClass="hashMap">
		INSERT INTO BSC_ADMIN (ADMIN_GUBUN, USER_ID, DEPT_ID)
		SELECT DISTINCT '05'
		     , A.APPROVE_USER_ID
		     , (SELECT MAX(DEPT_ID) AS DEPT_ID
		          FROM V_ROLE_USER
		         WHERE USER_ID = A.APPROVE_USER_ID)
		  FROM BSC_METRIC A
		 WHERE A.DELETE_DT IS NULL
		   AND A.APPROVE_USER_ID IS NOT NULL
	</insert>

	<!--
	==================================================================
	  # 설명	: 목표, 실적 공유지표 파라미터 맵
	  #	기능	: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<parameterMap id="tamShareMetricParamMap" class="java.util.HashMap">
		<parameter property="year" 		jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="metricId" 	jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
	</parameterMap>

	<!--
	==================================================================
	  # 설명	: 목표, 실적 공유지표 수정 프로시져 실행
	  #	기능	: PROCEDURES
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<procedure id="execTamShareMetric" parameterMap="tamShareMetricParamMap">
		{CALL SP_BSC_METRIC_INFO_UPDATE(?, ?)}
	</procedure>

	<!--
	==================================================================
	  # 설명	: 조직별KPI관리 일괄수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<update id="updateBatchData" parameterClass="hashMap">
		UPDATE BSC_METRIC
		   SET INSERT_USER_ID  = #insertUserId#
             , APPROVE_USER_ID = #approveUserId#
             , SORT_ORDER      = #sortOrder#
             , WEIGHT          = #weight#
		 WHERE YEAR = #year#
		   AND METRIC_ID = #metricId#
	</update>

	<!--
	==================================================================
	  # 설명	: 지표 승인데이터 건수
	  #	기능	: SELECT
	  #	TABLE	: BSC_KPI_APPROVE
	==================================================================
	-->
	<select id="getStatusCount" parameterClass="hashMap" resultClass="java.lang.Integer">
        SELECT COUNT(1)
		  FROM BSC_KPI_APPROVE
         WHERE YEAR = #year#
           AND SC_DEPT_ID = #scDeptId#
	</select>

	<!--
	==================================================================
	  # 설명	: 지표 승인데이터 입력
	  #	기능	: INSERT
	  #	TABLE	: BSC_KPI_APPROVE
	==================================================================
	-->
	<insert id="insertStatusData" parameterClass="hashMap">
		INSERT INTO  BSC_KPI_APPROVE (
               YEAR
             , SC_DEPT_ID
             , APPROVE_STATUS_ID

            <isEqual property="status" compareValue="04">
            	, REQUEST_DATE
		    </isEqual>

		    <isEqual property="status" compareValue="06">
            	, RETURN_DATE
		    </isEqual>

		    <isEqual property="status" compareValue="05">
            	, APPROVE_DATE
		    </isEqual>

             , CREATE_DT
          ) VALUES (
               #year#
             , #scDeptId#
             , #status#
             , SYSDATE
          )
	</insert>

	<!--
	==================================================================
	  # 설명	: 지표 승인데이터 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_KPI_APPROVE
	==================================================================
	-->
	<update id="updateStatusData" parameterClass="hashMap">
		UPDATE BSC_KPI_APPROVE
		   SET APPROVE_STATUS_ID = #status#

		   	<isEqual property="status" compareValue="04">
            	, REQUEST_DATE = SYSDATE
		    </isEqual>

		    <isEqual property="status" compareValue="06">
		    	, RETURN_DATE = SYSDATE
		    </isEqual>

		    <isEqual property="status" compareValue="05">
		     	, APPROVE_DATE = SYSDATE
		    </isEqual>

		     , MODIFY_DT = SYSDATE
		WHERE YEAR = #year#
		  AND SC_DEPT_ID = #scDeptId#
	</update>

	<!--
	==================================================================
	  # 설명	: 지표 반려사유 입력
	  #	기능	: INSERT
	  #	TABLE	: BSC_KPI_APPROVE
	==================================================================
	-->
	<insert id="insertReturnCauseStatusData" parameterClass="hashMap">
		<selectKey resultClass="java.lang.String" keyProperty="returnSeq" >
			SELECT NVL(MAX(RETURN_SEQ), 0) + 1 AS returnSeq
		      FROM BSC_KPI_APPROVE_RETURN
             WHERE YEAR = #year#
               AND SC_DEPT_ID = #scDeptId#
		</selectKey>
		INSERT INTO BSC_KPI_APPROVE_RETURN (
               YEAR
             , SC_DEPT_ID
             , RETURN_SEQ
             , RETURN_DATE
             , RETURN_USER_ID
             , RETURN_CAUSE
             , CREATE_DT
             ) VALUES (
       	       #year#
             , #scDeptId#
             , #returnSeq#
             , TO_CHAR(SYSDATE, 'YYYYMMDD')
             , #loginUserId#
             , #returnCause#
             , SYSDATE
             )
	</insert>


	<!--
	==================================================================
	  # 설명	: 지표 반려사유 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_KPI_APPROVE_RETURN
	==================================================================
	-->
	<select id="getReturnCause" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
		     , A.SC_DEPT_ID
		     , A.RETURN_SEQ
		     , A.RETURN_DATE
		     , A.RETURN_CAUSE
		     , A.RETURN_USER_ID
		     , B.USER_NM
		     , TO_CHAR(A.CREATE_DT, 'YYYY-MM-DD HH24:MI:SS') CREATE_DT
		 FROM BSC_KPI_APPROVE_RETURN A
		      LEFT OUTER JOIN V_ROLE_USER B ON A.RETURN_USER_ID  = B.USER_ID
		WHERE A.YEAR = #year#
		  AND A.SC_DEPT_ID = #scDeptId#
		  AND A.DELETE_DT IS NULL
	    ORDER BY A.RETURN_SEQ DESC
	</select>

	<!--
	==================================================================
	  # 설명	: 지표복사 대상 조직조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_SC_DEPT
	==================================================================
	-->
	<select id="getMetricCopyDeptList" parameterClass="hashMap" resultClass="hashMap">
		SELECT  A.YEAR
		      , A.SC_DEPT_ID
		      , A.SC_DEPT_NM
		      , A.UP_SC_DEPT_ID
		      , A.LEVEL_ID
		      , A.SC_DEPT_NM AS SC_DEPT_F_NM
		      , B.METRIC_CNT
		      , A.SC_DEPT_GRP_ID
		      , F_CODE_NM('003', A.SC_DEPT_GRP_ID, A.YEAR) AS SC_DEPT_GRP_NM
		FROM BSC_SC_DEPT A
		     LEFT OUTER JOIN ( SELECT YEAR, SC_DEPT_ID, COUNT(*) METRIC_CNT
		                         FROM BSC_METRIC
		                        WHERE YEAR = #findYear#
		                          AND DELETE_DT IS NULL
		                        GROUP BY YEAR, SC_DEPT_ID
		                     ) B ON A.YEAR = B.YEAR AND A.SC_DEPT_ID = B.SC_DEPT_ID
		WHERE A.YEAR = #findYear#
          <!-- AND A.SC_DEPT_GRP_ID = '02' -->
          AND A.SC_DEPT_ID != #scDeptId#
          AND A.DELETE_DT IS NULL

          <isNotEmpty prepend="AND" property="findScDeptNm">
	            UPPER(A.SC_DEPT_NM) LIKE  '%' || TRIM(UPPER(#findScDeptNm#)) ||'%'
		  </isNotEmpty>

		ORDER BY A.SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 지표 복사
	  #	기능	: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<parameterMap id="execMetricCopyParamMap" class="java.util.HashMap">
		<parameter property="year" 				jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="metricId" 			jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
		<parameter property="targetScDeptId" 	jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
	</parameterMap>

	<!--
	==================================================================
	  # 설명	: 지표 복사 프로시져 실행
	  #	기능	: PROCEDURES
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<procedure id="execMetricCopy" parameterMap="execMetricCopyParamMap">
		{CALL SP_BSC_METRIC_COPY(?, ?, ?)}
	</procedure>

	<!--
	==================================================================
	  # 설명	: 지표 승인데이터 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_KPI_APPROVE
	==================================================================
	-->
	<update id="moveMetric" parameterClass="hashMap">
		UPDATE BSC_METRIC
           SET SC_DEPT_ID = #targetScDeptId#
             , WEIGHT     = NULL
             , SORT_ORDER = NULL
         WHERE YEAR       = #year#
           AND METRIC_ID  = #metricId#
	</update>

	<!--
	==================================================================
	  # 설명	: 조직별KPI 입력 마감상태 가져오기
	  #	기능	: SELECT
	  #	TABLE	: BSC_CLOSING_MANAGE
	==================================================================
	-->
	<select id="getKpiClosingYn" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT NVL(MAX(KPI_CLOSING_YN), 'N') AS KPI_CLOSING_YN
		  FROM BSC_CLOSING_MANAGE
		 WHERE YEAR = #findYear#
	</select>

	<!--
	==================================================================
	  # 설명	: 조직별KPI 입력기한 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC_IN_TERM
	==================================================================
	-->
	<select id="getKpiInputTermYn" parameterClass="hashMap" resultClass="java.lang.String">
        SELECT CASE WHEN COUNT(1) > 0 THEN 'Y'
               ELSE 'N' END KPI_INPUT_TERM_YN
		  FROM BSC_METRIC_IN_TERM
		 WHERE GUBUN = '01'
		   AND YEAR = #findYear#
		   AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN START_DT AND END_DT
	</select>

	<!--
	==================================================================
	  # 설명	: 조직별 지표관리 목록 엑셀다운로드
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getExcelList" parameterClass="hashMap" resultClass="hashMap">
     SELECT *
       FROM(
		SELECT /*+ ordered */
	            A.YEAR
	          , A.PERSPECTIVE_ID
              , J.PERSPECTIVE_NM
	          , A.STRATEGY_ID
	          , H.STRATEGY_NM
	          , A.METRIC_ID
	          , A.METRIC_NM
	          , I.METRIC_ID AS UP_METRIC_ID
	          , A.METRIC_GRP_ID
	          , B.METRIC_GRP_NM
	          , A.TYPE_ID
	          , A.METRIC_PROPERTY_ID
	          , A.EVAL_CYCLE
	          , A.UNIT
	          , A.WEIGHT
	          , A.SORT_ORDER
	          , A.ACTUAL_Y
	          , A.INSERT_USER_ID
              , F.USER_NM AS INSERT_USER_NM
              , A.APPROVE_USER_ID
              , G.USER_NM AS APPROVE_USER_NM
	          , NVL(E.ACTION_CNT, 0) ||'/'|| NVL(E.PLAN_CNT, 0) AS PLAN_CNT
	          , CASE WHEN A.TYPE_ID =  '01' THEN TO_CHAR(D.TGT_VALUE) ELSE TARGETY_TXT END TARGETY
	          , F_CODE_NM('007', A.TYPE_ID, A.YEAR) AS TYPE_NM
	          , F_CODE_NM('010', A.METRIC_PROPERTY_ID, A.YEAR) AS METRIC_PROPERTY_NM
	          , F_CODE_NM('008', A.EVAL_CYCLE, A.YEAR) AS EVAL_CYCLE_NM
	          , F_CODE_NM('013', A.UNIT, A.YEAR) AS UNIT_NM
	          , ADJUST_RATE
	          , A.DESCRIPTION
	          , K.SC_DEPT_NM
	          , A.TIME_ROLLUP
              , F_CODE_NM('009', A.TIME_ROLLUP, A.YEAR) AS TIME_ROLLUP_NM
              , A.SCORE_CAL_TYPE_GUBUN
              , F_CODE_NM('012', A.SCORE_CAL_TYPE_GUBUN, A.YEAR) AS SCORE_CAL_TYPE_GUBUN_NM
              , A.ACT_CAL_TYPE
              , L.CAL_TYPE_NM
	          , J.SORT_ORDER AS SORT_ORDER1  
              , C.SORT_ORDER AS SORT_ORDER2
              , A.SORT_ORDER AS SORT_ORDER3
              , CASE WHEN M.CNT > 0 THEN '수기있음'
                     ELSE '수기없음' 
                 END CNT_YN 
	    FROM BSC_METRIC A
	         LEFT OUTER JOIN BSC_METRIC_GRP B ON A.YEAR = B.YEAR AND A.METRIC_GRP_ID = B.METRIC_GRP_ID
	         LEFT OUTER JOIN BSC_DEPT_STRATEGY C ON A.YEAR = C.YEAR AND A.STRATEGY_ID = C.STRATEGY_ID AND A.SC_DEPT_ID = C.SC_DEPT_ID
	         LEFT OUTER JOIN BSC_TARGET D ON A.YEAR = D.YEAR AND A.METRIC_ID = D.METRIC_ID AND D.MON = '12' AND D.ANAL_CYCLE = 'Y'
	         LEFT OUTER JOIN (SELECT YEAR, METRIC_ID
	                               , COUNT(CASE WHEN PLAN_START_DT IS NOT NULL THEN 1 ELSE NULL END) AS PLAN_CNT
	                               , COUNT(CASE WHEN ACT_START_DT IS NOT NULL THEN 1 ELSE NULL END) AS ACTION_CNT
	                            FROM BSC_INITIATIVE
	                           WHERE YEAR = #findYear#
	                           GROUP BY YEAR, METRIC_ID) E ON A.YEAR = E.YEAR AND A.METRIC_ID = E.METRIC_ID
             LEFT OUTER JOIN V_ROLE_USER F ON A.INSERT_USER_ID = F.USER_ID
             LEFT OUTER JOIN V_ROLE_USER G ON A.APPROVE_USER_ID = G.USER_ID
             <!-- LEFT OUTER JOIN BSC_DIRECTION H ON C.YEAR = H.YEAR AND C.STRATEGY_ID = H.DIRECTION_ID  -->
             LEFT OUTER JOIN(SELECT
                                  A.YEAR,
                                  A.METRIC_ID,
                                  B.SUB_METRIC_ID
                             FROM BSC_METRIC A
                            INNER JOIN BSC_CAL_METRIC B ON A.YEAR = B.YEAR AND A.METRIC_ID = B.METRIC_ID AND B.DELETE_DT IS NULL
                            WHERE A.YEAR =   #findYear#
                              AND A.DELETE_DT IS NULL) I ON A.YEAR=I.YEAR AND A.METRIC_ID=I.SUB_METRIC_ID
             LEFT OUTER JOIN BSC_PERSPECTIVE J ON A.YEAR = J.YEAR AND A.PERSPECTIVE_ID = J.PERSPECTIVE_ID AND J.DELETE_DT IS NULL
             LEFT OUTER JOIN BSC_STRATEGY H
                             ON A.YEAR = H.YEAR AND A.STRATEGY_ID = H.STRATEGY_ID
             INNER JOIN BSC_SC_DEPT K ON A.YEAR = K.YEAR AND A.SC_DEPT_ID = K.SC_DEPT_ID AND K.DELETE_DT IS NULL
             LEFT OUTER JOIN BSC_CAL_TYPE L ON A.SCORE_CAL_TYPE_ID = L.CAL_TYPE_ID
             LEFT OUTER JOIN 
            (SELECT YEAR
            	  , METRIC_ID
            	  , COUNT(1) AS CNT 
               FROM BSC_CAL_TYPE_COL
              WHERE INSERT_GUBUN = '02'
                AND DELETE_DT IS NULL
              GROUP BY YEAR
                  , METRIC_ID
                  ) M
               ON A.YEAR = M.YEAR
              AND A.METRIC_ID = M.METRIC_ID 
	    WHERE A.YEAR = #findYear#
	    <isEqual prepend="AND" property="findUseYn" compareValue="N">
           	A.DELETE_DT IS NOT NULL
	    </isEqual>

	    <isNotEqual prepend="AND" property="findUseYn" compareValue="N">
           	A.DELETE_DT IS NULL
	    </isNotEqual>
	    ) Z
	    START WITH Z.UP_METRIC_ID IS NULL
        CONNECT BY PRIOR Z.METRIC_ID = Z.UP_METRIC_ID
        ORDER SIBLINGS BY SORT_ORDER1, SORT_ORDER2, SORT_ORDER3
	</select>

	<!--
	==================================================================
	  # 설명	: 동일한 지표Pool을 사용하는 지표 건수
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<select id="getMetricPoolCount" parameterClass="hashMap" resultClass="java.lang.Integer">
		SELECT COUNT(1) CNT
		  FROM BSC_METRIC
		 WHERE YEAR = #year#
		   AND METRIC_GRP_ID = (SELECT METRIC_GRP_ID FROM BSC_METRIC WHERE YEAR = #year# AND METRIC_ID = #metricId#)
		   AND DELETE_DT IS NULL
	</select>

	<!--
	==================================================================
	  # 설명	: 지표POOL 연계속성 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_METRIC_GRP
	==================================================================
	-->
	<update id="updateMetricGrpProperty" parameterClass="hashMap">
		UPDATE BSC_METRIC_GRP
		   SET METRIC_PROPERTY_ID = '01'
		 WHERE YEAR = #year#
		   AND METRIC_GRP_ID = (SELECT METRIC_GRP_ID FROM BSC_METRIC WHERE YEAR = #year# AND METRIC_ID = #metricId#)
		   AND DELETE_DT IS NULL
	</update>

	<!--
	==================================================================
	  # 설명	: 지표 연계속성 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_METRIC
	==================================================================
	-->
	<update id="updateMetricProperty" parameterClass="hashMap">
		UPDATE BSC_METRIC
		   SET METRIC_PROPERTY_ID = '01'
		 WHERE YEAR = #year#
		   AND METRIC_GRP_ID = (SELECT METRIC_GRP_ID FROM BSC_METRIC WHERE YEAR = #year# AND METRIC_ID = #metricId#)
		   AND DELETE_DT IS NULL
	</update>

	<!--
	==================================================================
	  # 설명	: 년 목표 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_TARGET
	==================================================================
	-->
	<select id="getTargetY" parameterClass="hashMap" resultClass="java.lang.String">
        SELECT TGT_VALUE
		  FROM BSC_TARGET
		 WHERE YEAR = #year#
		   AND MON = '12'
		   AND ANAL_CYCLE = 'Y'
		   AND METRIC_ID = #metricId#
	</select>

	<!--
	==================================================================
	  # 설명	: 측정주기 목록 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_ACT_REG_DEF_MON_GRP
	==================================================================
	-->
	<select id="regMonList" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR
		     , METRIC_ID
		     , MON
		FROM BSC_ACT_REG_DEF_MON
		WHERE YEAR = #year#
		  AND METRIC_ID = #metricId#
	</select>

	<!--
	==================================================================
	  # 설명	: 측정주기 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_ACT_REG_DEF_MON
	==================================================================
	-->
	<delete id="deleteRegMon" parameterClass="hashMap">
		DELETE FROM BSC_ACT_REG_DEF_MON
		WHERE YEAR = #year#
		  AND METRIC_ID = #metricId#
	</delete>

	<!--
	==================================================================
	  # 설명	: 측정주기 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_ACT_REG_DEF_MON
	==================================================================
	-->
	<insert id="insertRegMon" parameterClass="hashMap">
		INSERT INTO BSC_ACT_REG_DEF_MON (
               YEAR
             , METRIC_ID
             , MON
             , CREATE_DT
           ) VALUES (
               #year#
             , #metricId#
             , #mon#
             , SYSDATE
             )
	</insert>
	
	<!--
	==================================================================
	  # 설명	: BSC관점 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_PERSPECTIVE
	==================================================================
	-->	
	<select id="getPerspectiveIdList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR, A.PERSPECTIVE_ID, A.PERSPECTIVE_NM, A.SORT_ORDER,
		        (SELECT COUNT(*) 
                FROM BSC_DEPT_STRATEGY
              WHERE YEAR= #findYear#
                  AND PERSPECTIVE_ID=A.PERSPECTIVE_ID) CNT    
          FROM BSC_PERSPECTIVE A
         WHERE A.YEAR = #findYear#
       	   AND A.DELETE_DT IS NULL
         ORDER BY A.SORT_ORDER  
	</select>

	<!--
	==================================================================
	  # 설명	: 전략과제 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPT_STRATEGY
	==================================================================
	-->
	<select id="getStrategyIdList" parameterClass="hashMap" resultClass="hashMap">
		 SELECT A.SC_DEPT_ID
	          , A.STRATEGY_ID
	          , B.STRATEGY_NM STRATEGY_NM
	       FROM BSC_DEPT_STRATEGY A
	       LEFT OUTER JOIN
	            BSC_STRATEGY B
	       	 ON A.YEAR = B.YEAR
	     	AND A.STRATEGY_ID = B.STRATEGY_ID
	     	AND B.DELETE_DT IS NULL
		  WHERE A.YEAR = #findYear#
	     	AND A.SC_DEPT_ID = #findScDeptId#
		  ORDER BY A.SORT_ORDER, B.STRATEGY_ID
	</select>

	<!--
	==================================================================
	  # 설명	: CSF 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_DEPT_STRATEGY
	==================================================================
	-->
	<select id="getCsfList" parameterClass="hashMap" resultClass="hashMap">
		 SELECT A.YEAR
	          , A.CSF_ID
	          , B.CSF_NM   
	          , A.SC_DEPT_ID
		   FROM BSC_DEPT_CSF A
		   LEFT OUTER JOIN BSC_CSF B
		     ON A.YEAR = B.YEAR
		    AND A.CSF_ID = B.CSF_ID
		  WHERE A.YEAR = #findYear#
		    AND A.SC_DEPT_ID = #findScDeptId#
	</select>

</sqlMap>


