<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="bsc.mon.strategyMatrix">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: 
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />
	 

	<!--
	==================================================================   
	  # 설명	: 전략과제연계도 플래시 XML
	  #	기능	: SELECT
	  #	TABLE	: 
	==================================================================
	-->
	
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
	<![CDATA[
	SELECT A.MAX_LEVEL, A.ROW_COUNT, A.DEPT_LEVEL, A.SORT_NUM, A.LEVEL_NUM
	, A.NEXT_NUM, NVL(A.PREV_NUM,1) PREV_NUM
	, A.YEAR, X.MON, A.STRATEGY_ID, A.STRATEGY_NM, A.UP_STRATEGY_ID, A.PULL_PATH
	, A.SC_DEPT_ID, A.SC_DEPT_NM, X.ANAL_CYCLE
	, A.PERSPECTIVE_ID, A.CONTENT, X.STATUS
	FROM (
	    SELECT 
	    SUM( CASE WHEN PREV_NUM < LEVEL_NUM THEN 0 ELSE 1 END  ) 
	    OVER(PARTITION BY A.YEAR, SUBSTR(  PULL_PATH, 2, 7)  ) ROW_COUNT
	    , A.*
	    FROM (
	        SELECT MAX(LEVEL_NUM) OVER() MAX_LEVEL
	        , LAG(LEVEL_NUM,1) OVER(ORDER BY SORT_NUM) PREV_NUM
	        , LAG(LEVEL_NUM,1) OVER(ORDER BY SORT_NUM DESC) NEXT_NUM
	        , A.*
	        FROM( 
	            SELECT  CONNECT_BY_ISCYCLE, A.YEAR, A.STRATEGY_ID, A.STRATEGY_NM
	            , A.SC_DEPT_ID, B.SC_DEPT_NM, B.DEPT_SORT_ORDER, B.DEPT_LEVEL
	            , A.PERSPECTIVE_ID, C.SORT_ORDER PER_SORT_ORDER
	            , A.UP_STRATEGY_ID, A.SORT_ORDER
	            , A.CONTENT, A.CREATE_DT, A.MODIFY_DT, A.DELETE_DT
	            , LEVEL LEVEL_NUM
	            , ROWNUM SORT_NUM
	            , SYS_CONNECT_BY_PATH(A.STRATEGY_ID,'Q') PULL_PATH
	                FROM ( 
	                            SELECT YEAR,  
	                                   STRATEGY_ID,  
	                                   SC_DEPT_ID,  
	                                   (SELECT TT1.STRATEGY_NM FROM BSC_STRATEGY TT1 WHERE TT1.YEAR = T3.YEAR AND TT1.STRATEGY_ID = T3.STRATEGY_ID) AS STRATEGY_NM,  
	                                   PERSPECTIVE_ID,  
	                                    (SELECT distinct STRATEGY_ID  
	                                         FROM BSC_METRIC T1  
	                                        WHERE T1.YEAR = #findYear#
	                                          AND T1.METRIC_ID =  
	                                                           (SELECT UP_METRIC_ID  
	                                                             FROM BSC_METRIC T2  
	                                                            WHERE T2.YEAR = #findYear#
	                                                              AND T2.SC_DEPT_ID = T3.SC_DEPT_ID  
	                                                              AND T2.STRATEGY_ID = T3.STRATEGY_ID      
	                                                              AND T2.DELETE_DT IS NULL  
	                                                              AND ROWNUM = 1  
	                                                           )  
	                                       )   
	                                    AS UP_STRATEGY_ID,  
	                                   SORT_ORDER,  
	                                   CONTENT,  
	                                   CREATE_DT,  
	                                   MODIFY_DT,  
	                                   DELETE_DT  
	                             FROM BSC_DEPT_STRATEGY T3  
	                            WHERE YEAR = #findYear#  
	                              AND DELETE_DT IS NULL     
	                ) A 
	                INNER JOIN (
	                            SELECT CONNECT_BY_ISCYCLE, ROWNUM DEPT_SORT_ORDER, LEVEL DEPT_LEVEL, YEAR
	                            , SC_DEPT_ID, SC_DEPT_NM
	                            FROM BSC_SC_DEPT
	                            WHERE YEAR = #findYear#
	                            AND DELETE_DT IS NULL
	                            START WITH UP_SC_DEPT_ID IS NULL
	                            CONNECT BY NOCYCLE PRIOR YEAR = YEAR
	                            AND PRIOR SC_DEPT_ID = UP_SC_DEPT_ID
	                            ORDER SIBLINGS BY SORT_ORDER
	                            ) B ON A.YEAR = B.YEAR
	                            AND A.SC_DEPT_ID = B.SC_DEPT_ID
	                LEFT OUTER JOIN BSC_CODE C
	                    ON C.CODE_GRP_ID = '001'
	                    AND A.YEAR = C.YEAR
	                    AND A.PERSPECTIVE_ID = C.CODE_ID
	                WHERE A.YEAR = #findYear#
	                AND A.DELETE_DT IS NULL
	            START WITH A.STRATEGY_ID = #findStrategyId#
	            CONNECT BY NOCYCLE PRIOR A.STRATEGY_ID = A.UP_STRATEGY_ID
	            ORDER SIBLINGS BY DEPT_SORT_ORDER, PER_SORT_ORDER, A.SORT_ORDER
	        ) A
	    ) A
	) A
	  LEFT OUTER JOIN BSC_METRICSCORE X
	  ON  A.YEAR= X.YEAR
	  AND A.SC_DEPT_ID= X.SC_DEPT_ID
	  AND A.STRATEGY_ID   = X.STRATEGY_ID
	   AND X.MON= #findMon#
	   AND X.ANAL_CYCLE= #findAnalCycle#
	WHERE 1=1
	ORDER BY SORT_NUM
	]]>
	</select>
	
	
	<!--
	==================================================================   
	  # 설명	: 전략과제 명 가져오기
	  #	기능	: SELECT
	  #	TABLE	: BSC_SC_DEPT
	==================================================================
	-->
	<select id="getStrategyNm" parameterClass="hashMap" resultClass="String">
		SELECT (SELECT TT1.STRATEGY_NM FROM BSC_STRATEGY TT1 WHERE TT1.YEAR = T1.YEAR AND TT1.STRATEGY_ID = T1.STRATEGY_ID) AS STRATEGY_NM
		FROM BSC_DEPT_STRATEGY T1
		WHERE T1.YEAR=#findYear#
		AND T1.SC_DEPT_ID=#findScDeptId#
		AND T1.STRATEGY_ID = #findStrategyId#
		AND T1.DELETE_DT IS NULL
	</select>
	
	
</sqlMap>


