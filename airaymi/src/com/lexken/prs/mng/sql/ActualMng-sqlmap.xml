<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="prs.mng.actualMng">
    <!--
    ==================================================================   
      # 설명    : typeAlias 선언
      #    기능    : SETTING
      #    TABLE    : 
    ==================================================================
    -->
    <typeAlias alias="hashMap"             type="java.util.HashMap" />

    <!--
    ==================================================================   
      # 설명    : 성과계획서 관리 목록 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getList" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.YEAR
             , #findMon# AS MON
             , A.EVAL_MEMB_EMPN
             , A.EVAL_MEMB_EMPN_SEQ
             , A.KOR_NM
             , A.DEPT_CD
             , A.DEPT_FULL_NM
             , A.CAST_TC
             , A.POS_TC
             , A.CAST_TC_NM 
             , A.POS_TC_NM 
             , A.PRS_YN
             , A.EVAL_GRP_ID
             , A.FROM_DT
             , A.TO_DT
             , A.MANAGER_USER_ID
             , A.MANAGER_USER_NM
             , A.PLAN_STATUS_ID
             , A.PLAN_STATUS_NM
             , A.PLAN_YN
             , A.ACT_STATUS_ID
         FROM (
            SELECT A.YEAR
                 , #findMon# AS MON
                 , A.EVAL_MEMB_EMPN
                 , A.EVAL_MEMB_EMPN_SEQ
                 , A.KOR_NM
                 , A.DEPT_CD
                 , F_DEPT_FULL_NM(A.YEAR, A.DEPT_CD, 'BSC_INSA_DEPT') AS DEPT_FULL_NM
                 , A.CAST_TC
                 , A.POS_TC
                 , F_CODE_NM('170', A.CAST_TC , A.YEAR) CAST_TC_NM 
                 , F_CODE_NM('171', A.POS_TC , A.YEAR) POS_TC_NM 
                 , A.PRS_YN
                 , A.EVAL_GRP_ID
                 , A.FROM_DT
                 , A.TO_DT
                 , A.MANAGER_USER_ID
                 , (SELECT KOR_NM FROM BSC_INSA WHERE A.YEAR = YEAR AND A.MANAGER_USER_ID = EMPN) AS MANAGER_USER_NM
                 , A.PLAN_STATUS_ID
                 , CASE WHEN A.PLAN_STATUS_ID IS NULL THEN '미입력' ELSE  F_CODE_NM('217', A.PLAN_STATUS_ID , A.YEAR)  END PLAN_STATUS_NM
                 , A.PLAN_YN
                 , NVL((
                    SELECT MAX(S2.ACT_STATUS_ID) 
                    FROM PRS_MNG_TARGET S1 
                    LEFT OUTER JOIN PRS_MNG_ACTUAL S2
                        ON S1.YEAR = S2.YEAR
                        AND S2.MON = #findMon#    
                        AND S1.EVAL_MEMB_EMPN = S2.EVAL_MEMB_EMPN
                        AND S1.EVAL_MEMB_EMPN_SEQ = S2.EVAL_MEMB_EMPN_SEQ
                        AND S1.TARGET_ID = S2.TARGET_ID
                    WHERE A.YEAR = S1.YEAR
                    AND A.EVAL_MEMB_EMPN = S1.EVAL_MEMB_EMPN
                    AND A.EVAL_MEMB_EMPN_SEQ = S1.EVAL_MEMB_EMPN_SEQ
                    ),'06') AS ACT_STATUS_ID
            FROM V_PRS_MNG_MEMBER A
	            INNER JOIN PRS_MNG_ACT_IN_TERM B
	                ON A.YEAR = B.YEAR
	                AND B.MON = #findMon#
	                <isEqual property="findMon" compareValue="10">
	                AND TO_CHAR(TO_DATE(A.FROM_DT), 'YYYYMM') <![CDATA[ <= ]]> A.YEAR || '01'
	                AND TO_CHAR(TO_DATE(A.TO_DT), 'YYYYMM') <![CDATA[ >= ]]> A.YEAR || '03'
	                </isEqual>
	                <isEqual property="findMon" compareValue="20">
	                AND TO_CHAR(TO_DATE(A.FROM_DT), 'YYYYMM') <![CDATA[ <= ]]> A.YEAR || '04'
	                AND TO_CHAR(TO_DATE(A.TO_DT), 'YYYYMM') <![CDATA[ >= ]]> A.YEAR || '06'
	                </isEqual>
	                <isEqual property="findMon" compareValue="30">
	                AND TO_CHAR(TO_DATE(A.FROM_DT), 'YYYYMM') <![CDATA[ <= ]]> A.YEAR || '07'
	                AND TO_CHAR(TO_DATE(A.TO_DT), 'YYYYMM') <![CDATA[ >= ]]> A.YEAR || '09'
	                </isEqual>
	                <isEqual property="findMon" compareValue="40">
	                AND TO_CHAR(TO_DATE(A.FROM_DT), 'YYYYMM') <![CDATA[ <= ]]> A.YEAR || '10'
	                AND TO_CHAR(TO_DATE(A.TO_DT), 'YYYYMM') <![CDATA[ >= ]]> A.YEAR || '12'
	                </isEqual>
        ) A
        WHERE A.YEAR= #findYear#
          AND A.PRS_YN ='Y'
          AND A.PLAN_YN ='Y'
        <isNotEqual prepend="AND" property="isAdmin" compareValue="Y">
            A.EVAL_MEMB_EMPN = #loginUserId#
        </isNotEqual>
        <isNotEmpty prepend="AND" property="findActStatusId" >
            A.ACT_STATUS_ID = #findActStatusId#
        </isNotEmpty>
        ORDER BY A.KOR_NM, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ
    </select>
    
    <!--
    ==================================================================   
      # 설명    : 성과계획서 실적관리 목록 보기
      #    기능    : SELECT
      #    TABLE    : 
    ==================================================================
    -->
    <select id="getActualList" parameterClass="hashMap" resultClass="hashMap">
        SELECT   A.YEAR
                , A.DIRECTION_CD
                , F_CODE_NM('218', A.DIRECTION_CD , A.YEAR) DIRECTION_NM
                , A.METRIC_GUBUN
                , F_CODE_NM('230', A.METRIC_GUBUN , A.YEAR) METRIC_GUBUN_NM 
                , A.TARGET_ID
                , A.TARGET_NM
                , A.METRIC_NM
                , A.TARGET_VALUE
                , A.UNIT
                , A.WEIGHT
                , C.CODE_NM AS DFFLY_NM
                , ROUND(B.EVAL_SCORE,3) EVAL_SCORE
                , F_CODE_NM('013', A.UNIT , A.YEAR) UNIT_NM 
                , A.Q1_TARGET_VALUE
                , A.Q2_TARGET_VALUE
                , A.Q3_TARGET_VALUE
                , A.Q4_TARGET_VALUE
                , CASE WHEN #findMon# = '10' THEN A.Q1_TARGET_VALUE
                       WHEN #findMon# = '20' THEN A.Q2_TARGET_VALUE
                       WHEN #findMon# = '30' THEN A.Q3_TARGET_VALUE
                       WHEN #findMon# = '40' THEN A.Q4_TARGET_VALUE
                   END AS Q_TARGET_VALUE
                , A.CONTENT
                , B.VALUE, ROUND(B.SCORE, 2) AS SCORE, B.EVAL_GRADE, B.ACT_STATUS_ID, B.CONTENT
        FROM PRS_MNG_TARGET A
        LEFT OUTER JOIN PRS_MNG_ACTUAL B
            ON A.YEAR = B.YEAR
            AND B.MON = #findMon#    
            AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN
            AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ
            AND A.TARGET_ID = B.TARGET_ID
        LEFT OUTER JOIN BSC_CODE C
        	ON A.DFFLY = C.CODE_ID
        	AND C.CODE_GRP_ID = '231'
        	AND A.YEAR = C.YEAR 
        WHERE A.YEAR = #findYear#
        <isNotEqual prepend="AND" property="isAdmin" compareValue="Y">
            A.EVAL_MEMB_EMPN = #loginUserId#
        </isNotEqual>
        <isEqual prepend="AND" property="isAdmin" compareValue="Y">
            A.EVAL_MEMB_EMPN = #evalMembEmpn#    
        </isEqual>
        AND A.EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
        ORDER BY A.SORT_ORDER, A.DIRECTION_CD, A.TARGET_ID
    </select>
    
    <!--
    ==================================================================   
      # 설명    : 성과계획서 성과실적 수정(상향식)
      #    기능    : MERGE
      #    TABLE    : 
    ==================================================================
    -->    
    <insert id="updateData" parameterClass="hashMap">
        MERGE INTO PRS_MNG_ACTUAL A
        USING (
            SELECT T.YEAR
            , #mon# AS MON
            , T.EVAL_MEMB_EMPN
            , T.EVAL_MEMB_EMPN_SEQ
            , T.TARGET_ID
            , #actStatusId# AS ACT_STATUS_ID
            , #content# AS CONTENT
            , #value# AS VALUE
            , T.TARGET_VALUE
            , #score# AS SCORE
            <!-- , NVL(#score#, F_EVAL(#value# ||'/'|| T.TARGET_VALUE ||'*100')) AS CAL_SCORE -->
            , F_EVAL(#value# ||'/'|| CASE WHEN #findMon# = '10' THEN T.Q1_TARGET_VALUE
					                      WHEN #findMon# = '20' THEN T.Q2_TARGET_VALUE
					                      WHEN #findMon# = '30' THEN T.Q3_TARGET_VALUE
					                      WHEN #findMon# = '40' THEN T.Q4_TARGET_VALUE
					                  END ||'*100') AS CAL_SCORE
            , #evalGrade# AS EVAL_GRADE
             , (
                SELECT MAX(GRADE_ITEM_NM)
                FROM (                
                    SELECT GRADE_ITEM_NM, GRADE_ITEM_SCORE
                    , NVL(LEAD(GRADE_ITEM_SCORE, 1) OVER(ORDER BY GRADE_ITEM_SCORE ASC),999999999) GRADE_ITEM_SCORE2
                    FROM BSC_ECM_GRADE_DISTRI_EVAL_ITEM
                    WHERE YEAR = #year#
                    AND EVAL_METHOD_ID = #findEvalMethodId#
                ) G
                WHERE GRADE_ITEM_SCORE &lt;= F_EVAL(#value# ||'/'|| CASE WHEN #findMon# = '10' THEN T.Q1_TARGET_VALUE
													                     WHEN #findMon# = '20' THEN T.Q2_TARGET_VALUE
													                     WHEN #findMon# = '30' THEN T.Q3_TARGET_VALUE
													                     WHEN #findMon# = '40' THEN T.Q4_TARGET_VALUE
													                 END ||'*100') AND GRADE_ITEM_SCORE2 &gt; F_EVAL(#value# ||'/'|| CASE WHEN #findMon# = '10' THEN T.Q1_TARGET_VALUE
																													                      WHEN #findMon# = '20' THEN T.Q2_TARGET_VALUE
																													                      WHEN #findMon# = '30' THEN T.Q3_TARGET_VALUE
																													                      WHEN #findMon# = '40' THEN T.Q4_TARGET_VALUE
																													                  END ||'*100') 
            )  AS CAL_EVAL_GRADE
            , (
                SELECT MAX(GRADE_ITEM_ID)
                FROM (                
                    SELECT GRADE_ITEM_ID, GRADE_ITEM_NM, GRADE_ITEM_SCORE
                    , NVL(LEAD(GRADE_ITEM_SCORE, 1) OVER(ORDER BY GRADE_ITEM_SCORE ASC),999999999) GRADE_ITEM_SCORE2
                    FROM BSC_ECM_GRADE_DISTRI_EVAL_ITEM
                    WHERE YEAR = #year#
                    AND EVAL_METHOD_ID = #findEvalMethodId#
                ) G
                WHERE GRADE_ITEM_SCORE &lt;= F_EVAL(#value# ||'/'|| CASE WHEN #findMon# = '10' THEN T.Q1_TARGET_VALUE
													                     WHEN #findMon# = '20' THEN T.Q2_TARGET_VALUE
													                     WHEN #findMon# = '30' THEN T.Q3_TARGET_VALUE
													                     WHEN #findMon# = '40' THEN T.Q4_TARGET_VALUE
													                 END ||'*100') AND GRADE_ITEM_SCORE2 &gt; F_EVAL(#value# ||'/'|| CASE WHEN #findMon# = '10' THEN T.Q1_TARGET_VALUE
																													                      WHEN #findMon# = '20' THEN T.Q2_TARGET_VALUE
																													                      WHEN #findMon# = '30' THEN T.Q3_TARGET_VALUE
																													                      WHEN #findMon# = '40' THEN T.Q4_TARGET_VALUE
																													                  END ||'*100') 
            )  AS CAL_EVAL_GRADE_CD
            FROM PRS_MNG_TARGET T
            WHERE T.YEAR = #year#
            AND T.EVAL_MEMB_EMPN = #evalMembEmpn#
            AND T.EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
            AND T.TARGET_ID = #targetId#
        ) B
            ON (A.YEAR = B.YEAR AND A.MON = B.MON AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ AND A.TARGET_ID = B.TARGET_ID)
        WHEN MATCHED THEN
        <isNotEqual property="isAdmin" compareValue="Y">
        UPDATE SET VALUE = B.VALUE, SCORE = B.CAL_SCORE, EVAL_GRADE = B.CAL_EVAL_GRADE, EVAL_GRADE_CD = B.CAL_EVAL_GRADE_CD, ACT_STATUS_ID = B.ACT_STATUS_ID, MODIFY_ID = #loginUserId#, MODIFY_DT = SYSDATE
        </isNotEqual>
        <isEqual property="isAdmin" compareValue="Y">
        UPDATE SET VALUE = B.VALUE, SCORE = B.CAL_SCORE, EVAL_GRADE = B.CAL_EVAL_GRADE, EVAL_GRADE_CD = B.CAL_EVAL_GRADE_CD, MODIFY_ID = #loginUserId#, MODIFY_DT = SYSDATE
        </isEqual>
        WHEN NOT MATCHED THEN
            INSERT (YEAR, MON, EVAL_MEMB_EMPN, EVAL_MEMB_EMPN_SEQ, TARGET_ID, VALUE, SCORE, EVAL_GRADE, EVAL_GRADE_CD, ACT_STATUS_ID, CONTENT, CREATE_ID, CREATE_DT, MODIFY_ID, MODIFY_DT)
            VALUES (B.YEAR, B.MON, B.EVAL_MEMB_EMPN, B.EVAL_MEMB_EMPN_SEQ, B.TARGET_ID, B.VALUE, B.CAL_SCORE, B.CAL_EVAL_GRADE, B.CAL_EVAL_GRADE_CD, B.ACT_STATUS_ID, B.CONTENT, #loginUserId#, SYSDATE, #loginUserId#, SYSDATE)
    </insert>
    
    <!--
    ==================================================================   
      # 설명    : 성과계획서 성과실적 수정(하향식)
      #    기능    : MERGE
      #    TABLE    : 
    ==================================================================
    -->    
    <insert id="updateDownData" parameterClass="hashMap">
        MERGE INTO PRS_MNG_ACTUAL A
        USING (
            SELECT T.YEAR
            , #mon# AS MON
            , T.EVAL_MEMB_EMPN
            , T.EVAL_MEMB_EMPN_SEQ
            , T.TARGET_ID
            , #actStatusId# AS ACT_STATUS_ID
            , #content# AS CONTENT
            , #value# AS VALUE
            , T.TARGET_VALUE
            , #score# AS SCORE
            , F_EVAL(CASE WHEN #findMon# = '10' THEN T.Q1_TARGET_VALUE
	                      WHEN #findMon# = '20' THEN T.Q2_TARGET_VALUE
	                      WHEN #findMon# = '30' THEN T.Q3_TARGET_VALUE
	                      WHEN #findMon# = '40' THEN T.Q4_TARGET_VALUE
					 END ||'/'|| #value# ||'*100') AS CAL_SCORE
            , #evalGrade# AS EVAL_GRADE
            , (
               SELECT MAX(GRADE_ITEM_NM)
               FROM (                
                   SELECT GRADE_ITEM_ID, GRADE_ITEM_NM, GRADE_ITEM_SCORE
                   , NVL(LEAD(GRADE_ITEM_SCORE, 1) OVER(ORDER BY GRADE_ITEM_SCORE ASC),999999999) GRADE_ITEM_SCORE2
                   FROM BSC_ECM_GRADE_DISTRI_EVAL_ITEM
                   WHERE YEAR = #year#
                   AND EVAL_METHOD_ID = #findEvalMethodId#
               ) G
               WHERE GRADE_ITEM_SCORE &lt;= F_EVAL(CASE WHEN #findMon# = '10' THEN T.Q1_TARGET_VALUE
								                     WHEN #findMon# = '20' THEN T.Q2_TARGET_VALUE
								                     WHEN #findMon# = '30' THEN T.Q3_TARGET_VALUE
								                     WHEN #findMon# = '40' THEN T.Q4_TARGET_VALUE
								                 END ||'/'|| #value# ||'*100') AND GRADE_ITEM_SCORE2 &gt; F_EVAL(CASE WHEN #findMon# = '10' THEN T.Q1_TARGET_VALUE
																								                      WHEN #findMon# = '20' THEN T.Q2_TARGET_VALUE
																								                      WHEN #findMon# = '30' THEN T.Q3_TARGET_VALUE
																								                      WHEN #findMon# = '40' THEN T.Q4_TARGET_VALUE
																								                  END ||'/'|| #value# ||'*100') 
            )  AS CAL_EVAL_GRADE
            , (
            SELECT MAX(GRADE_ITEM_ID)
               FROM (                
                   SELECT GRADE_ITEM_ID, GRADE_ITEM_NM, GRADE_ITEM_SCORE
                   , NVL(LEAD(GRADE_ITEM_SCORE, 1) OVER(ORDER BY GRADE_ITEM_SCORE ASC),999999999) GRADE_ITEM_SCORE2
                   FROM BSC_ECM_GRADE_DISTRI_EVAL_ITEM
                   WHERE YEAR = #year#
                   AND EVAL_METHOD_ID = #findEvalMethodId#
               ) G
               WHERE GRADE_ITEM_SCORE &lt;= F_EVAL(CASE WHEN #findMon# = '10' THEN T.Q1_TARGET_VALUE
								                     WHEN #findMon# = '20' THEN T.Q2_TARGET_VALUE
								                     WHEN #findMon# = '30' THEN T.Q3_TARGET_VALUE
								                     WHEN #findMon# = '40' THEN T.Q4_TARGET_VALUE
								                 END ||'/'|| #value# ||'*100') AND GRADE_ITEM_SCORE2 &gt; F_EVAL(CASE WHEN #findMon# = '10' THEN T.Q1_TARGET_VALUE
																								                      WHEN #findMon# = '20' THEN T.Q2_TARGET_VALUE
																								                      WHEN #findMon# = '30' THEN T.Q3_TARGET_VALUE
																								                      WHEN #findMon# = '40' THEN T.Q4_TARGET_VALUE
																								                  END ||'/'|| #value# ||'*100') 
            )  AS CAL_EVAL_GRADE_CD
            FROM PRS_MNG_TARGET T
            WHERE T.YEAR = #year#
            AND T.EVAL_MEMB_EMPN = #evalMembEmpn#
            AND T.EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
            AND T.TARGET_ID = #targetId#
        ) B
            ON (A.YEAR = B.YEAR AND A.MON = B.MON AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ AND A.TARGET_ID = B.TARGET_ID)
        WHEN MATCHED THEN
        <isNotEqual property="isAdmin" compareValue="Y">
        UPDATE SET VALUE = B.VALUE, SCORE = B.CAL_SCORE, EVAL_GRADE = B.CAL_EVAL_GRADE, EVAL_GRADE_CD = B.CAL_EVAL_GRADE_CD, ACT_STATUS_ID = B.ACT_STATUS_ID, MODIFY_ID = #loginUserId#, MODIFY_DT = SYSDATE
        </isNotEqual>
        <isEqual property="isAdmin" compareValue="Y">
        UPDATE SET VALUE = B.VALUE, SCORE = B.CAL_SCORE, EVAL_GRADE = B.CAL_EVAL_GRADE, EVAL_GRADE_CD = B.CAL_EVAL_GRADE_CD, MODIFY_ID = #loginUserId#, MODIFY_DT = SYSDATE
        </isEqual>
        WHEN NOT MATCHED THEN
            INSERT (YEAR, MON, EVAL_MEMB_EMPN, EVAL_MEMB_EMPN_SEQ, TARGET_ID, VALUE, SCORE, EVAL_GRADE, EVAL_GRADE_CD, ACT_STATUS_ID, CONTENT, CREATE_ID, CREATE_DT, MODIFY_ID, MODIFY_DT)
            VALUES (B.YEAR, B.MON, B.EVAL_MEMB_EMPN, B.EVAL_MEMB_EMPN_SEQ, B.TARGET_ID, B.VALUE, B.CAL_SCORE, B.CAL_EVAL_GRADE, B.CAL_EVAL_GRADE, B.ACT_STATUS_ID, B.CONTENT, #loginUserId#, SYSDATE, #loginUserId#, SYSDATE)
    </insert>
    
    <!--
    ==================================================================   
      # 설명    : 성과계획서 설적 상태 수정
      #    기능    : UPDATE
      #    TABLE    : 
    ==================================================================
    -->    
    <update id="updateStatusData" parameterClass="hashMap">
        UPDATE PRS_MNG_ACTUAL 
           SET    ACT_STATUS_ID     = #actStatusId#
                , MODIFY_ID         = #loginUserId#
                , MODIFY_DT         = SYSDATE
           WHERE YEAR               = #year# 
             AND MON                = #mon#
             AND EVAL_MEMB_EMPN     = #evalMembEmpn#
             AND EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
    </update>
    
    <!--
    ==================================================================   
      # 설명    : 점수수정
      #    기능    : UPDATE
      #    TABLE    : 
    ==================================================================
    -->    
    <update id="updateScoreData" parameterClass="hashMap">
        UPDATE PRS_MNG_ACTUAL A SET
		      EVAL_SCORE = (SELECT ETC1 
		      				  FROM BSC_CODE 
		      				 WHERE CODE_ID = A.EVAL_GRADE_CD 
		      				   AND YEAR = A.YEAR
		      				   AND CODE_GRP_ID = '233')
		WHERE A.YEAR = #year#
		  AND A.MON = #mon#
          AND A.EVAL_MEMB_EMPN = #evalMembEmpn#
          AND A.EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
    </update>
    
    <!--
    ==================================================================   
      # 설명    : 환산점수수정
      #    기능    : UPDATE
      #    TABLE    : 
    ==================================================================
    -->    
    <update id="updateCalScoreData" parameterClass="hashMap">
        UPDATE PRS_MNG_ACTUAL T1 SET
		      EVAL_SCORE = (SELECT EVAL_SCORE * ((SELECT ETC1 FROM BSC_CODE WHERE CODE_ID = B.DFFLY AND YEAR = B.YEAR AND CODE_GRP_ID = '231') / 100) * (WEIGHT / 100)
		                    FROM PRS_MNG_ACTUAL A
		                        INNER JOIN PRS_MNG_TARGET B
		                            ON A.YEAR = B.YEAR
		                            AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN
		                            AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ
		                            AND A.TARGET_ID = B.TARGET_ID
		                    WHERE A.YEAR = T1.YEAR
		                      AND A.MON = T1.MON
		                      AND A.EVAL_MEMB_EMPN = T1.EVAL_MEMB_EMPN
		                      AND A.EVAL_MEMB_EMPN_SEQ = T1.EVAL_MEMB_EMPN_SEQ
		                      AND A.TARGET_ID = T1.TARGET_ID)
		WHERE T1.YEAR = #year#
		  AND T1.MON = #mon#
		  AND T1.EVAL_MEMB_EMPN = #evalMembEmpn#
		  AND T1.EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
    </update>
    
    
    <!--
	==================================================================   
	  # 설명	: 첨부파일 보기  
	  #	기능	: SELECT  
	  #	TABLE	: PRS_MNG_RPT_ATTACH
	==================================================================
	-->
	<select id="getFileList" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR
			 , EVAL_MEMB_EMPN
			 , EVAL_MEMB_EMPN_SEQ
			 , SEQ
			 , ATTACH_FILE_NM
		     , ATTACH_FILE_FNM
		     , ATTACH_FILE_SUFFIX
		     , ATTACH_FILE_PATH 
		  FROM PRS_MNG_ACTUAL_ATTACH
		 WHERE YEAR = #findYear#
		 <isNotEmpty prepend="AND" property="findMon" >
		       MON  = #findMon#
		 </isNotEmpty>
		 <isEmpty prepend="AND" property="findMon">
		       MON  = (SELECT MAX(MON) FROM PRS_MNG_ACTUAL
       				    WHERE YEAR                = #findYear#
			              AND EVAL_MEMB_EMPN      = #evalMembEmpn#
			              AND EVAL_MEMB_EMPN_SEQ  = #evalMembEmpnSeq#
		                  AND ACT_STATUS_ID = '04'
		              )
		 </isEmpty>
         AND   EVAL_MEMB_EMPN      = #evalMembEmpn#
		 AND   EVAL_MEMB_EMPN_SEQ  = #evalMembEmpnSeq#   
		 ORDER BY SEQ                                			                       
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 첨부파일 삭제  
	  #	기능	: INSERT
	  #	TABLE	: PRS_MNG_RPT_ATTACH
	==================================================================
	-->	
	<delete id="deleteFileInfo" parameterClass="hashMap">
		DELETE FROM PRS_MNG_ACTUAL_ATTACH
		 WHERE YEAR = #year#
		   AND MON  = #mon#
		   AND EVAL_MEMB_EMPN      = #evalMembEmpn#
		   AND EVAL_MEMB_EMPN_SEQ  = #evalMembEmpnSeq#  
		   AND SEQ = #seq#
	</delete>
	
	<!--
	==================================================================   
	  # 설명	: 목표설정구분 가져오기
	  #	기능	: SELECT
	  #	TABLE	: PRS_MNG_TARGET
	==================================================================
	-->
	<select id="selectMetricGubun" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT 
		      METRIC_GUBUN
		FROM PRS_MNG_TARGET
		WHERE YEAR = #year#
		  AND EVAL_MEMB_EMPN = #evalMembEmpn#
		  AND EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
		  AND TARGET_ID = #targetId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 첨부파일 등록 
	  #	기능	: INSERT
	  #	TABLE	: PRS_MNG_RPT_ATTACH
	==================================================================
	-->	
	<insert id="insertFileInfo" parameterClass="hashMap">
		<selectKey resultClass="java.lang.String" keyProperty="SEQ" >
	        SELECT NVL(MAX(SEQ)+1,1) SEQ
	          FROM PRS_MNG_ACTUAL_ATTACH
	         WHERE YEAR = #year# 
	           AND MON  = #mon#
	           AND EVAL_MEMB_EMPN      = #evalMembEmpn#
		       AND EVAL_MEMB_EMPN_SEQ  = #evalMembEmpnSeq#  
		</selectKey>
		INSERT INTO PRS_MNG_ACTUAL_ATTACH (
               YEAR
			 , MON
			 , EVAL_MEMB_EMPN
			 , EVAL_MEMB_EMPN_SEQ
			 , TARGET_ID
			 , SEQ
			 , ATTACH_FILE_NM
			 , ATTACH_FILE_FNM
			 , ATTACH_FILE_SUFFIX
			 , ATTACH_FILE_PATH
			 , CREATE_DT
            ) VALUES (
               #year#
             , #mon#
             , #evalMembEmpn#
             , #evalMembEmpnSeq#
             , '9999'
             , #SEQ#
             , #attachFileNm#
             , #attachFileFnm#
             , #attachFileSufix#
             , #attachFilePath#
             , SYSDATE
    	   )       
	</insert>
    
    <!--
	==================================================================   
	  # 설명	: 평가대상자 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_MNG_MEMBER
	==================================================================
	-->
	<select id="getListExcel" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
			 , A.EVAL_MEMB_EMPN 
        	 , C.KOR_NM
	         , F_DEPT_FULL_NM(A.YEAR, C.DEPT_CD, 'BSC_INSA_DEPT') DEPT_FULL_NM
	         , F_CODE_NM('218', A.DIRECTION_CD, A.YEAR) DIRECTION_NM
	         , F_CODE_NM('230', A.METRIC_GUBUN, A.YEAR) METRIC_GUBUN    
	         , A.TARGET_NM 
	         , A.METRIC_NM
	         , A.TARGET_VALUE 
	         , F_CODE_NM('013', A.UNIT, A.YEAR) UNIT
	         , CASE WHEN #findMon# = '10' THEN A.Q1_TARGET_VALUE                        
	                WHEN #findMon# = '20' THEN A.Q2_TARGET_VALUE                        
	            	WHEN #findMon# = '30' THEN A.Q3_TARGET_VALUE                        
	            	WHEN #findMon# = '40' THEN A.Q4_TARGET_VALUE                    
	            END AS TARGET_VALUE_Q
	         , B.VALUE 
	         , ROUND(B.SCORE, 2) SCORE
	         , B.EVAL_GRADE
	         , CASE WHEN C.PLAN_STATUS_ID IS NULL THEN '미입력' 
	                ELSE F_CODE_NM('217',C.PLAN_STATUS_ID, C.YEAR)  
	            END PLAN_STATUS_NM
	         , CASE WHEN B.ACT_STATUS_ID IS NULL THEN '미입력' 
	                ELSE F_CODE_NM('217', B.ACT_STATUS_ID, C.YEAR)  
	            END ACT_STATUS_NM
	         , TO_CHAR(TO_DATE(C.FROM_DT),'YYYY.MM.DD') AS FROM_DT
	         , TO_CHAR(TO_DATE(C.TO_DT),'YYYY.MM.DD') AS TO_DT
             , A.WEIGHT
             , D.CODE_NM AS DFFLY_NM
             , ROUND(B.EVAL_SCORE,3) EVAL_SCORE
	      FROM PRS_MNG_TARGET A         
	      LEFT OUTER JOIN PRS_MNG_ACTUAL B             
	        ON A.YEAR = B.YEAR             
	       AND B.MON = #findMon#                  
	       AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN             
	       AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ             
	       AND A.TARGET_ID = B.TARGET_ID     
	     LEFT OUTER JOIN V_PRS_MNG_MEMBER C
	       ON A.YEAR = C.YEAR
	      AND A.EVAL_MEMB_EMPN = C.EVAL_MEMB_EMPN
	      AND A.EVAL_MEMB_EMPN_SEQ = C.EVAL_MEMB_EMPN_SEQ
         LEFT OUTER JOIN BSC_CODE D
           ON A.DFFLY = D.CODE_ID
          AND D.CODE_GRP_ID = '231'
          AND A.YEAR = D.YEAR
	    WHERE A.YEAR =  #findYear#       
          AND C.PRS_YN ='Y'           
          AND C.PLAN_YN ='Y'                
	    ORDER BY C.KOR_NM
	           , C.EVAL_MEMB_EMPN_SEQ
	           , A.SORT_ORDER
	           , A.DIRECTION_CD
	           , A.TARGET_ID
        
	</select>
</sqlMap>