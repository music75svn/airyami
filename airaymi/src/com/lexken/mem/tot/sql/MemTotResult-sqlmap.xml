<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="mem.tot.memTotResult">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: PRS_MNG_FINAL_RESULT
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />

	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		  
		  SELECT TB_PAGE.ROWCNT AS "rowNum", TB_PAGE.*
			FROM (
				SELECT  TA_PAGE.*, ROWNUM AS ROWCNT
				FROM (
				SELECT A.YEAR
			      ,A.EMP_NO
			      ,A.EMP_NM
			      ,A.CAST_TC
			      ,F_CODE_NM('170',A.CAST_TC, A.YEAR) AS CAST_TC_NM
			      ,A.POS_TC
			      ,F_CODE_NM('171',A.POS_TC, A.YEAR) AS POS_TC_NM
			      ,A.DEPT_CD
			      ,F_DEPT_LEV2_NM(A.YEAR, A.DEPT_CD) AS DEPT_NM
			      ,C.EVAL_GIVE_METHOD_ID AS EVAL_METHOD_ID
			      ,A.EVAL_EXP_RS_ID
			      ,F_CODE_NM('242',A.EVAL_EXP_RS_ID, A.YEAR) AS EVAL_EXP_RS_NM
			      ,B.EVAL_GUN_ID
			      ,B.DEPT_FINAL_SCORE
			      ,B.DEPT_RATE
			      ,B.EMP_JOB_SCORE
			      ,B.EMP_JOB_RATE
			      ,B.EMP_COMM_SCORE
			      ,B.EMP_COMM_RATE
			      ,B.EMP_EVAL_SCORE
			      ,B.EMP_EVAL_RATE
			      ,B.EMP_FINAL_SCORE
			      ,B.TOT_FINAL_SCORE
			      ,B.TOT_GRADE_ID
			      ,B.TOT_GRADE_NM
			      ,B.TOT_FINAL_GRADE_ID
			      ,B.TOT_FINAL_GRADE_NM
			      ,ROW_NUMBER()OVER(PARTITION BY B.YEAR, B.EVAL_GUN_ID ORDER BY B.TOT_FINAL_SCORE DESC) AS RANKNUM
			      <!-- 
			      ,B.RANKNUM
			      -->
			      ,B.EMP_JOB_AVG_SCORE
			      ,B.CREATE_DT
			      ,B.MODIFY_DT
			      ,B.DELETE_DT
			  FROM MEM_USER A
			       LEFT OUTER JOIN MEM_TOT_RESULT B
			       ON A.YEAR = B.YEAR
			       AND A.EMP_NO = B.EMP_NO
			       LEFT OUTER JOIN MEM_EVAL_GUN C
			       ON B.YEAR = C.YEAR
			       AND B.EVAL_GUN_ID = C.EVAL_GUN_ID
			 WHERE A.YEAR = #findYear#
			 
			       <isNotEmpty prepend="AND" property="findEvalExpRsId">
		           A.EVAL_EXP_RS_ID = #findEvalExpRsId#
		           </isNotEmpty>
		           <isNotEmpty prepend="AND" property="findEvalGunId">
		           B.EVAL_GUN_ID = #findEvalGunId#
		           </isNotEmpty>
		           <isNotEmpty prepend="AND" property="findEmpNm">
		           A.EMP_NM LIKE '%' || TRIM(#findEmpNm#) || '%'
                   </isNotEmpty>
			 
			 ORDER BY B.TOT_FINAL_SCORE DESC NULLS LAST, B.RANKNUM
				) TA_PAGE
				WHERE ROWNUM <![CDATA[<=]]> #endRow#
			) TB_PAGE
			WHERE ROWCNT <![CDATA[>=]]> #startRow#
		  
	</select>	
	
	<select id="getExcelList" parameterClass="hashMap" resultClass="hashMap">
		  
		  SELECT TB_PAGE.ROWCNT AS "rowNum", TB_PAGE.*,
		         COUNT (*) OVER (PARTITION BY TB_PAGE.YEAR, TB_PAGE.EMP_NO) CNT,
			     ROW_NUMBER () OVER (PARTITION BY TB_PAGE.YEAR, TB_PAGE.EMP_NO ORDER BY TB_PAGE.START_PCMT_DATE) CNT_INDEX
			FROM (
				SELECT  TA_PAGE.*, ROWNUM AS ROWCNT
				FROM (
		    SELECT A.YEAR, 
			       A.EMP_NO,
			       A.EMP_NM,
			       B.SER,
			       A.CAST_TC,
			       F_CODE_NM('170',A.CAST_TC,A.YEAR) AS CAST_TC_NM,
			       A.POS_TC,
			       F_CODE_NM('171',A.POS_TC,A.YEAR) AS POS_TC_NM,
			       B.DEPT_CD,
			       F_DEPT_LEV2_NM(B.YEAR,B.DEPT_CD) AS DEPT_NM,
			       TO_CHAR(TO_DATE(B.START_PCMT_DATE,'YYYYMMDD'),'YYYY.MM.DD') AS START_PCMT_DATE,
			       TO_CHAR(TO_DATE(B.END_PCMT_DATE,'YYYYMMDD'),'YYYY.MM.DD') AS END_PCMT_DATE,
			       B.PCMT_TC,
			       B.PCMT_TC_NM,
			       B.WORK_MON,
			       B.DEPT_SCORE,
			       C.DEPT_FINAL_SCORE,
			       SUM(B.WORK_MON) OVER(PARTITION BY A.YEAR, A.EMP_NO) AS TOT_WORK_MON
			       <!-- 
			       COUNT (*) OVER (PARTITION BY A.YEAR, A.EMP_NO) CNT,
			       ROW_NUMBER () OVER (PARTITION BY A.YEAR, A.EMP_NO ORDER BY B.START_PCMT_DATE) CNT_INDEX
			       -->
			  FROM MEM_USER A
			       INNER JOIN MEM_USER_DEPT_HIS_SCORE B
			       ON A.YEAR = B.YEAR
			       AND A.EMP_NO = B.EMP_NO
			       INNER JOIN BSC_INSA_DEPT I
			       ON B.YEAR = I.YEAR
			       AND B.DEPT_CD = I.DEPT_CD
			       LEFT OUTER JOIN MEM_USER_DEPT_SCORE C
			       ON B.YEAR = C.YEAR
			       AND B.EMP_NO = C.EMP_NO
			 WHERE A.YEAR = #findYear#
			       <isNotEmpty prepend="AND" property="findDeptCd">
		           A.DEPT_CD = #findDeptCd#
		           </isNotEmpty>
		           <isNotEmpty prepend="AND" property="findCastTc">
		           A.CAST_TC = #findCastTc#
		           </isNotEmpty>
		           <isNotEmpty prepend="AND" property="findPosTc">
		           A.POS_TC = #findPosTc#
		           </isNotEmpty>
		           <isNotEmpty prepend="AND" property="findEmpNm">
		           A.EMP_NM LIKE '%' || TRIM(#findEmpNm#) || '%'
           		   </isNotEmpty>
			 ORDER BY A.EMP_NO, B.START_PCMT_DATE
				) TA_PAGE
			) TB_PAGE
		  
	</select>
	
	<select id="getEvalGradeList" parameterClass="hashMap" resultClass="hashMap">
		  
		  SELECT EVAL_METHOD_ID,
		         GRADE_ITEM_ID,
		         GRADE_ITEM_NM
		    FROM MEM_ECM_GRADE_DISTRI_EVAL_ITEM
		   WHERE YEAR = #findYear#
		   ORDER BY EVAL_METHOD_ID, SORT_ORDER
		  
	</select>			  
	
	<select id="selectAllRecords"  parameterClass="hashMap" resultClass="java.lang.String">
		SELECT COUNT(1) FROM (
		    SELECT A.YEAR
			      ,A.EMP_NO
			      ,A.EMP_NM
			      ,A.CAST_TC
			      ,F_CODE_NM('170',A.CAST_TC, A.YEAR) AS CAST_TC_NM
			      ,A.POS_TC
			      ,F_CODE_NM('171',A.POS_TC, A.YEAR) AS POS_TC_NM
			      ,A.DEPT_CD
			      ,F_DEPT_LEV2_NM(A.YEAR, A.DEPT_CD) AS DEPT_NM
			      ,A.EVAL_EXP_RS_ID
			      ,F_CODE_NM('242',A.EVAL_EXP_RS_ID, A.YEAR) AS EVAL_EXP_RS_NM
			      ,B.EVAL_GUN_ID
			      ,B.DEPT_FINAL_SCORE
			      ,B.DEPT_RATE
			      ,B.EMP_JOB_SCORE
			      ,B.EMP_JOB_RATE
			      ,B.EMP_COMM_SCORE
			      ,B.EMP_COMM_RATE
			      ,B.EMP_EVAL_SCORE
			      ,B.EMP_EVAL_RATE
			      ,B.EMP_FINAL_SCORE
			      ,B.TOT_FINAL_SCORE
			      ,B.TOT_GRADE_ID
			      ,B.TOT_GRADE_NM
			      ,B.TOT_FINAL_GRADE_ID
			      ,B.TOT_FINAL_GRADE_NM
			      ,B.CREATE_DT
			      ,B.MODIFY_DT
			      ,B.DELETE_DT
			  FROM MEM_USER A
			       LEFT OUTER JOIN MEM_TOT_RESULT B
			       ON A.YEAR = B.YEAR
			       AND A.EMP_NO = B.EMP_NO
			 WHERE A.YEAR = #findYear#
			 
			       <isNotEmpty prepend="AND" property="findEvalExpRsId">
		           A.EVAL_EXP_RS_ID = #findEvalExpRsId#
		           </isNotEmpty>
		           <isNotEmpty prepend="AND" property="findEvalGunId">
		           B.EVAL_GUN_ID = #findEvalGunId#
		           </isNotEmpty>
		           <isNotEmpty prepend="AND" property="findEmpNm">
		           A.EMP_NM LIKE '%' || TRIM(#findEmpNm#) || '%'
                   </isNotEmpty>
			 
			 ORDER BY B.TOT_FINAL_SCORE DESC NULLS LAST
			 ) A
	</select>
	
	<select id="getEvalGunList"  parameterClass="hashMap" resultClass="hashMap">
		 SELECT EVAL_GUN_ID,
		        EVAL_GUN_NM
		   FROM MEM_EVAL_GUN
		  WHERE YEAR = #findYear#
		    AND DELETE_DT IS NULL
		  ORDER BY SORT_ORDER
	</select>
	
	<select id="getEvalFirstComment"  parameterClass="hashMap" resultClass="java.lang.String">
		 SELECT EVAL_OPINION
		   FROM MEM_USER A
		        INNER JOIN MEM_EVAL_EMP B
		        ON A.YEAR = B.YEAR
		        AND A.EMP_NO = B.EMP_NO
		        AND A.EVAL_1_EMP_NO = B.EVAL_EMP_NO
		        AND B.EVAL_GUBUN = '01'
		  WHERE A.YEAR = #year#
		    AND A.EMP_NO = #empNo#
	</select>
	
	<select id="getEvalSecondComment"  parameterClass="hashMap" resultClass="java.lang.String">
		 SELECT EVAL_OPINION
		   FROM MEM_USER A
		        INNER JOIN MEM_EVAL_EMP B
		        ON A.YEAR = B.YEAR
		        AND A.EMP_NO = B.EMP_NO
		        AND A.EVAL_2_EMP_NO = B.EVAL_EMP_NO
		        AND B.EVAL_GUBUN = '02'
		  WHERE A.YEAR = #year#
		    AND A.EMP_NO = #empNo#
	</select>
	
	<select id="getDeptList"  parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR,
		       A.EMP_NO,
		       A.WORK_MON,
		       A.START_PCMT_DATE,
		       A.END_PCMT_DATE,
		       B.DEPT_GRADE,
		       F_DEPT_LEV2_NM(A.YEAR, A.DEPT_CD) AS DEPT_NM
		  FROM MEM_USER_DEPT_HIS_SCORE A
		       LEFT OUTER JOIN MEM_DEPT_SCORE B
		       ON A.YEAR = B.YEAR
		       AND A.DEPT_CD = B.DEPT_CD
		 WHERE A.YEAR = #year#
		   AND A.EMP_NO = #empNo#
		 ORDER BY A.START_PCMT_DATE ASC
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인성과 평가결과 상세
	  #	기능	: SELECT
	  #	TABLE	: 
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">

			SELECT A.YEAR
			      ,A.EMP_NO
			      ,A.EMP_NM
			      ,A.CAST_TC
			      ,F_CODE_NM('170',A.CAST_TC, A.YEAR) AS CAST_TC_NM
			      ,A.POS_TC
			      ,F_CODE_NM('171',A.POS_TC, A.YEAR) AS POS_TC_NM
			      ,A.DEPT_CD
			      ,F_DEPT_LEV2_NM(A.YEAR, A.DEPT_CD) AS DEPT_NM
			      ,C.EVAL_GIVE_METHOD_ID AS EVAL_METHOD_ID
			      ,A.EVAL_EXP_RS_ID
			      ,F_CODE_NM('242',A.EVAL_EXP_RS_ID, A.YEAR) AS EVAL_EXP_RS_NM
			      ,B.EVAL_GUN_ID
			      ,B.DEPT_FINAL_SCORE
			      ,B.DEPT_RATE
			      ,B.EMP_JOB_SCORE
			      ,B.EMP_JOB_RATE
			      ,B.EMP_COMM_SCORE
			      ,B.EMP_COMM_RATE
			      ,B.EMP_EVAL_SCORE
			      ,B.EMP_EVAL_RATE
			      ,B.EMP_FINAL_SCORE
			      ,B.TOT_FINAL_SCORE
			      ,B.TOT_GRADE_ID
			      ,B.TOT_GRADE_NM
			      ,B.TOT_FINAL_GRADE_ID
			      ,B.TOT_FINAL_GRADE_NM
			      ,ROW_NUMBER()OVER(PARTITION BY B.YEAR, B.EVAL_GUN_ID ORDER BY B.TOT_FINAL_SCORE DESC) AS RANKNUM
			      <!-- 
			      ,B.RANKNUM
			      -->
			      ,B.EMP_JOB_AVG_SCORE
			      ,B.CREATE_DT
			      ,B.MODIFY_DT
			      ,B.DELETE_DT
			  FROM MEM_USER A
			       LEFT OUTER JOIN MEM_TOT_RESULT B
			       ON A.YEAR = B.YEAR
			       AND A.EMP_NO = B.EMP_NO
			       LEFT OUTER JOIN MEM_EVAL_GUN C
			       ON B.YEAR = C.YEAR
			       AND B.EVAL_GUN_ID = C.EVAL_GUN_ID
			 WHERE A.YEAR = #year#
			   AND A.EMP_NO = #empNo#

		  
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적 평가결과 입력 =================================> 사용안함
	  #	기능	: INSERT
	  #	TABLE	: PRS_MNG_EVAL_RESULT
	==================================================================
	-->
	<insert id="insertMngResult" parameterClass="hashMap">
        INSERT INTO PRS_MNG_EVAL_RESULT (YEAR, EMPN, CAST_TC, KOR_NM, CUR_DEPT_CD, CUR_CAST_TC, CUR_POS_TC, DEPT_CD, POS_TC, SCORE)
        SELECT B.YEAR, B.EVAL_MEMB_EMPN, B.CAST_TC, C.KOR_NM
             , D.DEPT_CD CUR_DEPT_CD, D.CAST_TC CUR_CAST_TC, D.POS_CD CUR_POS_TC
             , F.DEPT_CD, F.POS_TC
             , B.TOTAL_SCORE * NVL(E.WORK_MON, 12) / 12
          FROM (
                SELECT A.YEAR, A.EVAL_GRP_ID, A.EVAL_MEMB_EMPN, C.EVAL_TYPE
                     , DECODE(C.EVAL_TYPE, '01', '10', '02', '20', '03', '20', '04', '30') CAST_TC
                     , ROUND(AVG(A.TOTAL_SCORE), 2) TOTAL_SCORE
                  FROM PRS_MNG_EVAL A
                     , (
                        SELECT YEAR, EVAL_GRP_ID, EVAL_MEMB_EMPN, AVG(TOTAL_SCORE) AVG_SCORE, STDDEV(TOTAL_SCORE) DEVIATION
                          FROM PRS_MNG_EVAL 
                         WHERE YEAR = #findYear#
                         GROUP BY YEAR, EVAL_GRP_ID, EVAL_MEMB_EMPN
                       ) B
                     , PRS_EVAL_GRP C
                 WHERE A.YEAR = #findYear#
                   AND A.YEAR = B.YEAR
                   AND A.YEAR = C.YEAR
                   AND A.EVAL_GRP_ID = C.EVAL_GRP_ID 
                   AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN
                   AND A.EVAL_GRP_ID = B.EVAL_GRP_ID
		<![CDATA[
                   AND ABS(A.TOTAL_SCORE - B.AVG_SCORE) <= 2 * B.DEVIATION
		]]>
                 GROUP BY A.YEAR, A.EVAL_GRP_ID, A.EVAL_MEMB_EMPN, C.EVAL_TYPE
               ) B
          LEFT OUTER JOIN (
                  SELECT A.YEAR, A.EMPN, A.CAST_TC, NVL(A.WORK_MON * 12  / DECODE(B.WORK_MON, 0, NULL, B.WORK_MON), 0) WORK_MON
                    FROM (
                          SELECT A.YEAR, A.EMPN, A.CAST_TC, A.EVAL_TYPE, SUM(A.WORK_MON) WORK_MON
                            FROM (
                                  SELECT YEAR, EMPN, CAST_TC
                                       , CASE WHEN CAST_TC = '10' THEN '01'
                                              WHEN CAST_TC = '20' AND POS_TC IN ('21', '23', '24', '2A', '2C') THEN '02' 
                                              WHEN CAST_TC = '20' AND POS_TC NOT IN ('21', '23', '24', '2A', '2C') THEN '03'
                                              WHEN CAST_TC = '30' THEN '04'
                                              END EVAL_TYPE
                                       , WORK_MON
                                    FROM V_PRS_RE_MON
                                   WHERE YEAR = #findYear# AND CAST_TC BETWEEN '10' AND '30'
                                 ) A
                           WHERE (A.EMPN, A.EVAL_TYPE) IN (
                                                         SELECT B.EVAL_MEMB_EMPN EMPN, A.EVAL_TYPE
                                                           FROM PRS_EVAL_GRP A
                                                              , PRS_MNG_EVAL_GRP_MEMBER B
                                                          WHERE A.YEAR = #findYear# AND A.YEAR = B.YEAR 
                                                            AND A.EVAL_GRP_ID = B.EVAL_GRP_ID
                                                          )
                           GROUP BY A.YEAR, A.EMPN, A.CAST_TC, A.EVAL_TYPE
                         ) A
                       , (
                          SELECT A.YEAR, A.EMPN, A.CAST_TC, SUM(A.WORK_MON) WORK_MON
                            FROM (
                                  SELECT YEAR, EMPN, CAST_TC
                                       , CASE WHEN CAST_TC = '10' THEN '01'
                                              WHEN CAST_TC = '20' AND POS_TC IN ('21', '23', '24', '2A', '2C') THEN '02' 
                                              WHEN CAST_TC = '20' AND POS_TC NOT IN ('21', '23', '24', '2A', '2C') THEN '03'
                                              WHEN CAST_TC = '30' THEN '04'
                                              END EVAL_TYPE
                                       , WORK_MON
                                    FROM V_PRS_RE_MON
                                   WHERE YEAR = #findYear# AND CAST_TC BETWEEN '10' AND '30'
                                 ) A
                           WHERE (A.EMPN, A.EVAL_TYPE) IN (
                                                         SELECT B.EVAL_MEMB_EMPN EMPN, A.EVAL_TYPE
                                                           FROM PRS_EVAL_GRP A
                                                              , PRS_MNG_EVAL_GRP_MEMBER B
                                                          WHERE A.YEAR = #findYear# AND A.YEAR = B.YEAR 
                                                            AND A.EVAL_GRP_ID = B.EVAL_GRP_ID
                                                          )
                           GROUP BY A.YEAR, A.EMPN, A.CAST_TC
                         ) B
                   WHERE A.YEAR = B.YEAR
                     AND A.EMPN = B.EMPN
                     AND A.CAST_TC = B.CAST_TC
               ) E
            ON B.YEAR = E.YEAR AND B.EVAL_MEMB_EMPN = E.EMPN AND B.CAST_TC = E.CAST_TC
             , BSC_INSA C
          LEFT OUTER JOIN V_ROLE_USER D ON C.EMPN = D.SABUN
          LEFT OUTER JOIN (
                            SELECT YEAR, EMPN, CAST_TC, DEPT_CD, POS_TC
                              FROM BSC_INSA_PCMT WHERE (YEAR, EMPN, CAST_TC, END_PCMT_DATE) IN ( 
                                                    SELECT YEAR, EMPN, CAST_TC, MAX(END_PCMT_DATE) FROM BSC_INSA_PCMT WHERE YEAR = #findYear# AND CAST_TC BETWEEN '10' AND '30'
                                                     GROUP BY YEAR, EMPN, CAST_TC
                                                    )
                          ) F
            ON C.YEAR = F.YEAR AND C.EMPN = F.EMPN
         WHERE B.YEAR = B.YEAR
           AND B.YEAR = C.YEAR
           AND C.CAST_TC = F.CAST_TC
           AND B.EVAL_MEMB_EMPN = C.EMPN
         ORDER BY B.EVAL_GRP_ID, B.EVAL_MEMB_EMPN
	</insert>

	<!--
	==================================================================   
	  # 설명	: 간부개인성과 평가결과 프로시져 실행
	  #	기능	: PROCEDURE
	  #	TABLE	: SP_PRS_MNG_EVAL_FINAL_RESULT 
	==================================================================
	-->		
	<insert id="execMngEvalFinalScore" parameterClass="hashMap">  
		CALL SP_MEM_EMP_FINAL_SCORE(#findYear#)
	</insert>	
	
	<!--
	==================================================================   
	  # 설명	: 간부개인성과 평가결과 프로시져 실행
	  #	기능	: PROCEDURE
	  #	TABLE	: SP_PRS_MNG_EVAL_FINAL_RESULT 
	==================================================================
	-->		
	<insert id="execMngEvalFinalGrade" parameterClass="hashMap">  
		CALL SP_MEM_EMP_FINAL_GRADE(#findYear#)
	</insert>	
	
	<!--
	==================================================================   
	  # 설명	: 간부개인성과 평가결과 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_CODE
	==================================================================
	-->	
	<update id="updateScoreData" parameterClass="hashMap">
        UPDATE MEM_TOT_RESULT SET 
               TOT_FINAL_SCORE = #totFinalScore#
         WHERE YEAR = #year#
           AND EMP_NO = #empNo#
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인성과 평가결과 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_CODE
	==================================================================
	-->	
	<update id="updateGradeData" parameterClass="hashMap">
        UPDATE MEM_TOT_RESULT SET 
               TOT_FINAL_GRADE_ID = #totFinalGradeId#
         WHERE YEAR = #year#
           AND EMP_NO = #empNo#
	</update>
	
</sqlMap>


