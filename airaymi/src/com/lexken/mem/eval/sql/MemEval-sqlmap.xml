<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="mem.eval.memEval">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTINGd
	  #	TABLE	: MEM_MEET
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />
	 
	<!--
	==================================================================   
	  # 설명	: 평가기간
	  #	기능	: SELECT
	  #	TABLE	: MEM_EVAL_SCHEDULE
	==================================================================
	-->
	<select id="getPeriodInfo" parameterClass="hashMap" resultClass="hashMap">
		SELECT 
		       TO_CHAR(TO_DATE(EVAL_START_DT, 'YYYYMMDD'), 'YYYY.MM.DD') AS EVAL_START_DT
		     , TO_CHAR(TO_DATE(EVAL_END_DT, 'YYYYMMDD'), 'YYYY.MM.DD') AS EVAL_END_DT
             , CASE WHEN
             			 EVAL_START_DT <![CDATA[ <= ]]> TO_CHAR(SYSDATE, 'YYYYMMDD') 
             	     AND EVAL_END_DT <![CDATA[ >= ]]> TO_CHAR(SYSDATE, 'YYYYMMDD')
        			THEN
                         'Y'
                    ELSE
                         'N'
                    END AS EVAL_IN_TERM
		  FROM MEM_EVAL_SCHEDULE
		 WHERE YEAR = #year#
	</select>
	 
	<!--
	==================================================================   
	  # 설명	: 평가상태
	  #	기능	: SELECT
	  #	TABLE	: MEM_EVAL_STATE
	==================================================================
	-->
	<select id="getStateInfo" parameterClass="hashMap" resultClass="hashMap">
		SELECT 
		     NVL((
		         SELECT
		                EVAL_STATE
		           FROM MEM_EVAL_STATE
		          WHERE YEAR = #year#
		            AND EVAL_GUBUN = #evalGubun#
		            AND EVAL_EMP_NO = #evalEmpNo#
		            AND EVAL_GRP_ID = DECODE(#evalGrpId#, '', 'ALL', #evalGrpId#)
		            AND EVAL_DEPT_CD = #deptCd#
		     ), 'N') AS EVAL_STATE
		  FROM DUAL
	</select>
	 
	<!--
	==================================================================   
	  # 설명	: 업무실적평가 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: MEM_MEET
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		SELECT
		       A.YEAR
		     , A.EVAL_GRP_ID
		     , DECODE(A.EVAL_GRP_ID, '', '전체', B.EVAL_GRP_NM) AS EVAL_GRP_NM
		     , A.EVAL_GUBUN
		     , F_CODE_NM('237', A.EVAL_GUBUN, A.YEAR) AS EVAL_GUBUN_NM
		     , A.EVAL_EMP_NO
		     , C.KOR_NM AS EVAL_EMP_NM
		     , A.DEPT_CD
		     , F_DEPT_LEV2_NM(A.YEAR, A.DEPT_CD) AS DEPT_NM
		     , F_DEPT_LEV2_NM(A.YEAR, A.EVAL_DEPT_CD) AS EVAL_DEPT_NM
		     , F_CODE_NM('170', A.EVAL_CAST_TC , A.YEAR) AS EVAL_CAST_NM
		     , F_CODE_NM('171', A.EVAL_POS_TC , A.YEAR) AS EVAL_POS_NM 
		     , A.EVAL_TARGET_COUNT
		     , DECODE(E.EVAL_STATE, '', 'N', E.EVAL_STATE) AS EVAL_STATE
		     , DECODE(A.EVAL_TARGET_COUNT, 1, '평가불가', DECODE(E.EVAL_STATE, '', '평가미완료', F_CODE_NM('246', E.EVAL_STATE , A.YEAR)))         AS EVAL_STATE_NM 
		  FROM(
		      SELECT
		             A.YEAR 
		    <isEqual property="eval1YnByGroup" compareValue="Y">
		           , A.EVAL_GRP_ID
		    </isEqual>
		    <isNotEqual property="eval1YnByGroup" compareValue="Y">
		           , '' AS EVAL_GRP_ID
		    </isNotEqual>
		           , A.DEPT_CD
		           , '01' AS EVAL_GUBUN
		           , A.EVAL_1_EMP_NO AS EVAL_EMP_NO
		           , A.EVAL_1_DEPT_CD AS EVAL_DEPT_CD
		           , A.EVAL_1_CAST_TC AS EVAL_CAST_TC
		           , A.EVAL_1_POS_TC AS EVAL_POS_TC
		           , COUNT(*) AS EVAL_TARGET_COUNT
		        FROM MEM_USER A
		       WHERE A.YEAR = #year#
		         AND A.EVAL_1_EMP_NO IS NOT NULL
		         AND A.EVAL_TGT_YN = 'Y'
			<isNotEmpty prepend="AND" property="sEmpNo">
					 A.EVAL_1_EMP_NO = #sEmpNo#
			</isNotEmpty>
		    <isEqual property="eval1YnByGroup" compareValue="Y">
		       GROUP BY A.YEAR, A.DEPT_CD, A.EVAL_GRP_ID, A.EVAL_1_EMP_NO, A.EVAL_1_DEPT_CD, A.EVAL_1_CAST_TC, A.EVAL_1_POS_TC
		    </isEqual>
		    <isNotEqual property="eval1YnByGroup" compareValue="Y">
		       GROUP BY A.YEAR, A.DEPT_CD, A.EVAL_1_EMP_NO, A.EVAL_1_DEPT_CD, A.EVAL_1_CAST_TC, A.EVAL_1_POS_TC
		    </isNotEqual>
		       
		       UNION ALL
		       SELECT 
		             A.YEAR
		    <isEqual property="eval2YnByGroup" compareValue="Y">
		           , A.EVAL_GRP_ID
		             </isEqual>
		    <isNotEqual property="eval2YnByGroup" compareValue="Y">
		           , '' AS EVAL_GRP_ID
		    </isNotEqual>
		           , B.UP_DEPT_ID AS DEPT_CD
		           , '02' AS EVAL_GUBUN
		           , A.EVAL_2_EMP_NO AS EVAL_EMP_NO
		           , A.EVAL_2_DEPT_CD AS EVAL_DEPT_CD
		           , A.EVAL_2_CAST_TC AS EVAL_CAST_TC
		           , A.EVAL_2_POS_TC AS EVAL_POS_TC
		           , COUNT(*) AS EVAL_TARGET_COUNT
		        FROM MEM_USER A
		           , BSC_DEPTINFO B
		       WHERE A.DEPT_CD = B.DEPT_ID
		         AND A.YEAR = #findYear#
		         AND A.EVAL_2_EMP_NO IS NOT NULL
		         AND A.EVAL_TGT_YN = 'Y'
			<isNotEmpty prepend="AND" property="sEmpNo">
					 A.EVAL_2_EMP_NO = #sEmpNo#
			</isNotEmpty>
		    <isEqual property="eval2YnByGroup" compareValue="Y">
		       GROUP BY A.YEAR, B.UP_DEPT_ID, A.EVAL_GRP_ID, A.EVAL_2_EMP_NO, A.EVAL_2_DEPT_CD, A.EVAL_2_CAST_TC, A.EVAL_2_POS_TC
		    </isEqual>
		    <isNotEqual property="eval2YnByGroup" compareValue="Y">
		       GROUP BY A.YEAR, B.UP_DEPT_ID, A.EVAL_2_EMP_NO, A.EVAL_2_DEPT_CD, A.EVAL_2_CAST_TC, A.EVAL_2_POS_TC
		    </isNotEqual>
		       UNION ALL
		       SELECT 
		             A.YEAR
		    <isEqual property="peerYnByGroup" compareValue="Y">
		           , A.EVAL_GRP_ID
		    </isEqual>
		    <isNotEqual property="peerYnByGroup" compareValue="Y">
		           , '' AS EVAL_GRP_ID
		    </isNotEqual>
		           , A.EVAL_PEER_DEPT_CD AS DEPT_CD
		           , '03' AS EVAL_GUBUN
		           , A.EVAL_PEER_EMP_NO AS EVAL_EMP_NO
		           , A.EVAL_PEER_DEPT_CD AS EVAL_DEPT_CD
		           , A.EVAL_PEER_CAST_TC AS EVAL_CAST_TC
		           , A.EVAL_PEER_POS_TC AS EVAL_POS_TC
		           , COUNT(*) AS EVAL_TARGET_COUNT
		        FROM MEM_PEER_EVAL_USER A
		       WHERE A.YEAR = #findYear#
		         AND A.EVAL_PEER_EMP_NO IS NOT NULL
			<isNotEmpty prepend="AND" property="sEmpNo">
					 A.EVAL_PEER_EMP_NO = #sEmpNo#
			</isNotEmpty>
		    <isEqual property="peerYnByGroup" compareValue="Y">
		       GROUP BY A.YEAR, A.EVAL_PEER_DEPT_CD, A.EVAL_GRP_ID, A.EVAL_PEER_EMP_NO, A.EVAL_PEER_DEPT_CD, A.EVAL_PEER_CAST_TC, A.EVAL_PEER_POS_TC
		    </isEqual>
		    <isNotEqual property="peerYnByGroup" compareValue="Y">
		       GROUP BY A.YEAR, A.EVAL_PEER_DEPT_CD, A.EVAL_PEER_EMP_NO, A.EVAL_PEER_DEPT_CD, A.EVAL_PEER_CAST_TC, A.EVAL_PEER_POS_TC
		    </isNotEqual>
		 ) A
		 , MEM_EVAL_GRP B
		 , BSC_INSA C
		 , MEM_EVAL_STATE E
		 WHERE A.YEAR = B.YEAR(+)
		   AND A.EVAL_GRP_ID = B.EVAL_GRP_ID(+)
		   AND A.YEAR = C.YEAR
		   AND A.EVAL_EMP_NO = C.EMPN
		   AND A.YEAR = E.YEAR(+)
		   AND A.EVAL_GUBUN = E.EVAL_GUBUN(+)
		   AND A.EVAL_EMP_NO = E.EVAL_EMP_NO(+)
		   AND A.DEPT_CD = E.EVAL_DEPT_CD(+)
		   AND A.EVAL_GRP_ID = E.EVAL_GRP_ID(+)
	<isNotEmpty prepend="AND" property="findEvalGubun">
	           A.EVAL_GUBUN = #findEvalGubun#
	</isNotEmpty>
	<isNotEmpty prepend="AND" property="findEvalEmpNm">
	           C.KOR_NM LIKE '%' || TRIM(#findEvalEmpNm#) || '%'
	</isNotEmpty>
		 ORDER BY A.EVAL_GRP_ID, A.EVAL_GUBUN, C.KOR_NM
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 업무수행평가 평가항목 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getEvalItemList" parameterClass="hashMap" resultClass="hashMap">
		SELECT 
		       A.YEAR
	         , B.JOB_EVAL_ITEM_ID
	         , B.JOB_EVAL_ITEM_NM
	         , COUNT(*) OVER(PARTITION BY B.JOB_EVAL_ITEM_ID) AS CAL_CNT
	         , ROW_NUMBER() OVER(PARTITION BY B.JOB_EVAL_ITEM_ID ORDER BY B.SORT_ORDER, A.SORT_ORDER) AS CAL_NUM
		     , A.DETAIL_EVAL_METRIC_ID AS EVAL_ITEM_ID
		     , A.DETAIL_EVAL_METRIC_NM AS EVAL_ITEM_NM
		  FROM MEM_DETAIL_EVAL_METRIC A
		     , MEM_JOB_EVAL_ITEM B
		 WHERE A.YEAR = #year#
		   AND A.YEAR = B.YEAR
		   AND A.JOB_EVAL_ITEM_ID = B.JOB_EVAL_ITEM_ID
	<isEqual property="evalGubun" compareValue="01">
		   AND A.EVAL_1_RATE IS NOT NULL
	</isEqual>
	<isEqual property="evalGubun" compareValue="02">
		   AND A.EVAL_2_RATE IS NOT NULL
	</isEqual>
	<isEqual property="evalGubun" compareValue="03">
		   AND A.EVAL_PEER_RATE IS NOT NULL
	</isEqual>
       	   AND A.DELETE_DT IS NULL
           AND B.DELETE_DT IS NULL 
		 ORDER BY B.SORT_ORDER, A.SORT_ORDER
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 업무수행평가  평가대상자 보기[1, 2차평가자]
	  #	기능	: SELECT
	  #	TABLE	: MEM_USER, MEM_EVAL_EMP, MEM_EVAL_ITEM
	==================================================================
	-->
	<select id="getEvalMemberList" remapResults="true" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.*, RANK()OVER (ORDER BY A.SCORE DESC) RANK FROM(
			SELECT
			       A.YEAR
			     , A.EMP_NO AS EVAL_MEMB_EMPN
			     , A.EMP_NM AS KOR_NM
			     ,
			    <iterate property="itemArray" conjunction=",">
			        MAX(CASE WHEN C.DETAIL_EVAL_METRIC_ID = '$itemArray[]$' THEN C.EVAL_GRADE_ID  ELSE NULL END) $itemArray[]$
			    </iterate>
			     , B.ADD_SCORE AS EXTRA_POINT
			     , DECODE(D.EMP_NO, '', 'N', 'Y') AS EXTRA_POINT_YN
			     , CASE WHEN B.CHANGE_SCORE > 100 THEN 100 ELSE B.CHANGE_SCORE END AS SCORE
			     , REPLACE( REPLACE ( MAX(B.EVAL_OPINION), CHR(13), '' ), CHR(10), '<![CDATA[<BR>]]>' ) AS EVAL_OPINION
			     , NVL(A.EVAL_REQ_YN, 'N') AS EVAL_REQ_YN
			  FROM MEM_USER A
			     , MEM_EVAL_EMP B
			     , MEM_EVAL_ITEM C
			     , MEM_EXTRA_POINT D
			 WHERE 1 = 1
			   AND A.YEAR = B.YEAR(+)
			   AND A.EMP_NO = B.EMP_NO(+)
			   AND A.EVAL_TGT_YN = 'Y'
			   AND B.EVAL_GUBUN(+) = #evalGubun#
			   AND B.EVAL_EMP_NO(+) = #evalEmpNo#
			   AND A.YEAR = C.YEAR(+)
			   AND A.EMP_NO = C.EMP_NO(+)
			   AND C.EVAL_GUBUN(+) = #evalGubun#
			   AND C.EVAL_EMP_NO(+) = #evalEmpNo#
			   AND A.YEAR = #year#
			   AND A.YEAR = D.YEAR(+)
			   AND A.EMP_NO = D.EMP_NO(+)
		<isEqual property="evalGubun" compareValue="01">
			   AND A.EVAL_1_EMP_NO = #evalEmpNo#
			   AND A.DEPT_CD = #deptCd#
		</isEqual>
		<isEqual property="evalGubun" compareValue="02">
			   AND A.EVAL_2_EMP_NO = #evalEmpNo#
			   AND A.DEPT_CD IN (SELECT DEPT_ID FROM BSC_DEPTINFO WHERE UP_DEPT_ID = #deptCd#)
		</isEqual>
		<isNotEmpty property="evalGrpId">
	           AND A.EVAL_GRP_ID = #evalGrpId#
		</isNotEmpty>
			 GROUP BY 
			       A.YEAR
			     , A.EMP_NO
			     , A.EMP_NM
			     , B.ADD_SCORE
			     , B.CHANGE_SCORE
			     , A.EVAL_REQ_YN
			     , D.EMP_NO
		) A
		ORDER BY A.SCORE DESC, A.KOR_NM
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 업무수행평가  평가대상자 보기[동료평가자]
	  #	기능	: SELECT
	  #	TABLE	: MEM_PEER_EVAL_USER, MEM_EVAL_EMP, MEM_EVAL_ITEM
	==================================================================
	-->
	<select id="getPeerMemberList" remapResults="true" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.*, RANK()OVER (ORDER BY A.SCORE DESC) RANK FROM(
			SELECT
			       A.YEAR
			     , A.EMP_NO AS EVAL_MEMB_EMPN
			     , D.KOR_NM
			     ,
			    <iterate property="itemArray" conjunction=",">
			        MAX(CASE WHEN C.DETAIL_EVAL_METRIC_ID = '$itemArray[]$' THEN C.EVAL_GRADE_ID  ELSE NULL END) $itemArray[]$
			    </iterate>
			     , B.ADD_SCORE AS EXTRA_POINT
			     , B.CHANGE_SCORE AS SCORE
			     , MAX(B.EVAL_OPINION) AS EVAL_OPINION
			     , NVL(E.EVAL_REQ_YN, 'N') AS EVAL_REQ_YN
			  FROM MEM_PEER_EVAL_USER A
			     , MEM_EVAL_EMP B
			     , MEM_EVAL_ITEM C
			     , BSC_INSA D
			     , MEM_USER E
			 WHERE 1 = 1
			   AND A.YEAR = B.YEAR(+)
			   AND A.EMP_NO = B.EMP_NO(+)
			   AND B.EVAL_GUBUN(+) = #evalGubun#
			   AND B.EVAL_EMP_NO(+) = #evalEmpNo#
			   AND A.YEAR = C.YEAR(+)
			   AND A.EMP_NO = C.EMP_NO(+)
			   AND C.EVAL_GUBUN(+) = #evalGubun#
			   AND C.EVAL_EMP_NO(+) = #evalEmpNo#
			   AND A.YEAR = D.YEAR
			   AND A.EMP_NO = D.EMPN
			   AND A.YEAR = E.YEAR
			   AND A.EMP_NO = E.EMP_NO
			   AND E.EVAL_TGT_YN = 'Y'
			   AND A.YEAR = #year#
		       AND A.EVAL_PEER_EMP_NO = #evalEmpNo#
		       AND A.EVAL_PEER_DEPT_CD = #deptCd#
		<isNotEmpty property="evalGrpId">
	           AND A.EVAL_GRP_ID = #evalGrpId#
		</isNotEmpty>
			 GROUP BY 
			       A.YEAR
			     , A.EMP_NO
			     , D.KOR_NM
			     , B.ADD_SCORE
			     , B.CHANGE_SCORE
			     , E.EVAL_REQ_YN
		) A
		ORDER BY A.SCORE DESC, A.KOR_NM
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 업적수행평가 평가대상자 전체 수 보기(1,2차평가자)
	  #	기능	: SELECT
	  #	TABLE	: MEM_USER
	==================================================================
	-->
	<select id="getEvalMemberCount" parameterClass="hashMap" resultClass="hashMap">
		SELECT
		       TO_CHAR(COUNT(*)) MEMBER_COUNT
		  FROM MEM_USER A
		 WHERE 1 = 1
		   AND A.YEAR = #year#
		   AND A.EVAL_TGT_YN = 'Y'
	<isEqual property="evalGubun" compareValue="01">
		   AND A.EVAL_1_EMP_NO = #evalEmpNo#
		<isNotEmpty property="deptCd">
	       AND A.DEPT_CD = #deptCd#
		</isNotEmpty>
	</isEqual>
	<isEqual property="evalGubun" compareValue="02">
		   AND A.EVAL_2_EMP_NO = #evalEmpNo#
		<isNotEmpty property="deptCd">
	       AND A.DEPT_CD IN (SELECT DEPT_ID FROM BSC_DEPTINFO WHERE UP_DEPT_ID = #deptCd#)
		</isNotEmpty>
	</isEqual>
	<isNotEmpty property="evalGrpId">
           AND A.EVAL_GRP_ID = #evalGrpId#
	</isNotEmpty>
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 업적수행평가 평가대상자 전체 수 보기(동료평가자)
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP, PRS_MNG_EVAL_GRP_ASSESSOR
	==================================================================
	-->
	<select id="getPeerMemberCount" parameterClass="hashMap" resultClass="hashMap">
		SELECT
		       TO_CHAR(COUNT(*)) MEMBER_COUNT
		  FROM MEM_PEER_EVAL_USER A
		 WHERE 1 = 1
		   AND A.YEAR = #year#
	       AND A.EVAL_PEER_EMP_NO = #evalEmpNo#
	<isNotEmpty property="evalGrpId">
           AND A.EVAL_GRP_ID = #evalGrpId#
	</isNotEmpty>
	<isNotEmpty property="deptCd">
           AND A.EVAL_PEER_DEPT_CD = #deptCd#
	</isNotEmpty>
	</select>
	
	
	<!--
	==================================================================   
	  # 설명	: 업무실적 평가등급 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP, MEM_ECM_GRADE_DISTRI_EVAL_ITEM
	==================================================================
	-->
	<select id="getEvalGrade" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR,
		           A.EVAL_METHOD_ID,
		           A.EVAL_METHOD_NM,
		           B.GRADE_ITEM_ID,
		           B.GRADE_ITEM_NM,
		           B.GRADE_ITEM_SCORE,
		           B.GRADE_ITEM_RATE,
		           C.ITEM_CNT,
		           C.ITEM_DISTRI_CNT
		      FROM MEM_ECM_EVAL_GRADE_CONVERT_TAB A
		           LEFT OUTER JOIN MEM_ECM_GRADE_DISTRI_EVAL_ITEM B
		           ON A.YEAR = B.YEAR
		           AND A.EVAL_METHOD_ID = B.EVAL_METHOD_ID
		           LEFT OUTER JOIN MEM_ECM_GRADE_DISTRI_TAB C
		           ON B.YEAR = C.YEAR
		           AND B.EVAL_METHOD_ID = C.EVAL_METHOD_ID
		           AND B.GRADE_ITEM_ID = C.GRADE_ITEM_ID
		           AND C.ITEM_CNT = #itemCnt#
		     WHERE A.YEAR = #year#
		       AND A.DELETE_DT IS NULL
		       AND A.EVAL_METHOD_ID = (SELECT EVAL_GIVE_METHOD_ID FROM MEM_EVAL_USER_RATE WHERE YEAR = #year# AND EVAL_USER_GUBUN_ID = #evalGubun#)
		     ORDER BY A.EVAL_METHOD_ID, B.SORT_ORDER
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 업무수행평가 평가항목별 등급별 인원수
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getEvalItemGradeCount" parameterClass="hashMap" resultClass="hashMap" remapResults="true">
		SELECT
	           B.JOB_EVAL_ITEM_ID
	         , B.JOB_EVAL_ITEM_NM
	         , COUNT(*) OVER(PARTITION BY B.JOB_EVAL_ITEM_ID) AS CAL_CNT
	         , ROW_NUMBER() OVER(PARTITION BY B.JOB_EVAL_ITEM_ID ORDER BY B.SORT_ORDER, A.SORT_ORDER) AS CAL_NUM
		     , A.DETAIL_EVAL_METRIC_ID AS EVAL_ITEM_ID
		     , A.DETAIL_EVAL_METRIC_NM AS EVAL_ITEM_NM
		     , A.SORT_ORDER
		     ,
		     <iterate property="itemArray" conjunction=",">
		       SUM(CASE WHEN C.EVAL_GRADE_ID = '$itemArray[]$' THEN 1 ELSE 0 END) $itemArray[]$
		     </iterate>
		  FROM MEM_DETAIL_EVAL_METRIC A
		     , MEM_JOB_EVAL_ITEM B
		     , (
		              SELECT A.* 
		           , B.EVAL_GRP_ID
		        FROM MEM_EVAL_ITEM A
		           , MEM_USER B 
		       WHERE A.YEAR = B.YEAR
		         AND A.EMP_NO = B.EMP_NO
		         AND B.EVAL_GRP_ID = #evalGrpId#
		        ) C
		 WHERE A.YEAR = #year#
		   AND A.YEAR = B.YEAR
		   AND A.JOB_EVAL_ITEM_ID = B.JOB_EVAL_ITEM_ID
		   AND A.DELETE_DT IS NULL
		   AND B.DELETE_DT IS NULL 
		   AND A.YEAR = C.YEAR(+)
		   AND A.DETAIL_EVAL_METRIC_ID = C.DETAIL_EVAL_METRIC_ID(+)
		   AND C.EVAL_GUBUN(+) = #evalGubun#
		   AND C.EVAL_EMP_NO(+) = #evalEmpNo#
	<isEqual property="evalGubun" compareValue="01">
		   AND A.EVAL_1_RATE IS NOT NULL
	</isEqual>
	<isEqual property="evalGubun" compareValue="02">
		   AND A.EVAL_2_RATE IS NOT NULL
	</isEqual>
	<isEqual property="evalGubun" compareValue="03">
		   AND A.EVAL_PEER_RATE IS NOT NULL
	</isEqual>
		 GROUP BY B.JOB_EVAL_ITEM_ID, B.JOB_EVAL_ITEM_NM
		        , A.DETAIL_EVAL_METRIC_ID, A.DETAIL_EVAL_METRIC_NM
		        , A.SORT_ORDER, B.SORT_ORDER
		 ORDER BY B.SORT_ORDER, A.SORT_ORDER
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가상태 수정
	  #	기능	: UPDATE
	  #	TABLE	: MEM_EVAL_STATE
	==================================================================
	-->	
	<update id="updateEvalStateData" parameterClass="hashMap">
	MERGE INTO MEM_EVAL_STATE A
		USING DUAL
		ON (A.YEAR = #year# AND A.EVAL_GUBUN = #evalGubun# AND EVAL_EMP_NO = #evalEmpNo# AND EVAL_DEPT_CD = #deptCd# AND EVAL_GRP_ID = NVL(#evalGrpId#, 'ALL'))
	WHEN MATCHED THEN 
    UPDATE SET 
           EVAL_STATE = #evalState#
         , CREATE_DT = SYSDATE
	WHEN NOT MATCHED THEN
	INSERT (
               YEAR
             , EVAL_GUBUN
             , EVAL_EMP_NO
             , EVAL_GRP_ID
             , EVAL_DEPT_CD
             , EVAL_STATE
             , CREATE_DT
           ) VALUES (
               #year#
             , #evalGubun#
             , #evalEmpNo#
             , NVL(#evalGrpId#, 'ALL')
             , #deptCd#
             , #evalState#
             , SYSDATE
    	   )
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 직원평가 삭제
	  #	기능	: DELETE
	  #	TABLE	: MEM_EVAL_EMP
	==================================================================
	-->	
	<delete id="deleteEvalEmpData" parameterClass="hashMap">
		DELETE MEM_EVAL_EMP 
		 WHERE YEAR = #year#
		   AND EVAL_GUBUN = #evalGubun#
		   AND EVAL_EMP_NO = #evalEmpNo#
	</delete>
	
	<!--
	==================================================================   
	  # 설명	: 직원평가 등록
	  #	기능	: INSERT
	  #	TABLE	: MEM_EVAL_EMP
	==================================================================
	-->
	<insert id="insertEvalEmpData" parameterClass="hashMap">		
		INSERT INTO MEM_EVAL_EMP (
		       YEAR
		     , EVAL_GUBUN
		     , EVAL_EMP_NO
		     , EMP_NO
		     , EVAL_SCORE
		     , EVAL_OPINION
		     , CHANGE_SCORE
		     , ADD_SCORE
		     , CREATE_DT		     
			 ) VALUES ( 
			   #year#
			 , #evalGubun#
			 , #evalEmpNo#
			 , #empNo#
			 , (
			 		SELECT SUM(EVAL_SCORE) FROM MEM_EVAL_ITEM WHERE YEAR = #year# AND EVAL_GUBUN = #evalGubun# AND EVAL_EMP_NO = #evalEmpNo# AND EMP_NO = #empNo#
			 	)
			 , #evalOpinion#
			 , (
			 		SELECT SUM(CHANGE_SCORE) + TO_NUMBER(NVL(#addScore#, 0)) FROM MEM_EVAL_ITEM WHERE YEAR = #year# AND EVAL_GUBUN = #evalGubun# AND EVAL_EMP_NO = #evalEmpNo# AND EMP_NO = #empNo#
			 	)
			 , #addScore#
			 , SYSDATE			
			 )
	</insert>
	
	<!--
	==================================================================   
	  # 설명	: 평가항목 삭제
	  #	기능	: DELETE
	  #	TABLE	: MEM_EVAL_ITEM
	==================================================================
	-->	
	<delete id="deleteEvalItemData" parameterClass="hashMap">
		DELETE MEM_EVAL_ITEM 
		 WHERE YEAR = #year#
		   AND EVAL_GUBUN = #evalGubun#
		   AND EVAL_EMP_NO = #evalEmpNo#
	</delete>
	
	<!--
	==================================================================   
	  # 설명	: 평가항목 등록
	  #	기능	: INSERT
	  #	TABLE	: MEM_EVAL_ITEM
	==================================================================
	-->
	<insert id="insertEvalItemData" parameterClass="hashMap">		
		INSERT INTO MEM_EVAL_ITEM (
		       YEAR
		     , EVAL_GUBUN
		     , EVAL_EMP_NO
		     , EMP_NO
		     , DETAIL_EVAL_METRIC_ID
		     , CHANGE_SCORE
		     , EVAL_SCORE
		     , EVAL_GRADE_ID
		     , CREATE_DT		     
			 ) VALUES ( 
			   #year#
			 , #evalGubun#
			 , #evalEmpNo#
			 , #empNo#
			 , #detailEvalMetricId#
			 , (
				  SELECT
	            	A.GRADE_ITEM_SCORE * (EVAL_RATE / 100) * (A.CHANGE_WEIGHT / 100) AS EVAL_SCORE
	              FROM(
	                  SELECT B.GRADE_ITEM_SCORE
	                       , CASE WHEN #evalGubun# = '01' THEN 
	                              C.EVAL_1_RATE
	                              ELSE 
	                         	  CASE WHEN #evalGubun# = '02' THEN
	                              	C.EVAL_2_RATE
	                              ELSE
	                              	C.EVAL_PEER_RATE
	                              END  
	                         END AS EVAL_RATE
	                       , F_MEM_CHANGE_WEIGHT(A.YEAR, D.METRIC_ID, D.EMP_NO) AS CHANGE_WEIGHT
				      FROM MEM_ECM_EVAL_GRADE_CONVERT_TAB A
				           LEFT OUTER JOIN MEM_ECM_GRADE_DISTRI_EVAL_ITEM B
				           ON A.YEAR = B.YEAR
				           AND A.EVAL_METHOD_ID = B.EVAL_METHOD_ID
	                       LEFT JOIN MEM_DETAIL_EVAL_METRIC C
	                       ON A.YEAR = C.YEAR
	                       AND C.DETAIL_EVAL_METRIC_ID = #detailEvalMetricId#
	                       AND C.DELETE_DT IS NULL
	                       LEFT JOIN MEM_METRIC D
	                       ON D.YEAR = C.YEAR
	                       AND D.DETAIL_EVAL_GBN_ID = C.JOB_EVAL_ITEM_ID
	                       AND D.DELETE_DT IS NULL
	                       AND D.EMP_NO = #empNo#
				     WHERE A.YEAR = #year#
	                   AND A.DELETE_DT IS NULL
				       AND A.EVAL_METHOD_ID = (SELECT EVAL_GIVE_METHOD_ID FROM MEM_EVAL_USER_RATE WHERE YEAR = #year# AND EVAL_USER_GUBUN_ID = #evalGubun#)
				       AND GRADE_ITEM_ID = #evalGradeId#
	              ) A
               )
			 , (
                  SELECT B.GRADE_ITEM_SCORE
			      FROM MEM_ECM_EVAL_GRADE_CONVERT_TAB A
			           LEFT OUTER JOIN MEM_ECM_GRADE_DISTRI_EVAL_ITEM B
			           ON A.YEAR = B.YEAR
			           AND A.EVAL_METHOD_ID = B.EVAL_METHOD_ID
			     WHERE A.YEAR = #year#
                   AND A.DELETE_DT IS NULL
			       AND A.EVAL_METHOD_ID = (SELECT EVAL_GIVE_METHOD_ID FROM MEM_EVAL_USER_RATE WHERE YEAR = #year# AND EVAL_USER_GUBUN_ID = #evalGubun#)
			       AND GRADE_ITEM_ID = #evalGradeId#
               )
			 , #evalGradeId#
			 , SYSDATE			
			 )
	</insert>

	<!--
	==================================================================   
	  # 설명	: 자기평가 정보 조회
	  #	기능	: SELECT
	  #	TABLE	: MEM_MEET
	==================================================================
	-->
	<select id="getSelfEval" parameterClass="hashMap" resultClass="hashMap">
		SELECT
		       A.YEAR
		     , REPLACE( REPLACE ( A.EXCELLENT_OPINION, CHR(13), '' ), CHR(10), '<![CDATA[<BR>]]>' ) AS EXCELLENT_OPINION
		     , REPLACE( REPLACE ( A.UNSUFFICIENT_OPINION, CHR(13), '' ), CHR(10), '<![CDATA[<BR>]]>' ) AS UNSUFFICIENT_OPINION
		     , REPLACE( REPLACE ( A.ETC_OPINION, CHR(13), '' ), CHR(10), '<![CDATA[<BR>]]>' ) AS ETC_OPINION
		     , B.GRADE_ITEM_NM
		  FROM MEM_EVAL_SELF A
		     , MEM_ECM_GRADE_DISTRI_EVAL_ITEM B
		 WHERE 1 = 1
		   AND A.YEAR = B.YEAR
		   AND B.EVAL_METHOD_ID = 'G000009'
		   AND A.EVAL_GRADE_ID = B.GRADE_ITEM_ID
		   AND A.YEAR = #year#
		   AND A.EMP_NO = #empNo#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 대상자 명 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_INSA
	==================================================================
	-->
	<select id="getEmpNm" parameterClass="hashMap" resultClass="hashMap">
		SELECT
		       A.KOR_NM AS EMP_NM
		     , F_DEPT_LEV2_NM(A.YEAR, A.DEPT_CD) AS DEPT_NM
		  FROM BSC_INSA A
		 WHERE 1 = 1
		   AND A.YEAR = #year#
		   AND A.EMPN = #empNo#
	</select>
</sqlMap>


