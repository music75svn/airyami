<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="cbe.exc.excludeUser">

	<!--
	==================================================================
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />


	<!--
	==================================================================
	  # 설명	: 별도평가제외대상자 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_CODE
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR
     	, CODE_NM
     	, CODE_ID
     	, (SELECT COUNT (*)
          FROM BSC_EXC_EVAL_USER M
         WHERE A.YEAR = M.YEAR AND A.CODE_ID = M.EXC_CODE)
         EXC_COUNT
     	, ETC1
  		FROM BSC_CODE A
 		WHERE YEAR = #findYear#
 		AND CODE_GRP_ID = '214'
 		ORDER BY SORT_ORDER
	</select>

	<!--
	==================================================================
	  # 설명	: 별도평가제외대상자 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EXC_GRP
	==================================================================
	-->

	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
		SELECT G.YEAR
			 , G.EXC_GRP_ID
			 , G.EXC_GRP_NM
			 , G.EVAL_TYPE
			 , CASE
	           		WHEN EVAL_TYPE = '01' THEN G.EVAL_GRADE
	           		WHEN EVAL_TYPE = '03' THEN ''
               END AS EVAL_GRADE
		  FROM PRS_EXC_GRP G
		 WHERE G.YEAR = #year#
		   AND G.EXC_GRP_ID = #excGrpId#
	</select>

	<!--
	==================================================================
	  # 설명	: 간부 별도평가군 부서 목록 조회
	  #	기능	: SELECT
	  #	TABLE	: PRS_EXC_GRP_DEPT
	==================================================================
	-->

	<select id="getDeptList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
			 , A.EXC_GRP_ID
			 , A.DEPT_CD AS DEPT_ID
			 , B.DEPT_KOR_NM DEPT_NM
		  FROM PRS_EXC_GRP_DEPT A
		  LEFT OUTER JOIN BSC_INSA_DEPT B
		    ON A.YEAR = B.YEAR
		   AND A.DEPT_CD = B.DEPT_CD
		 WHERE A.YEAR = #year#
		   AND A.EXC_GRP_ID = #excGrpId#
	</select>

	<!--
	==================================================================
	  # 설명	: 간부 별도평가군 직위 목록 조회
	  #	기능	: SELECT
	  #	TABLE	: PRS_EXC_GRP_POS
	==================================================================
	-->

	<select id="getPosTcList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR
             , A.EXC_GRP_ID
             , A.POS_TC
             , B.CODE_NM POS_TC_NM
          FROM PRS_EXC_GRP_POS A
          LEFT OUTER JOIN BSC_CODE B
            ON A.YEAR = B.YEAR
           AND A.POS_TC = B.CODE_ID
           AND CODE_GRP_ID = '171'
		 WHERE A.YEAR = #year#
		   AND A.EXC_GRP_ID = #excGrpId#
	</select>
	<!--
	==================================================================
	  # 설명	: 별도평가부서 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_EXC_EVAL_DEPT
	==================================================================
	-->

	<select id="getExcDeptList" parameterClass="hashMap" resultClass="hashMap">
		  SELECT A.YEAR
		       , A.EVAL_DEGREE_ID
		       , A.SC_DEPT_ID
		       , F_DEPT_FULL_NM (A.YEAR, A.SC_DEPT_ID, 'BSC_SC_DEPT') SC_DEPT_NM
		    FROM BSC_EXC_EVAL_DEPT A
		   	WHERE A.YEAR = #findYear#
		    AND A.EVAL_DEGREE_ID = #evalDegreeId#
			ORDER BY A.SC_DEPT_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 별도평가제외대상자 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->
	<select id="getUseList" parameterClass="hashMap" resultClass="hashMap">
		  SELECT YEAR
			   , EMPN
		       , KOR_NM
		       , DEPT_CD
		       , DEPT_KOR_NM
		       , EVAL_DEGREE_ID
		       , CAST_TC_NM
		       , POS_TC_NM
		       , ROWN
		       , END_PCMT_DATE
		       , TOT_MON
		    FROM (SELECT A.YEAR
		               , A.EMPN
		               , B.KOR_NM
		               , B.DEPT_CD
		               , F_DEPT_FULL_NM (#findYear#
		                                       , B.DEPT_CD, 'BSC_INSA_DEPT')
		                    DEPT_KOR_NM
		               , A.EVAL_DEGREE_ID
		               , (SELECT CODE_NM
		                    FROM BSC_CODE
		                   WHERE     YEAR = A.YEAR
		                         AND CODE_GRP_ID = '170'
		                         AND CODE_ID = B.CAST_TC)
		                    CAST_TC_NM
		               , (SELECT CODE_NM
		                    FROM BSC_CODE
		                   WHERE     YEAR = A.YEAR
		                         AND CODE_GRP_ID = '171'
		                         AND CODE_ID = B.POS_TC)
		                    POS_TC_NM
		               , ROW_NUMBER ()
		                 OVER (PARTITION BY A.EMPN
		                       ORDER BY B.EMPN, B.END_PCMT_DATE DESC)
		                    ROWN
		               , END_PCMT_DATE
		               , B.TOT_MON
		            FROM BSC_EXC_EVAL_USER A
		                 LEFT OUTER JOIN BSC_INSA_PCMT B
		                    ON A.EMPN = B.EMPN AND A.YEAR = B.YEAR
		                 LEFT OUTER JOIN BSC_INSA_DEPT C
		                    ON B.DEPT_CD = C.DEPT_CD AND A.YEAR = C.YEAR
		           WHERE YEAR = #findYear#
		           AND A.EXC_CODE = #codeId#
		                              )
		   WHERE ROWN = '1'
		ORDER BY DEPT_CD, EMPN
	</select>

	<!--
	==================================================================
	  # 설명	: 별도평가제외자 대상자관리 정보 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_CODE
	==================================================================
	-->
	<select id="getExcGrpUseDatail" parameterClass="hashMap" resultClass="hashMap">
		SELECT CODE_NM FROM BSC_CODE
		WHERE CODE_GRP_ID = '214'
		AND CODE_ID = #codeId#
	</select>

	<!--
	==================================================================
	  # 설명	: 간부 별도평가군 평가 맵핑 대상자 조회
	  #	기능	: SELECT
	  #	TABLE	: BSC_INSA
	==================================================================
	-->
	<select id="getInsaUseList" parameterClass="hashMap" resultClass="hashMap">
		     SELECT I.YEAR
                  , I.EMPN
                  , I.KOR_NM
                  , I.DEPT_CD
                  , D.DEPT_KOR_NM
                  , I.CAST_TC
                  , C.CODE_NM CAST_TC_NM
                  , I.POS_TC
                  , O.CODE_NM POS_TC_NM
               FROM BSC_INSA I
    LEFT OUTER JOIN BSC_INSA_DEPT D
                 ON I.YEAR = D.YEAR
                AND I.DEPT_CD = D.DEPT_CD
    LEFT OUTER JOIN BSC_CODE C
                 ON I.YEAR = C.YEAR
                AND I.CAST_TC = C.CODE_ID
                AND C.CODE_GRP_ID = '170'
    LEFT OUTER JOIN BSC_CODE O
                 ON I.YEAR = O.YEAR
                AND I.POS_TC = O.CODE_ID
                AND O.CODE_GRP_ID = '171'
              WHERE I.YEAR = #findYear#
                AND I.CAST_TC IN ('10','20','30')
		<dynamic>
			<isNotEmpty prepend="AND" property="findDeptKorNm">
			   	   UPPER(D.DEPT_KOR_NM) LIKE '%'|| TRIM(UPPER(#findDeptKorNm#)) ||'%'
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="findEmpn">
			   	   I.EMPN = #findEmpn#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="findKorNm">
			   	   UPPER(I.KOR_NM) LIKE '%'|| TRIM(UPPER(#findKorNm#)) ||'%'
			</isNotEmpty>
		</dynamic>
		ORDER BY I.EMPN, I.KOR_NM
	</select>

	<!--
	==================================================================
	  # 설명	: 제외대상자관리 대상자 저장
	  #	기능	: INSERT
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->

	<insert id="insertUseData" parameterClass="hashMap">
		INSERT INTO BSC_EXC_EVAL_USER (YEAR
		                             , EVAL_DEGREE_ID
		                             , EMPN
		                             , EVAL_METHOD_ID
		                             , GRADE_ITEM_ID
		                             , EVAL_SUBMIT_YN
		                             , CREATE_DT
		                             , MODIFY_DT
		                             , EXC_CODE)
		   SELECT YEAR
		        , EVAL_DEGREE_ID
		        , EMPN
		        , EVAL_METHOD_ID
		        , GRADE_ITEM_ID
		        , EVAL_SUBMIT_YN
		        , SYSDATE
		        , MODIFY_DT
		        , EXC_CODE
		     FROM (SELECT DISTINCT
		                  #findYear# YEAR
		                , B.EVAL_DEGREE_ID
		                , #empn# EMPN
		                , '' EVAL_METHOD_ID
		                , CASE
		                     WHEN C.POS_TC NOT IN ( '17', '25', '33', '43', '54', '64') THEN 'B'
		                     WHEN C.TOT_MON <![CDATA[<]]> 2 THEN 'D'
		                     ELSE ''
		                  END
		                     GRADE_ITEM_ID
		                , '' EVAL_SUBMIT_YN
		                , SYSDATE
		                , '' MODIFY_DT
		                , #codeId# EXC_CODE
		                , ROW_NUMBER ()
		                         OVER (PARTITION BY C.EMPN
		                               ORDER BY C.EMPN, C.END_PCMT_DATE DESC)
		                            ROWN
		             FROM BSC_INSA A
		                  LEFT OUTER JOIN BSC_ECM_EVAL_DEGREE B
		                     ON A.YEAR = B.YEAR
		                  LEFT OUTER JOIN BSC_INSA_PCMT C
		                     ON A.YEAR = C.YEAR AND A.EMPN = C.EMPN
		            WHERE A.EMPN =#empn# AND A.YEAR = #findYear#
		            )
		            WHERE ROWN = 1
	</insert>

	<!--
	==================================================================
	  # 설명	: 제외대상자관리 대상자 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->
	<update id="deleteUseData" parameterClass="hashMap">
		DELETE FROM BSC_EXC_EVAL_USER
		 WHERE YEAR = #year#
		   AND EXC_CODE = #codeId#
		   AND EXC_CODE IS NOT NULL
	</update>

	<!--
	==================================================================
	  # 설명	: 제외대상자관리 대상자 자동저장
	  #	기능	: INSERT
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->
	<insert id="insertUseDataAuto" parameterClass="hashMap">
		INSERT INTO BSC_EXC_EVAL_USER (YEAR
		                             , EVAL_DEGREE_ID
		                             , EMPN
		                             , EVAL_METHOD_ID
		                             , GRADE_ITEM_ID
		                             , EVAL_SUBMIT_YN
		                             , CREATE_DT
		                             , MODIFY_DT
		                             , EXC_CODE)
		   SELECT YEAR
		        , EVAL_DEGREE_ID
		        , EMPN
		        , EVAL_METHOD_ID
		        , GRADE_ITEM_ID
		        , EVAL_SUBMIT_YN
		        , SYSDATE
		        , MODIFY_DT
		        , EXC_CODE
		     FROM (SELECT DISTINCT
		                  A.YEAR
		                , C.EVAL_DEGREE_ID
		                , A.EMPN
		                , '' EVAL_METHOD_ID
		                , CASE
		                     WHEN A.POS_TC IN ( '17', '25', '33', '43', '54', '64') THEN 'B'
		                     WHEN A.TOT_MON <![CDATA[<]]> 2 THEN 'D'
		                     ELSE ''
		                  END
		                     GRADE_ITEM_ID
		                , '' EVAL_SUBMIT_YN
		                , SYSDATE
		                , '' MODIFY_DT
		                , CASE
		                     WHEN A.POS_TC IN ('25', '33') THEN '01'
		                     WHEN A.POS_TC IN ('43', '54', '64') THEN '02'
		                     WHEN A.POS_TC IN ('17') THEN '04'
		                     WHEN A.TOT_MON <![CDATA[<]]> 2 THEN '03'
		                     ELSE ''
		                  END
		                     EXC_CODE
		                , ROW_NUMBER ()
		                  OVER (PARTITION BY A.YEAR, A.EMPN
		                        ORDER BY A.END_PCMT_DATE ASC)
		                     AS ROWN
		             FROM BSC_INSA_PCMT A
		                  LEFT OUTER JOIN BSC_INSA B
		                     ON A.YEAR = B.YEAR AND A.EMPN = B.EMPN
		                  LEFT OUTER JOIN BSC_ECM_EVAL_DEGREE C
		                     ON A.YEAR = C.YEAR
		            WHERE A.YEAR = #findYear#
		                  AND (A.POS_TC IN ('17', '25', '33', '43', '54', '64')
		                       OR A.TOT_MON <![CDATA[<]]> 2))
		    WHERE ROWN = '1'
	</insert>


	<!--
	==================================================================
	  # 설명	: 제외대상자관리 대상자 삭제
	  #	기능	: DELETE
	  #	TABLE	: BSC_EXC_EVAL_USER
	==================================================================
	-->
	<delete id="deleteUseDataAuto" parameterClass="hashMap">
		DELETE FROM BSC_EXC_EVAL_USER
		 WHERE YEAR = #findYear#
		 AND EXC_CODE IS NOT NULL
	</delete>


</sqlMap>


