<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="prs.mng.evalResult">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적 마감여부
	  #	기능	: SELECT
	  #	TABLE	: PRS_CLOSING
	==================================================================
	-->
	<select id="getMngEvalClosing" parameterClass="hashMap" resultClass="hashMap">
		SELECT DECODE (COUNT (MNG_EVAL_YN), 0, 'N', 'Y') MNG_EVAL_YN
		  FROM PRS_CLOSING
		 WHERE year = #findYear#
		   AND MNG_EVAL_YN = 'Y'
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적 확정
	  #	기능	: UPDATE
	  #	TABLE	: PRS_CLOSING
	==================================================================
	-->	
	<update id="updateMngEvalConfirm" parameterClass="hashMap">
		MERGE INTO PRS_CLOSING AA
		     USING (SELECT #findYear# YEAR, #mngEvalYn# MNG_EVAL_YN FROM DUAL) BB
		        ON (AA.YEAR = BB.YEAR)
		WHEN MATCHED
		THEN
		   UPDATE SET AA.MNG_EVAL_YN = BB.MNG_EVAL_YN, AA.MODIFY_DT = SYSDATE
		WHEN NOT MATCHED
		THEN
		   INSERT     (YEAR, MNG_EVAL_YN, CREATE_DT)
		       VALUES (BB.YEAR, BB.MNG_EVAL_YN, SYSDATE)
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적 평가결과 조회
	  #	기능	: SELECT
	  #	TABLE	: PRS_MNG_EVAL_RESULT
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR, A.EMPN, A.KOR_NM
	         , A.EVAL_GRP_ID, (SELECT EVAL_GRP_NM FROM PRS_EVAL_GRP WHERE YEAR = A.YEAR AND EVAL_GRP_ID = A.EVAL_GRP_ID) EVAL_GRP_NM
	         , A.CAST_TC, A.DEPT_CD, A.POS_TC, A.CUR_DEPT_CD, A.CUR_CAST_TC, A.CUR_POS_TC, TO_CHAR(A.SCORE, '90.999') SCORE
	         , A.RANKING
		     , F_DEPT_FULL_NM(A.YEAR, A.DEPT_CD, 'BSC_INSA_DEPT') DEPT_FULL_NM
		     , F_DEPT_FULL_NM(A.YEAR, A.CUR_DEPT_CD, 'V_DEPTINFO') CUR_DEPT_FULL_NM
		     , (SELECT CODE_NM FROM BSC_CODE WHERE YEAR = A.YEAR AND CODE_GRP_ID = '170' AND CODE_ID = A.CAST_TC) CAST_TC_NM
		     , (SELECT CODE_NM FROM BSC_CODE WHERE YEAR = A.YEAR AND CODE_GRP_ID = '170' AND CODE_ID = A.CUR_CAST_TC) CUR_CAST_TC_NM
		     , (SELECT CODE_NM FROM BSC_CODE WHERE YEAR = A.YEAR AND CODE_GRP_ID = '171' AND CODE_ID = A.POS_TC) POS_TC_NM
		     , (SELECT CODE_NM FROM BSC_CODE WHERE YEAR = A.YEAR AND CODE_GRP_ID = '171' AND CODE_ID = A.CUR_POS_TC) CUR_POS_TC_NM
		  FROM PRS_MNG_EVAL_RESULT A
		 WHERE A.YEAR = #findYear#
		<isNotEmpty prepend="AND" property="findEvalGrpId">
            A.EVAL_GRP_ID = #findEvalGrpId#
        </isNotEmpty>
	    <isNotEmpty prepend="AND" property="findCastTc">
			   A.CAST_TC = #findCastTc#
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="findKorNm">
			   A.KOR_NM LIKE '%' || #findKorNm# || '%'
		</isNotEmpty>
		 ORDER BY A.SCORE DESC
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적 평가결과 삭제
	  #	기능	: DELETE
	  #	TABLE	: PRS_MNG_EVAL_RESULT
	==================================================================
	-->
	<delete id="deleteEvalResult" parameterClass="hashMap">
		DELETE FROM PRS_MNG_EVAL_RESULT
		 WHERE YEAR = #findYear#
	</delete>
	
	
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적 평가결과 입력
	  #	기능	: SETTING
	  #	TABLE	: PRS_MNG_EVAL_RESULT
	==================================================================
	-->		
	<parameterMap id="prsMngEvalResultParamMap" class="java.util.HashMap">
		<parameter property="year" 		    jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
	</parameterMap>			
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적 평가결과 입력
	  #	기능	: INSERT
	  #	TABLE	: PRS_MNG_EVAL_RESULT
	==================================================================
	-->
	<!-- 
	<procedure id="insertEvalResult" parameterMap="prsMngEvalResultParamMap">  
	{CALL SP_PRS_MNG_EVAL_RESULT(?)}
		
	</procedure>	
	 -->
	<insert id="insertEvalResult" parameterClass="hashMap">
	     INSERT INTO PRS_MNG_EVAL_RESULT
          (YEAR
          , EMPN
          , EVAL_GRP_ID
          , KOR_NM
          , CUR_DEPT_CD, CUR_CAST_TC, CUR_POS_TC
          , DEPT_CD, CAST_TC, POS_TC, WORK_MON, SCORE, RANKING)
           SELECT A.YEAR
                     , A.EVAL_MEMB_EMPN
                     , A.EVAL_GRP_ID
                     , B.KOR_NM
                     , C.DEPT_CD AS CUR_DEPT_CD
                     , C.CAST_TC AS CUR_CAST_TC
                     , C.POS_CD AS CUR_POS_TC
                     , B.DEPT_CD
                     , B.CAST_TC, B.POS_TC
                     , A.WORK_MONS
                     , A.SCORE
                     , RANK() OVER(PARTITION BY A.YEAR, A.EVAL_GRP_ID ORDER BY A.SCORE DESC NULLS LAST) RANKGING
             FROM ( SELECT A.YEAR
                                   , A.EVAL_MEMB_EMPN
                                   , A.EVAL_GRP_ID
                                   , SUM(A.WORK_MONS) AS WORK_MONS
                                   , SUM((A.AVG_SCORE*A.WORK_MONS)/A.TOTAL_MONS) AS SCORE
                           FROM ( SELECT A.YEAR
                                                 , A.EVAL_MEMB_EMPN
                                                 , A.EVAL_MEMB_EMPN_SEQ
                                                 , A.EVAL_GRP_ID
                                                 , A.WORK_MONS
                                                 , CASE WHEN A.EVAL_GRP_ID = 'PG00003' AND EVAL_DEGREE_CNT = '1' THEN SUM(DECODE(A.EVAL_DEGREE_ID, '20', A.AVG_SCORE)*'10'/10) 
                                                            WHEN A.EVAL_GRP_ID = 'PG00003' AND EVAL_DEGREE_CNT = '2' THEN SUM(DECODE(A.EVAL_DEGREE_ID, '10', A.AVG_SCORE*('50'/100), A.AVG_SCORE*('50'/100))*'10'/10)  
                                                            WHEN A.EVAL_GRP_ID = 'PG00001' THEN SUM(DECODE(A.EVAL_DEGREE_ID, '20', A.AVG_SCORE)*'10'/10) 
                                                            WHEN A.EVAL_GRP_ID = 'PG00002' THEN SUM(DECODE(A.EVAL_DEGREE_ID, '20', A.AVG_SCORE)*'10'/10) END AVG_SCORE
                                                 , SUM(WORK_MONS) OVER(PARTITION BY A.YEAR, A.EVAL_MEMB_EMPN, A.EVAL_GRP_ID) AS TOTAL_MONS
                                         FROM ( SELECT A.YEAR
                                                               , A.EVAL_DEGREE_ID
                                                               , A.EVAL_MEMB_EMPN
                                                               , A.EVAL_MEMB_EMPN_SEQ
                                                               , A.EVAL_GRP_ID
                                                               , A.WORK_MONS
                                                               , ROUND(AVG(A.TOTAL_SCORE),3) AS AVG_SCORE
                                                               , COUNT(EVAL_DEGREE_ID) OVER(PARTITION BY EVAL_GRP_ID, EVAL_MEMB_EMPN) EVAL_DEGREE_CNT
                                                       FROM ( SELECT A.YEAR
                                                                             , B.EVAL_DEGREE_ID
                                                                             , A.EVAL_MEMB_EMPN
                                                                             , A.EVAL_MEMB_EMPN_SEQ
                                                                             , A.EVAL_GRP_ID
                                                                             , C.TOTAL_SCORE
                                                                             , AVG(TOTAL_SCORE) OVER(PARTITION BY A.YEAR, B.EVAL_DEGREE_ID, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ) AS AVG_SCORE
                                                                             , STDDEV_POP(TOTAL_SCORE) OVER(PARTITION BY A.YEAR, B.EVAL_DEGREE_ID, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ) AS DEVIATION
                                                                             , F_WORK_MONTHS(A.FROM_DT, A.TO_DT) AS WORK_MONS
                                                                     FROM PRS_MNG_MEMBER A
                                                                       LEFT OUTER JOIN PRS_MNG_EVAL_ASSESSOR_MAPPING B
                                                                         ON A.YEAR = B.YEAR
                                                                       AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN
                                                                       AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ
                                                                      LEFT OUTER JOIN PRS_MNG_EVAL C
                                                                        ON B.YEAR = C.YEAR
                                                                       AND B.EVAL_MEMB_EMPN = C.EVAL_MEMB_EMPN
                                                                       AND B.EVAL_MEMB_EMPN_SEQ = C.EVAL_MEMB_EMPN_SEQ
                                                                       AND B.ASSESSOR_EMPN = C.ASSESSOR_EMPN
                                                                       AND B.EVAL_DEGREE_ID = C.EVAL_DEGREE_ID
                                                                  WHERE A.YEAR = #findYear#
                                                                       AND A.PRS_YN = 'Y'
                                                                    <!-- AND C.TOTAL_SCORE IS NOT NULL  -->           
                                                                  ) A
                                                WHERE 1=1
                                                AND ABS(A.TOTAL_SCORE - A.AVG_SCORE) <![CDATA[<=]]> 2 * A.DEVIATION
                                                GROUP BY A.YEAR
                                                             , A.EVAL_DEGREE_ID
                                                             , A.EVAL_MEMB_EMPN
                                                             , A.EVAL_MEMB_EMPN_SEQ
                                                             , A.EVAL_GRP_ID
                                                             , A.WORK_MONS
                                                   ORDER BY A.YEAR
                                                             , A.EVAL_MEMB_EMPN
                                                             , A.EVAL_MEMB_EMPN_SEQ
                                                             , A.EVAL_GRP_ID                    
                                            ) A            
                                   GROUP BY A.YEAR
                                                 , A.EVAL_MEMB_EMPN
                                                 , A.EVAL_MEMB_EMPN_SEQ
                                                 , A.EVAL_GRP_ID
                                                 , A.WORK_MONS
                                                 , A.EVAL_DEGREE_CNT
                            ) A
                   GROUP BY A.YEAR
                                , A.EVAL_MEMB_EMPN
                                , A.EVAL_GRP_ID
                     ) A INNER JOIN V_PRS_MNG_MEMBER B
                               ON A.YEAR = B.YEAR 
                             AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN
                             AND A.EVAL_GRP_ID = B.EVAL_GRP_ID
                             AND B.LAST_YN = 'Y'
                            LEFT OUTER JOIN V_ROLE_USER C
                              ON A.EVAL_MEMB_EMPN = C.SABUN
                              
	</insert>
    
    
	<!--
	==================================================================   
	  # 설명	: 간부개인업적 엑셀다운로드 평가자 조회
	  #	기능	: SELECT
	  #	TABLE	: PRS_MNG_EVAL_RESULT
	==================================================================
	-->
	<select id="getAssessor" parameterClass="hashMap" remapResults="true" resultClass="hashMap">
        SELECT DISTINCT C.CAST_TC, C.POS_TC, C.ASSESSOR_EMPN EMPN, C.KOR_NM
        FROM PRS_MNG_MEMBER A
	    INNER JOIN PRS_MNG_EVAL_ASSESSOR_MAPPING B
	       ON A.YEAR = B.YEAR
	       AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN
	       AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ
	    INNER JOIN PRS_MNG_EVAL_ASSESSOR C
	       ON B.YEAR = C.YEAR
	       AND B.ASSESSOR_EMPN = C.ASSESSOR_EMPN
	    INNER JOIN PRS_EVAL_GRP D
	       ON A.YEAR = D.YEAR
	       AND A.EVAL_GRP_ID = D.EVAL_GRP_ID
	    WHERE A.YEAR = #year#
	    AND A.EVAL_GRP_ID = #evalGrpId# 
	    ORDER BY CAST_TC, POS_TC, EMPN, KOR_NM
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적 엑셀다운로드 평가자 조회
	  #	기능	: SELECT
	  #	TABLE	: PRS_MNG_EVAL_RESULT
	==================================================================
	-->
	<select id="getExcelList" parameterClass="hashMap" remapResults="true" resultClass="hashMap">
		SELECT A.YEAR, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ, A.KOR_NM, A.WORK_MONS
	    , ROUND(A.AVG_SCORE, 2) AS AVG_SCORE, ROUND(A.DEVIATION, 2) AS DEVIATION
	    , A.DEPT_CD, A.CAST_TC, A.POS_TC, A.EVAL_GRP_ID, A.EVAL_GRP_NM
	    , (SELECT DEPT_KOR_NM FROM BSC_INSA_DEPT WHERE YEAR = A.YEAR AND DEPT_CD = (SELECT UP_DEPT_CD FROM BSC_INSA_DEPT WHERE YEAR = A.YEAR AND DEPT_CD = A.DEPT_CD)) 
                    || ' ' || (SELECT DEPT_KOR_NM FROM BSC_INSA_DEPT WHERE YEAR = A.YEAR AND DEPT_CD = A.DEPT_CD) DEPT_FULL_NM
	    , (SELECT CODE_NM FROM BSC_CODE WHERE A.YEAR = YEAR AND CODE_GRP_ID = '170' AND CODE_ID = A.CAST_TC) CAST_NM
	    , (SELECT CODE_NM FROM BSC_CODE WHERE A.YEAR = YEAR AND CODE_GRP_ID = '171' AND CODE_ID = A.POS_TC) POS_NM
	    , A.FROM_DT, A.TO_DT
	    ,
        <iterate property="itemArray" conjunction=",">
               MAX(CASE WHEN A.ASSESSOR_EMPN = $itemArray[]$ THEN A.TOTAL_SCORE ELSE NULL END) AS SCORE_$itemArray[]$
        </iterate>
        , ROUND(AVG(CASE WHEN ABS(A.TOTAL_SCORE - A.AVG_SCORE) &lt;= 2 * A.DEVIATION THEN A.TOTAL_SCORE ELSE NULL END), 2) AS TOTAL_SCORE
        FROM (
            SELECT A.YEAR, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ, A.KOR_NM, A.EVAL_GRP_ID, D.EVAL_GRP_NM
            , A.DEPT_CD, A.FROM_DT, A.TO_DT, A.CAST_TC, A.POS_TC
            , B.ASSESSOR_EMPN
            , C.TOTAL_SCORE
            , AVG(TOTAL_SCORE) OVER(PARTITION BY A.YEAR, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ) AS AVG_SCORE
            , STDDEV(TOTAL_SCORE) OVER(PARTITION BY A.YEAR, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ) AS DEVIATION
            , F_WORK_MONTHS(A.FROM_DT, A.TO_DT) AS WORK_MONS
            FROM PRS_MNG_MEMBER A
            LEFT OUTER JOIN PRS_MNG_EVAL_ASSESSOR_MAPPING B
                ON A.YEAR = B.YEAR
                AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN
                AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ
            LEFT OUTER JOIN PRS_MNG_EVAL C
                ON B.YEAR = C.YEAR
                AND B.EVAL_MEMB_EMPN = C.EVAL_MEMB_EMPN
                AND B.EVAL_MEMB_EMPN_SEQ = C.EVAL_MEMB_EMPN_SEQ
                AND B.ASSESSOR_EMPN = C.ASSESSOR_EMPN
            LEFT OUTER JOIN PRS_EVAL_GRP D
                ON A.YEAR = D.YEAR
                AND A.EVAL_GRP_ID = D.EVAL_GRP_ID
            WHERE A.YEAR = #year#
            AND A.PRS_YN = 'Y'
            AND D.EVAL_GRP_ID = #evalGrpId#
        ) A
        GROUP BY A.YEAR, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ, A.KOR_NM, A.WORK_MONS, A.AVG_SCORE, A.DEVIATION
        , A.DEPT_CD, A.FROM_DT, A.TO_DT, A.CAST_TC, A.POS_TC, A.EVAL_GRP_ID, A.EVAL_GRP_NM
	    ORDER BY A.YEAR, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ
 	</select>
 	
 	<!--
	==================================================================   
	  # 설명	: 1차 평가 + MBO 실적(추정) 조회
	  #	기능	: SELECT
	  #	TABLE	: PRS_MNG_EVAL_RESULT
	==================================================================
	-->
	<select id="getExcelList2" parameterClass="hashMap" remapResults="true" resultClass="hashMap">
		  SELECT 
		         X.EVAL_GRP_NM ,
		         X.EVAL_MEMB_EMPN ,
		         X.KOR_NM ,
		        F_CODE_NM('170',
		        X.CAST_TC ,
		        X.YEAR) CAST_TC_NM               ,
		        F_CODE_NM('171',
		        X.POS_TC ,
		        X.YEAR) POS_TC_NM               ,    
		         F_DEPT_FULL_NM(X.YEAR,X.DEPT_CD,'BSC_INSA_DEPT') DEPT_FULL_NM,
		        ROUND((Z.AVG_SCORE / 2),3) FIRST_SCORE,
		         ROUND(W.MBO_SCORE,3) MBO_SCORE 
		    FROM V_PRS_MNG_MEMBER X
		         LEFT OUTER JOIN (  SELECT A.YEAR,
		                                   A.EVAL_DEGREE_ID,
		                                   A.ASSESSOR_EMPN,
		                                   A.EVAL_MEMB_EMPN,
		                                   A.EVAL_MEMB_EMPN_SEQ,
		                                   A.EVAL_GRP_ID,
		                                   ROUND (AVG (A.TOTAL_SCORE), 3) AS AVG_SCORE,
		                                   COUNT (
		                                      A.EVAL_DEGREE_ID)
		                                   OVER (
		                                      PARTITION BY A.EVAL_GRP_ID,
		                                                   A.EVAL_MEMB_EMPN)
		                                      EVAL_DEGREE_CNT
		                              FROM (SELECT A.YEAR,
		                                           B.EVAL_DEGREE_ID,
		                                           A.EVAL_MEMB_EMPN,
		                                           A.EVAL_MEMB_EMPN_SEQ,
		                                           B.ASSESSOR_EMPN,
		                                           A.EVAL_GRP_ID,
		                                           C.TOTAL_SCORE,
		                                           AVG (
		                                              TOTAL_SCORE)
		                                           OVER (
		                                              PARTITION BY A.YEAR,
		                                                           B.EVAL_DEGREE_ID,
		                                                           A.EVAL_MEMB_EMPN,
		                                                           A.EVAL_MEMB_EMPN_SEQ)
		                                              AS AVG_SCORE,
		                                           STDDEV_POP (
		                                              TOTAL_SCORE)
		                                           OVER (
		                                              PARTITION BY A.YEAR,
		                                                           B.EVAL_DEGREE_ID,
		                                                           A.EVAL_MEMB_EMPN,
		                                                           A.EVAL_MEMB_EMPN_SEQ)
		                                              AS DEVIATION,
		                                           F_WORK_MONTHS (A.FROM_DT, A.TO_DT)
		                                              AS WORK_MONS
		                                      FROM PRS_MNG_MEMBER A
		                                           LEFT OUTER JOIN PRS_MNG_EVAL_ASSESSOR_MAPPING B
		                                              ON A.YEAR = B.YEAR
		                                                 AND A.EVAL_MEMB_EMPN =
		                                                        B.EVAL_MEMB_EMPN
		                                                 AND A.EVAL_MEMB_EMPN_SEQ =
		                                                        B.EVAL_MEMB_EMPN_SEQ
		                                           LEFT OUTER JOIN PRS_MNG_EVAL C
		                                              ON B.YEAR = C.YEAR
		                                                 AND B.EVAL_MEMB_EMPN =
		                                                        C.EVAL_MEMB_EMPN
		                                                 AND B.EVAL_MEMB_EMPN_SEQ =
		                                                        C.EVAL_MEMB_EMPN_SEQ
		                                                 AND B.ASSESSOR_EMPN =
		                                                        C.ASSESSOR_EMPN
		                                                 AND B.EVAL_DEGREE_ID =
		                                                        C.EVAL_DEGREE_ID
		                                     WHERE A.YEAR = #year# AND A.PRS_YN = 'Y' 
		                                                                             ) A
		                             WHERE 1 = 1
		                                   AND ABS (A.TOTAL_SCORE - A.AVG_SCORE) <![CDATA[<=]]> 
		                                          2 * A.DEVIATION
		                                   AND A.EVAL_DEGREE_ID = '10'
		                          GROUP BY A.YEAR,
		                                   A.EVAL_DEGREE_ID,
		                                   A.ASSESSOR_EMPN,
		                                   A.EVAL_MEMB_EMPN,
		                                   A.EVAL_MEMB_EMPN_SEQ,
		                                   A.EVAL_GRP_ID
		                          ORDER BY A.YEAR,
		                                   A.EVAL_MEMB_EMPN,
		                                   A.EVAL_DEGREE_ID,
		                                   A.EVAL_MEMB_EMPN_SEQ,
		                                   A.EVAL_GRP_ID) Z
		            ON     X.YEAR = Z.YEAR
		               AND X.EVAL_MEMB_EMPN = Z.EVAL_MEMB_EMPN
		               AND X.EVAL_GRP_ID = Z.EVAL_GRP_ID
		         LEFT OUTER JOIN (  SELECT Y.YEAR,
		                                   Y.EVAL_MEMB_EMPN,
		                                   SUM (Y.EVAL_SCORE) / 10 AS MBO_SCORE
		                              FROM (  SELECT A.YEAR,
		                                             A.EVAL_MEMB_EMPN,
		                                             C.KOR_NM,
		                                             F_DEPT_FULL_NM (A.YEAR,
		                                                             C.DEPT_CD,
		                                                             'BSC_INSA_DEPT')
		                                                DEPT_FULL_NM,
		                                             F_CODE_NM ('218',
		                                                        A.DIRECTION_CD,
		                                                        A.YEAR)
		                                                DIRECTION_NM,
		                                             F_CODE_NM ('230',
		                                                        A.METRIC_GUBUN,
		                                                        A.YEAR)
		                                                METRIC_GUBUN,
		                                             A.TARGET_NM,
		                                             A.METRIC_NM,
		                                             A.TARGET_VALUE,
		                                             F_CODE_NM ('013', A.UNIT, A.YEAR) UNIT,
		                                             CASE
		                                                WHEN '40'               /**P*/
		                                                         = '10'
		                                                THEN
		                                                   A.Q1_TARGET_VALUE
		                                                WHEN '40'               /**P*/
		                                                         = '20'
		                                                THEN
		                                                   A.Q2_TARGET_VALUE
		                                                WHEN '40'               /**P*/
		                                                         = '30'
		                                                THEN
		                                                   A.Q3_TARGET_VALUE
		                                                WHEN '40'               /**P*/
		                                                         = '40'
		                                                THEN
		                                                   A.Q4_TARGET_VALUE
		                                             END
		                                                AS TARGET_VALUE_Q,
		                                             B.VALUE,
		                                             ROUND (B.SCORE, 2) SCORE,
		                                             B.EVAL_GRADE,
		                                             CASE
		                                                WHEN C.PLAN_STATUS_ID IS NULL
		                                                THEN
		                                                   '미입력'
		                                                ELSE
		                                                   F_CODE_NM ('217',
		                                                              C.PLAN_STATUS_ID,
		                                                              C.YEAR)
		                                             END
		                                                PLAN_STATUS_NM,
		                                             CASE
		                                                WHEN B.ACT_STATUS_ID IS NULL
		                                                THEN
		                                                   '미입력'
		                                                ELSE
		                                                   F_CODE_NM ('217',
		                                                              B.ACT_STATUS_ID,
		                                                              C.YEAR)
		                                             END
		                                                ACT_STATUS_NM,
		                                             TO_CHAR (TO_DATE (C.FROM_DT),
		                                                      'YYYY.MM.DD')
		                                                AS FROM_DT,
		                                             TO_CHAR (TO_DATE (C.TO_DT),
		                                                      'YYYY.MM.DD')
		                                                AS TO_DT,
		                                             A.WEIGHT,
		                                             D.CODE_NM AS DFFLY_NM,
		                                             ROUND (B.EVAL_SCORE, 3) EVAL_SCORE
		                                        FROM PRS_MNG_TARGET A
		                                             LEFT OUTER JOIN PRS_MNG_ACTUAL B
		                                                ON A.YEAR = B.YEAR AND B.MON = '40' /**P*/
		                                                   AND A.EVAL_MEMB_EMPN =
		                                                          B.EVAL_MEMB_EMPN
		                                                   AND A.EVAL_MEMB_EMPN_SEQ =
		                                                          B.EVAL_MEMB_EMPN_SEQ
		                                                   AND A.TARGET_ID = B.TARGET_ID
		                                             LEFT OUTER JOIN V_PRS_MNG_MEMBER C
		                                                ON A.YEAR = C.YEAR
		                                                   AND A.EVAL_MEMB_EMPN =
		                                                          C.EVAL_MEMB_EMPN
		                                                   AND A.EVAL_MEMB_EMPN_SEQ =
		                                                          C.EVAL_MEMB_EMPN_SEQ
		                                             LEFT OUTER JOIN BSC_CODE D
		                                                ON     A.DFFLY = D.CODE_ID
		                                                   AND D.CODE_GRP_ID = '231'
		                                                   AND A.YEAR = D.YEAR
		                                       WHERE A.YEAR = #year#            /**P*/
		                                                            AND C.PRS_YN = 'Y' AND C.PLAN_YN = 'Y'
		                                    ORDER BY C.KOR_NM,
		                                             C.EVAL_MEMB_EMPN_SEQ,
		                                             A.SORT_ORDER,
		                                             A.DIRECTION_CD,
		                                             A.TARGET_ID) Y
		                          GROUP BY Y.YEAR, EVAL_MEMB_EMPN) W
		            ON X.YEAR = W.YEAR AND X.EVAL_MEMB_EMPN = W.EVAL_MEMB_EMPN
		   WHERE X.YEAR = #year# AND X.PRS_YN = 'Y' AND X.EVAL_GRP_ID = 'PG00003'
		ORDER BY X.KOR_NM
 	</select>
</sqlMap>


