<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="prs.mng.eval">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />

	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가기간 조회
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_SCHEDULE
	==================================================================
	-->
	<select id="getEvalSchedule" parameterClass="hashMap" resultClass="hashMap">
		SELECT MNG_START_DT, MNG_END_DT
		     , CASE WHEN SYSDATE BETWEEN TO_DATE(MNG_START_DT, 'rrrr-mm-dd') AND TO_DATE(MNG_END_DT || '23:59:59', 'rrrr-mm-dd hh24:mi:ss') THEN 'T'
		            ELSE 'N' END EVAL_YN
		  FROM PRS_EVAL_SCHEDULE
		 WHERE 1 = 1
		 <isNotEmpty prepend="AND" property="findYear">
			YEAR = #findYear#
		 </isNotEmpty>
		 <isNotEmpty prepend="AND" property="year">
			YEAR = #year#
		 </isNotEmpty>
	</select>

	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가자 조회
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_SCHEDULE
	==================================================================
	-->
	<select id="getEvalAssessor" parameterClass="hashMap" resultClass="hashMap">
	    SELECT 
		      A.YEAR
		    , A.ASSESSOR_EMPN
		    , A.KOR_NM
		    , A.DEPT_CD
		    , A.DEPT_NM
		    , A.CAST_TC
		    , A.CAST_NM
		    , A.POS_TC
		    , A.POS_NM
		FROM PRS_MNG_EVAL_ASSESSOR A    
		    INNER JOIN (SELECT 
		                      YEAR
		                    , ASSESSOR_EMPN
		                FROM PRS_MNG_EVAL_ASSESSOR_MAPPING
		                WHERE YEAR = #findYear#
		                  <isNotEmpty property="findEvalDegreeId">
		                  AND EVAL_DEGREE_ID = #findEvalDegreeId#
		                  </isNotEmpty>
		                  <isEmpty property="findEvalDegreeId">
		                  AND EVAL_DEGREE_ID = '10'
		                  </isEmpty> 
		                GROUP BY YEAR, ASSESSOR_EMPN) B
		        ON A.YEAR = B.YEAR
		        AND A.ASSESSOR_EMPN = B.ASSESSOR_EMPN
		WHERE A.YEAR = #findYear#
		ORDER BY A.YEAR, A.KOR_NM
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가군별 평가여부 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP, PRS_MNG_EVAL_GRP_ASSESSOR
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.YEAR, A.EVAL_DEGREE_ID, A.EVAL_DEGREE_NM, A.EVAL_GRP_ID, A.EVAL_GRP_NM, A.EVAL_TYPE, A.EVAL_GRP_SORT_ORDER, A.ASSESSOR_GRP_ID, A.ASSESSOR_GRP_NM, A.ASSESSOR_EMPN, A.ASSESSOR_NM, A.EVAL_SUBMIT_YN, A.PLAN_YN
        , COUNT(1) AS MEMBER_CNT
        FROM (
            SELECT A.YEAR, B.EVAL_DEGREE_ID, D.CODE_NM AS EVAL_DEGREE_NM, A.EVAL_GRP_ID, A.EVAL_GRP_NM, A.EVAL_TYPE, A.EVAL_GRP_SORT_ORDER, A.ASSESSOR_GRP_ID, A.ASSESSOR_GRP_NM, B.ASSESSOR_EMPN, C.KOR_NM AS ASSESSOR_NM, A.PLAN_YN, A.EVAL_MEMB_EMPN
            , MIN(NVL(B.EVAL_SUBMIT_YN,'N')) AS EVAL_SUBMIT_YN
            FROM V_PRS_MNG_MEMBER A
            INNER JOIN PRS_MNG_EVAL_ASSESSOR_MAPPING B
                ON A.YEAR = B.YEAR
                AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN
                AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ
				<isEqual property="adminYN" compareValue="Y">
                AND B.EVAL_DEGREE_ID = #findEvalDegreeId#
               </isEqual> 
            INNER JOIN BSC_CODE D
		        ON B.YEAR = D.YEAR
		        AND B.EVAL_DEGREE_ID = D.CODE_ID
		        AND D.CODE_GRP_ID = '228'
            INNER JOIN PRS_MNG_EVAL_ASSESSOR C
                ON B.YEAR = C.YEAR
                AND B.ASSESSOR_EMPN = C.ASSESSOR_EMPN
            WHERE A.YEAR = #findYear#
            AND A.PRS_YN = 'Y'
            AND B.ASSESSOR_EMPN = #findAssessorEmpn#
            GROUP BY A.YEAR, B.EVAL_DEGREE_ID, D.CODE_NM, A.EVAL_GRP_ID, A.EVAL_GRP_NM, A.EVAL_TYPE, A.EVAL_GRP_SORT_ORDER, A.ASSESSOR_GRP_ID, A.ASSESSOR_GRP_NM, B.ASSESSOR_EMPN, C.KOR_NM, A.PLAN_YN, A.EVAL_MEMB_EMPN
        ) A
        GROUP BY A.YEAR, A.EVAL_DEGREE_ID, A.EVAL_DEGREE_NM, A.EVAL_GRP_ID, A.EVAL_GRP_NM, A.EVAL_TYPE, A.EVAL_GRP_SORT_ORDER, A.ASSESSOR_GRP_ID, A.ASSESSOR_GRP_NM, A.ASSESSOR_EMPN, A.ASSESSOR_NM, A.EVAL_SUBMIT_YN, A.PLAN_YN
        ORDER BY A.EVAL_GRP_SORT_ORDER, A.ASSESSOR_GRP_ID, A.ASSESSOR_NM
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가군별 평가여부 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP, PRS_MNG_EVAL_GRP_ASSESSOR
	==================================================================
	-->
	<select id="getListExcel" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.YEAR, A.EVAL_DEGREE_ID, A.EVAL_DEGREE_NM, A.EVAL_GRP_ID, A.EVAL_GRP_NM, A.EVAL_TYPE, A.EVAL_GRP_SORT_ORDER, A.ASSESSOR_GRP_ID, A.ASSESSOR_GRP_NM, A.ASSESSOR_EMPN, A.ASSESSOR_NM, A.EVAL_SUBMIT_YN, A.PLAN_YN
        , COUNT(1) AS MEMBER_CNT
        FROM (
            SELECT A.YEAR, B.EVAL_DEGREE_ID, D.CODE_NM AS EVAL_DEGREE_NM, A.EVAL_GRP_ID, A.EVAL_GRP_NM, A.EVAL_TYPE, A.EVAL_GRP_SORT_ORDER, A.ASSESSOR_GRP_ID, A.ASSESSOR_GRP_NM, B.ASSESSOR_EMPN, C.KOR_NM AS ASSESSOR_NM, A.PLAN_YN, A.EVAL_MEMB_EMPN
            , MIN(NVL(B.EVAL_SUBMIT_YN,'N')) AS EVAL_SUBMIT_YN
            FROM V_PRS_MNG_MEMBER A
            INNER JOIN PRS_MNG_EVAL_ASSESSOR_MAPPING B
                ON A.YEAR = B.YEAR
                AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN
                AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ
				<isEqual property="adminYN" compareValue="Y">
                AND B.EVAL_DEGREE_ID = #findEvalDegreeId#
               </isEqual> 
            INNER JOIN BSC_CODE D
		        ON B.YEAR = D.YEAR
		        AND B.EVAL_DEGREE_ID = D.CODE_ID
		        AND D.CODE_GRP_ID = '228'
            INNER JOIN PRS_MNG_EVAL_ASSESSOR C
                ON B.YEAR = C.YEAR
                AND B.ASSESSOR_EMPN = C.ASSESSOR_EMPN
            WHERE A.YEAR = #findYear#
            AND A.PRS_YN = 'Y'
            GROUP BY A.YEAR, B.EVAL_DEGREE_ID, D.CODE_NM, A.EVAL_GRP_ID, A.EVAL_GRP_NM, A.EVAL_TYPE, A.EVAL_GRP_SORT_ORDER, A.ASSESSOR_GRP_ID, A.ASSESSOR_GRP_NM, B.ASSESSOR_EMPN, C.KOR_NM, A.PLAN_YN, A.EVAL_MEMB_EMPN
        ) A
        GROUP BY A.YEAR, A.EVAL_DEGREE_ID, A.EVAL_DEGREE_NM, A.EVAL_GRP_ID, A.EVAL_GRP_NM, A.EVAL_TYPE, A.EVAL_GRP_SORT_ORDER, A.ASSESSOR_GRP_ID, A.ASSESSOR_GRP_NM, A.ASSESSOR_EMPN, A.ASSESSOR_NM, A.EVAL_SUBMIT_YN, A.PLAN_YN
        ORDER BY A.EVAL_GRP_SORT_ORDER, A.ASSESSOR_GRP_ID, A.ASSESSOR_NM
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가항목 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getEvalItemList" remapResults="true" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR, A.EVAL_GRP_ID, C.EVAL_ITEM_ID, C.EVAL_ITEM_NM, C.SCORE
		  FROM PRS_EVAL_GRP A
		     , PRS_EVAL_GRP_ITEM B
		     , PRS_EVAL_ITEM C
		 WHERE A.YEAR = #findYear#
		   AND A.EVAL_GRP_ID = #findEvalGrpId#
		   AND A.YEAR = B.YEAR
		   AND A.EVAL_GRP_ID = B.EVAL_GRP_ID
		   AND A.YEAR = C.YEAR 
		   AND B.EVAL_ITEM_ID = C.EVAL_ITEM_ID
		 ORDER BY C.SORT_ORDER
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가군 정보 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getEvalGrp" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR, EVAL_GRP_ID, EVAL_GRP_NM, EVAL_METHOD_ID, EVAL_TYPE FROM PRS_EVAL_GRP WHERE YEAR = #findYear# AND EVAL_GRP_ID = #findEvalGrpId#
	</select>
	
	<select id="getEvalAssesorDeptCd" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT DEPT_ID FROM V_ROLE_USER WHERE SABUN NOT IN (SELECT CODE_ID FROM BSC_CODE WHERE CODE_GRP_ID= '181') AND SABUN = #findAssessorEmpn#
    </select>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가항목별 등급별 인원수
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP
	==================================================================
	-->
	<select id="getEvalItemGradeCount" parameterClass="hashMap" resultClass="hashMap">
		SELECT EVAL_ITEM_ID
			 , EVAL_ITEM_NM
			 , SCORE
		     , <iterate property="itemArray" conjunction=",">
		     	 SUM($itemArray[]$) $itemArray[]$
		       </iterate>
		  FROM (
		        SELECT A.EVAL_ITEM_ID, A.EVAL_ITEM_NM, A.SORT_ORDER, A.SCORE,
		        <iterate property="itemArray" conjunction=",">
		               CASE WHEN B.EVAL_GRADE = '$itemArray[]$' THEN 1 ELSE 0 END $itemArray[]$
				</iterate>
		          FROM (
		                SELECT A.YEAR, A.EVAL_GRP_ID, C.EVAL_ITEM_ID, C.EVAL_ITEM_NM, C.SORT_ORDER, C.SCORE
		                  FROM PRS_EVAL_GRP A
		                     , PRS_EVAL_GRP_ITEM B
		                     , PRS_EVAL_ITEM C
		                 WHERE A.YEAR = #findYear#
		                   AND A.EVAL_GRP_ID = #findEvalGrpId#
		                   AND A.YEAR = B.YEAR
		                   AND A.EVAL_GRP_ID = B.EVAL_GRP_ID
		                   AND A.YEAR = C.YEAR 
		                   AND B.EVAL_ITEM_ID = C.EVAL_ITEM_ID
		               ) A
		          LEFT OUTER JOIN PRS_MNG_EVAL_GRADE B
          			ON A.YEAR = B.YEAR 
				    AND A.EVAL_ITEM_ID = B.EVAL_ITEM_ID 
				    AND B.ASSESSOR_EMPN = #findAssessorEmpn#
		       )
		 GROUP BY EVAL_ITEM_ID, EVAL_ITEM_NM, SCORE, SORT_ORDER
		 ORDER BY SORT_ORDER
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가군별 평가대상자 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP, PRS_MNG_EVAL_GRP_ASSESSOR
	==================================================================
	-->
	<select id="getEvalMemberList" remapResults="true" parameterClass="hashMap" resultClass="hashMap">
    <!--
	    SELECT A.*
		<isEqual property="findEvalType" compareValue="01">
			 , ROUND(C.BSC_SCORE * 0.8, 2) BSC_SCORE, ROUND(C.ORG_SCORE * 0.1, 2) ORG_SCORE
		</isEqual>
		<isNotEqual property="findEvalType" compareValue="01">
			 , 0.00 BSC_SCORE, 0.00 ORG_SCORE
		</isNotEqual>
		 	 
		  FROM (
				SELECT A.YEAR, A.EVAL_MEMB_EMPN, A.KOR_NM , A.EVAL_GRP_ID, A.EVAL_END_YN,  A.TOTAL_SCORE SCORE, A.EXTRA_POINT
					 , (SELECT CASE WHEN EMPN = '950068' AND A.EVAL_GRP_ID = 'PG00001' THEN ''
                                	ELSE EMPN END FROM PRS_EXTRA_POINT WHERE YEAR = A.YEAR AND EMPN = A.EVAL_MEMB_EMPN) EXTRA_POINT_EMPN
					 , (SELECT DECODE(EMPN, NULL, 'N', 'Y') FROM PRS_MNG_RPT WHERE YEAR = A.YEAR AND EVAL_GRP_ID = A.EVAL_GRP_ID AND EMPN = A.EVAL_MEMB_EMPN) RPT_YN
					 , 
		               <iterate property="itemArray" conjunction=",">
				     	 MAX(A.$itemArray[]$) $itemArray[]$
				       </iterate>
				  FROM (
				        SELECT A.YEAR, A.EVAL_MEMB_EMPN, A.EVAL_GRP_ID, B.KOR_NM, NVL(E.EVAL_END_YN, 'N') EVAL_END_YN, E.TOTAL_SCORE, E.EXTRA_POINT,
				        <iterate property="itemArray" conjunction=",">
				               CASE WHEN D.EVAL_ITEM_ID = '$itemArray[]$' THEN D.EVAL_GRADE ELSE NULL END $itemArray[]$
				       </iterate>
				          FROM PRS_MNG_EVAL_GRP_MEMBER A
				          LEFT OUTER JOIN V_ROLE_USER C
				            ON A.EVAL_MEMB_EMPN = C.SABUN
				          LEFT OUTER JOIN PRS_MNG_EVAL_GRADE D
				            ON D.YEAR = A.YEAR AND D.ASSESSOR_EMPN = #findAssessorEmpn# AND A.EVAL_MEMB_EMPN = D.EVAL_MEMB_EMPN AND A.EVAL_GRP_ID = D.EVAL_GRP_ID
						  LEFT OUTER JOIN PRS_MNG_EVAL E
		                	ON E.YEAR =  A.YEAR AND E.ASSESSOR_EMPN =  #findAssessorEmpn# AND A.EVAL_MEMB_EMPN = E.EVAL_MEMB_EMPN AND A.EVAL_GRP_ID = E.EVAL_GRP_ID
				             , BSC_INSA B
				         WHERE A.YEAR = #findYear#
				           AND A.EVAL_GRP_ID = #findEvalGrpId#
				           AND A.YEAR = B.YEAR
				           AND A.EVAL_MEMB_EMPN = B.EMPN
				<isEqual property="findEvalType" compareValue="03">
					<isEqual prepend="AND" property="assessorDeptId" compareValue="1040">
				           	   C.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '4000' OR UP_DEPT_ID = '4H00')
					</isEqual>
					<isEqual prepend="AND" property="assessorDeptId" compareValue="1050">
				           	   (C.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '5100' OR UP_DEPT_ID = '5200') OR C.SABUN = '820041')
					</isEqual>
					<isNotEmpty prepend="AND" property="assessorDeptId">
				           	   C.DEPT_ID NOT IN (
				                                  SELECT DEPT_ID 
				                                    FROM V_DEPTINFO 
				                                   WHERE UP_DEPT_ID = #assessorDeptId# 
				                                     OR DEPT_ID = #assessorDeptId#
				                                )
					</isNotEmpty>
				</isEqual>
				<isEqual property="findEvalType" compareValue="04">
					<isEqual prepend="AND" property="assessorDeptId" compareValue="1040">
				           	   C.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '4000' OR UP_DEPT_ID = '4H00')
					</isEqual>
					<isEqual prepend="AND" property="assessorDeptId" compareValue="1050">
				           	   (C.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '5100' OR UP_DEPT_ID = '5200') OR C.SABUN = '820041')
					</isEqual>
					<isNotEmpty prepend="AND" property="assessorDeptId">
				           	   C.DEPT_ID NOT IN (
				                                  SELECT DEPT_ID 
				                                    FROM V_DEPTINFO 
				                                   WHERE UP_DEPT_ID = #assessorDeptId# 
				                                     OR DEPT_ID = #assessorDeptId#
				                                )
					</isNotEmpty>
				</isEqual>
				       ) A
				 GROUP BY A.YEAR, A.EVAL_MEMB_EMPN, A.KOR_NM, A.EVAL_GRP_ID, A.EVAL_END_YN, A.TOTAL_SCORE, A.EXTRA_POINT
			   ) A
			 , BSC_INSA B
			 , (
				SELECT YEAR
                 	 , EMPN
                 	 , CAST_TC
                 	 , SUM (BSC_SCORE) BSC_SCORE
                 	 , SUM (ORG_SCORE) ORG_SCORE
              	  FROM PRS_MNG_BSC_SCORE
          		 GROUP BY YEAR, EMPN, CAST_TC
          	   ) C
         WHERE A.YEAR = B.YEAR
		   AND A.EVAL_MEMB_EMPN = B.EMPN
		   AND B.YEAR = C.YEAR
		   AND B.EMPN = C.EMPN
		   AND B.CAST_TC = C.CAST_TC
		 ORDER BY A.KOR_NM
    -->
        SELECT A.YEAR, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ, A.KOR_NM, A.EVAL_GRP_ID, A.PLAN_YN AS PLAN_YN
        , A.SEQ
        , (
            SELECT REPLACE(WM_CONCAT(S1.EVAL_MEMB_EMPN_SEQ),',','|') 
            FROM PRS_MNG_EVAL_ASSESSOR_MAPPING S
            INNER JOIN PRS_MNG_MEMBER S1 
                ON S.YEAR = S1.YEAR AND S.EVAL_MEMB_EMPN = S1.EVAL_MEMB_EMPN AND S1.PRS_YN = 'Y'
            WHERE A.YEAR = S.YEAR 
            AND A.EVAL_MEMB_EMPN = S.EVAL_MEMB_EMPN 
            AND A.ASSESSOR_EMPN = S.ASSESSOR_EMPN
            AND S.EVAL_DEGREE_ID = #findEvalDegreeId#
        ) AS SEQS
        , CASE WHEN (SELECT COUNT(1) FROM PRS_MNG_RPT S WHERE A.YEAR = S.YEAR AND A.EVAL_MEMB_EMPN = S.EVAL_MEMB_EMPN) = 0 THEN 'N' ELSE 'Y' END AS RPT_YN
        , A.BSC_RATE, A.PRS_RATE, A.ORG_RATE
        , A.EVAL_END_YN, A.TOTAL_SCORE AS SCORE, A.EXTRA_POINT, A.EXTRA_POINT_EMPN
        , ROUND(B.BSC_SCORE * A.BSC_RATE / 100, 2) AS BSC_SCORE
        , ROUND(B.ORG_SCORE * A.ORG_RATE / 100, 2) AS ORG_SCORE
        , 
        <iterate property="itemArray" conjunction=",">
            A.$itemArray[]$
        </iterate>
        FROM (
            SELECT A.YEAR, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ, A.KOR_NM, A.EVAL_GRP_ID, A.PLAN_YN
            , A.BSC_RATE, A.PRS_RATE, A.ORG_RATE
            , C.EVAL_END_YN, C.TOTAL_SCORE, C.EXTRA_POINT
            , (SELECT MAX(CASE WHEN EMPN = '950068' AND A.EVAL_GRP_ID = 'PG00001' THEN '' ELSE EMPN || A.EVAL_MEMB_EMPN_SEQ END) FROM PRS_EXTRA_POINT WHERE YEAR = A.YEAR AND EMPN = A.EVAL_MEMB_EMPN) EXTRA_POINT_EMPN
            , 
            <iterate property="itemArray" conjunction=",">
                MAX(CASE WHEN D.EVAL_ITEM_ID = '$itemArray[]$' THEN D.EVAL_GRADE ELSE NULL END) $itemArray[]$
            </iterate>
            , B.ASSESSOR_EMPN
            , ROW_NUMBER() OVER(PARTITION BY A.YEAR, A.EVAL_MEMB_EMPN ORDER BY A.EVAL_MEMB_EMPN_SEQ DESC) SEQ
            FROM V_PRS_MNG_MEMBER A
            INNER JOIN PRS_MNG_EVAL_ASSESSOR_MAPPING B
                ON A.YEAR = B.YEAR
                AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN
                AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ
                AND B.EVAL_DEGREE_ID = #findEvalDegreeId#
            LEFT OUTER JOIN PRS_MNG_EVAL C
                ON A.YEAR = C.YEAR
                AND A.EVAL_MEMB_EMPN = C.EVAL_MEMB_EMPN
                AND A.EVAL_MEMB_EMPN_SEQ = C.EVAL_MEMB_EMPN_SEQ
                AND B.ASSESSOR_EMPN = C.ASSESSOR_EMPN
                AND B.EVAL_DEGREE_ID = C.EVAL_DEGREE_ID
            LEFT OUTER JOIN PRS_EVAL_GRP_ITEM E
                ON A.YEAR = E.YEAR
                AND A.EVAL_GRP_ID = E.EVAL_GRP_ID
            LEFT OUTER JOIN PRS_EVAL_ITEM F
                ON A.YEAR = E.YEAR
                AND E.EVAL_ITEM_ID = E.EVAL_ITEM_ID
            LEFT OUTER JOIN PRS_MNG_EVAL_GRADE D
                ON A.YEAR = D.YEAR
                AND A.EVAL_MEMB_EMPN = D.EVAL_MEMB_EMPN
                AND A.EVAL_MEMB_EMPN_SEQ = D.EVAL_MEMB_EMPN_SEQ
                AND B.ASSESSOR_EMPN = D.ASSESSOR_EMPN
                AND F.EVAL_ITEM_ID = D.EVAL_ITEM_ID
                AND B.EVAL_DEGREE_ID = D.EVAL_DEGREE_ID
            WHERE A.YEAR = #findYear#
            AND A.PRS_YN = 'Y'
            AND A.EVAL_GRP_ID = #findEvalGrpId#
            AND A.ASSESSOR_GRP_ID = #findAssessorGrpId#
            AND B.ASSESSOR_EMPN = #findAssessorEmpn#
            GROUP BY A.YEAR, A.EVAL_MEMB_EMPN, A.EVAL_MEMB_EMPN_SEQ, A.KOR_NM, A.EVAL_GRP_ID, A.PLAN_YN
            , A.BSC_RATE, A.PRS_RATE, A.ORG_RATE, B.ASSESSOR_EMPN
            , C.EVAL_END_YN, C.TOTAL_SCORE, C.EXTRA_POINT
        ) A
        LEFT OUTER JOIN (
            SELECT YEAR
            , EMPN
            , EVAL_GRP_ID
            , SUM(BSC_SCORE) BSC_SCORE
            , SUM(ORG_SCORE) ORG_SCORE
            FROM PRS_MNG_BSC_SCORE
            GROUP BY YEAR, EMPN, EVAL_GRP_ID
        ) B
            ON A.YEAR = B.YEAR
            AND A.EVAL_MEMB_EMPN = B.EMPN
            AND A.EVAL_GRP_ID = B.EVAL_GRP_ID
        WHERE A.SEQ = 1
        ORDER BY A.KOR_NM
	</select>
	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가군별 평가등급 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP, BSC_ECM_GRADE_DISTRI_EVAL_ITEM
	==================================================================
	-->
	<select id="getEvalGrade" remapResults="true" parameterClass="hashMap" resultClass="hashMap">
    <!--
        SELECT A.EVAL_METHOD_ID, B.GRADE_ITEM_ID, B.GRADE_ITEM_NM, B.GRADE_ITEM_RATE
             , (
             	SELECT COUNT(1) 
             	  FROM PRS_MNG_EVAL_GRP_MEMBER A
             	  LEFT OUTER JOIN V_ROLE_USER B ON A.EVAL_MEMB_EMPN = B.SABUN
             	 WHERE A.YEAR = #findYear# 
             	   AND A.EVAL_GRP_ID = #findEvalGrpId#
		<isEqual property="findEvalType" compareValue="03">
			<isEqual prepend="AND" property="assessorDeptId" compareValue="1040">
		           	   B.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '4000' OR UP_DEPT_ID = '4H00')
			</isEqual>
			<isEqual prepend="AND" property="assessorDeptId" compareValue="1050">
		           	   (B.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '5100' OR UP_DEPT_ID = '5200') OR B.SABUN = '820041')
			</isEqual>
			<isNotEmpty prepend="AND" property="assessorDeptId">
             	   	   B.DEPT_ID NOT IN (
                    						SELECT DEPT_ID                                          
                      						  FROM V_DEPTINFO                                         
                     						 WHERE UP_DEPT_ID =  #assessorDeptId#                                           
                        						OR DEPT_ID =  #assessorDeptId#                                     
                  						)
			</isNotEmpty>
		</isEqual>
		<isEqual property="findEvalType" compareValue="04">
			<isEqual prepend="AND" property="assessorDeptId" compareValue="1040">
		           	   B.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '4000' OR UP_DEPT_ID = '4H00')
			</isEqual>
			<isEqual prepend="AND" property="assessorDeptId" compareValue="1050">
		           	   (B.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '5100' OR UP_DEPT_ID = '5200') OR B.SABUN = '820041')
			</isEqual>
			<isNotEmpty prepend="AND" property="assessorDeptId">
             	       B.DEPT_ID NOT IN (
                    						SELECT DEPT_ID                                          
                      						  FROM V_DEPTINFO                                         
                     						 WHERE UP_DEPT_ID =  #assessorDeptId#                                           
                        						OR DEPT_ID =  #assessorDeptId#                                     
                  						)
			</isNotEmpty>
		</isEqual>
               ) ITEM_CNT
             , NVL(C.ITEM_DISTRI_CNT, 0) ITEM_DISTRI_CNT
          FROM PRS_EVAL_GRP A
             , BSC_ECM_GRADE_DISTRI_EVAL_ITEM B
          LEFT OUTER JOIN (
                 SELECT A.YEAR, A.EVAL_METHOD_ID, A.GRADE_ITEM_ID
                      , NVL(B.ITEM_DISTRI_CNT, 0) + NVL(C.ITEM_DISTRI_CNT, 0) ITEM_DISTRI_CNT
                   FROM (
                         SELECT DISTINCT YEAR, EVAL_METHOD_ID, GRADE_ITEM_ID
                           FROM BSC_ECM_GRADE_DISTRI_TAB
                          WHERE YEAR = #findYear#
                            AND EVAL_METHOD_ID = #evalMethodId#
                        ) A
                   LEFT OUTER JOIN (
                         SELECT YEAR, EVAL_METHOD_ID, GRADE_ITEM_ID
                         	  , ITEM_DISTRI_CNT * (
                         	  						SELECT FLOOR(COUNT(1) / 20) 
                         	  						  FROM PRS_MNG_EVAL_GRP_MEMBER A
                         	  						  LEFT OUTER JOIN V_ROLE_USER B ON A.EVAL_MEMB_EMPN = B.SABUN
                         	  						 WHERE A.YEAR = #findYear# 
                         	  						   AND A.EVAL_GRP_ID = #findEvalGrpId#
		<isEqual property="findEvalType" compareValue="03">
			<isEqual prepend="AND" property="assessorDeptId" compareValue="1040">
		           	   B.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '4000' OR UP_DEPT_ID = '4H00')
			</isEqual>
			<isEqual prepend="AND" property="assessorDeptId" compareValue="1050">
		           	   (B.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '5100' OR UP_DEPT_ID = '5200') OR B.SABUN = '820041')
			</isEqual>
			<isNotEmpty prepend="AND" property="assessorDeptId">
									             	   	   B.DEPT_ID NOT IN (
									                    						SELECT DEPT_ID                                          
									                      						  FROM V_DEPTINFO                                         
									                     						 WHERE UP_DEPT_ID =  #assessorDeptId#                                           
									                        						OR DEPT_ID =  #assessorDeptId#                                     
									                  						)
			</isNotEmpty>
		</isEqual>
		<isEqual property="findEvalType" compareValue="04">
			<isEqual prepend="AND" property="assessorDeptId" compareValue="1040">
		           	   B.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '4000' OR UP_DEPT_ID = '4H00')
			</isEqual>
			<isEqual prepend="AND" property="assessorDeptId" compareValue="1050">
		           	   (B.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '5100' OR UP_DEPT_ID = '5200') OR B.SABUN = '820041')
			</isEqual>
			<isNotEmpty prepend="AND" property="assessorDeptId">
									             	   	   B.DEPT_ID NOT IN (
									                    						SELECT DEPT_ID                                          
									                      						  FROM V_DEPTINFO                                         
									                     						 WHERE UP_DEPT_ID =  #assessorDeptId#                                           
									                        						OR DEPT_ID =  #assessorDeptId#                                     
									                  						)
			</isNotEmpty>
		</isEqual>
                         	  					  ) ITEM_DISTRI_CNT
                           FROM BSC_ECM_GRADE_DISTRI_TAB 
                          WHERE YEAR = #findYear#
                            AND EVAL_METHOD_ID = #evalMethodId#
                            AND ITEM_CNT = 20
                        ) B
                     ON A.YEAR = B.YEAR AND A.EVAL_METHOD_ID = B.EVAL_METHOD_ID AND A.GRADE_ITEM_ID = B.GRADE_ITEM_ID
                   LEFT OUTER JOIN (
                         SELECT YEAR, EVAL_METHOD_ID, GRADE_ITEM_ID, ITEM_DISTRI_CNT
                           FROM BSC_ECM_GRADE_DISTRI_TAB 
                          WHERE YEAR = #findYear#
                            AND EVAL_METHOD_ID = #evalMethodId#
                            AND ITEM_CNT = (
                            				SELECT MOD(COUNT(1), 20) 
                            				  FROM PRS_MNG_EVAL_GRP_MEMBER A
                            				  LEFT OUTER JOIN V_ROLE_USER B ON A.EVAL_MEMB_EMPN = B.SABUN
                            				 WHERE A.YEAR  = #findYear# 
                            				   AND A.EVAL_GRP_ID = #findEvalGrpId#
		<isEqual property="findEvalType" compareValue="03">
			<isEqual prepend="AND" property="assessorDeptId" compareValue="1040">
		           	   B.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '4000' OR UP_DEPT_ID = '4H00')
			</isEqual>
			<isEqual prepend="AND" property="assessorDeptId" compareValue="1050">
		           	   (B.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '5100' OR UP_DEPT_ID = '5200') OR B.SABUN = '820041')
			</isEqual>
			<isNotEmpty prepend="AND" property="assessorDeptId">
							             	   	   B.DEPT_ID NOT IN (
							                    						SELECT DEPT_ID                                          
							                      						  FROM V_DEPTINFO                                         
							                     						 WHERE UP_DEPT_ID =  #assessorDeptId#                                           
							                        						OR DEPT_ID =  #assessorDeptId#                                     
							                  						)
			</isNotEmpty>
		</isEqual>
		<isEqual property="findEvalType" compareValue="04">
			<isEqual prepend="AND" property="assessorDeptId" compareValue="1040">
		           	   B.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '4000' OR UP_DEPT_ID = '4H00')
			</isEqual>
			<isEqual prepend="AND" property="assessorDeptId" compareValue="1050">
		           	   (B.DEPT_ID NOT IN (SELECT DEPT_ID FROM V_DEPTINFO WHERE UP_DEPT_ID = '5100' OR UP_DEPT_ID = '5200') OR B.SABUN = '820041')
			</isEqual>
			<isNotEmpty prepend="AND" property="assessorDeptId">
							             	   	   B.DEPT_ID NOT IN (
							                    						SELECT DEPT_ID                                          
							                      						  FROM V_DEPTINFO                                         
							                     						 WHERE UP_DEPT_ID =  #assessorDeptId#                                           
							                        						OR DEPT_ID =  #assessorDeptId#                                     
							                  						)
			</isNotEmpty>
		</isEqual>
                            			   )
                        ) C
                     ON A.YEAR = C.YEAR AND A.EVAL_METHOD_ID = C.EVAL_METHOD_ID AND A.GRADE_ITEM_ID = C.GRADE_ITEM_ID
                   ORDER BY A.GRADE_ITEM_ID
               ) C
            ON B.YEAR = C.YEAR AND B.EVAL_METHOD_ID = C.EVAL_METHOD_ID AND B.GRADE_ITEM_ID = C.GRADE_ITEM_ID
         WHERE A.YEAR = #findYear#
           AND A.EVAL_GRP_ID = #findEvalGrpId#
           AND A.YEAR = B.YEAR
           AND A.EVAL_METHOD_ID = B.EVAL_METHOD_ID
         ORDER BY B.SORT_ORDER
    -->
        SELECT A.YEAR, A.EVAL_GRP_ID, A.EVAL_GRP_NM, A.EVAL_METHOD_ID
        , A.GRADE_ITEM_ID
        , A.GRADE_ITEM_NM
        , A.GRADE_ITEM_RATE
        , A.SORT_ORDER
        , A.ITEM_CNT
        , (FLOOR(A.ITEM_CNT/20) 
        * NVL((
            SELECT ITEM_DISTRI_CNT 
            FROM BSC_ECM_GRADE_DISTRI_TAB S1 
            WHERE A.YEAR = S1.YEAR 
            AND A.EVAL_METHOD_ID = S1.EVAL_METHOD_ID 
            AND A.GRADE_ITEM_ID = S1.GRADE_ITEM_ID 
            AND S1.ITEM_CNT = 20
        ),0) ) 
        + NVL((
            SELECT ITEM_DISTRI_CNT 
            FROM BSC_ECM_GRADE_DISTRI_TAB S2 
            WHERE A.YEAR = S2.YEAR 
            AND A.EVAL_METHOD_ID = S2.EVAL_METHOD_ID 
            AND A.GRADE_ITEM_ID = S2.GRADE_ITEM_ID 
            AND S2.ITEM_CNT = MOD(A.ITEM_CNT,20)
        ),0)
        AS ITEM_DISTRI_CNT
        FROM (
            SELECT A.YEAR, A.EVAL_GRP_ID, A.EVAL_GRP_NM, A.EVAL_METHOD_ID
            , C.GRADE_ITEM_ID
            , C.GRADE_ITEM_NM
            , C.GRADE_ITEM_RATE
            , C.SORT_ORDER
            , (
                SELECT COUNT(1)
                FROM (
                SELECT DISTINCT S1.YEAR, S1.EVAL_MEMB_EMPN 
                FROM PRS_MNG_MEMBER S1 
                INNER JOIN PRS_MNG_EVAL_ASSESSOR_MAPPING S2 
                    ON S1.YEAR = S2.YEAR 
                    AND S1.EVAL_MEMB_EMPN = S2.EVAL_MEMB_EMPN
                    AND S1.EVAL_MEMB_EMPN_SEQ = S2.EVAL_MEMB_EMPN_SEQ
                    AND S2.EVAL_DEGREE_ID = #findEvalDegreeId#
                WHERE S1.YEAR = #findYear#
                AND S1.EVAL_GRP_ID = #findEvalGrpId#
                AND S1.PRS_YN = 'Y'
                AND S1.ASSESSOR_GRP_ID = #findAssessorGrpId#
                AND S2.ASSESSOR_EMPN = #findAssessorEmpn#
                )
            ) AS ITEM_CNT
            FROM PRS_EVAL_GRP A
            INNER JOIN BSC_ECM_EVAL_GRADE_CONVERT_TAB B
                ON A.YEAR = B.YEAR
                AND A.EVAL_METHOD_ID = B.EVAL_METHOD_ID
            INNER JOIN BSC_ECM_GRADE_DISTRI_EVAL_ITEM C
                ON B.YEAR = C.YEAR
                AND B.EVAL_METHOD_ID = C.EVAL_METHOD_ID
            WHERE A.YEAR = #findYear#
            AND A.EVAL_GRP_ID = #findEvalGrpId#
        ) A
        ORDER BY A.YEAR, A.EVAL_GRP_ID, A.SORT_ORDER
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가 저장
	  #	기능	: MERGE INTO
	  #	TABLE	: PRS_MNG_EVAL
	==================================================================
	-->
	<insert id="saveEval" parameterClass="hashMap">
        MERGE INTO PRS_MNG_EVAL A
        USING DUAL
           ON (A.YEAR = #year# AND A.EVAL_DEGREE_ID = #evalDegreeId# AND A.EVAL_MEMB_EMPN = #evalMembEmpn# AND A.EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq# AND A.ASSESSOR_EMPN = #assessorEmpn#)
         WHEN MATCHED THEN
                UPDATE SET A.TOTAL_SCORE = #score#, A.EXTRA_POINT = #extraPoint#, A.EVAL_END_YN = #evalEndYn# 
         WHEN NOT MATCHED THEN
                INSERT (YEAR, EVAL_DEGREE_ID, EVAL_MEMB_EMPN, EVAL_MEMB_EMPN_SEQ, ASSESSOR_EMPN, TOTAL_SCORE, EXTRA_POINT, EVAL_END_YN, CREATE_DT)
                VALUES (#year#, #evalDegreeId#, #evalMembEmpn#, #evalMembEmpnSeq#, #assessorEmpn#, #score#, #extraPoint#, #evalEndYn#, SYSDATE)
	</insert>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가등급 저장
	  #	기능	: MERGE INTO
	  #	TABLE	: PRS_MNG_EVAL_GRADE
	==================================================================
	-->
	<insert id="saveEvalGrade" parameterClass="hashMap">
        MERGE INTO PRS_MNG_EVAL_GRADE A
        USING DUAL
           ON (A.YEAR = #year# AND A.EVAL_DEGREE_ID = #evalDegreeId# AND A.EVAL_MEMB_EMPN = #evalMembEmpn# AND A.EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq# AND A.ASSESSOR_EMPN = #assessorEmpn# AND A.EVAL_ITEM_ID = #evalItemId#)
         WHEN MATCHED THEN
                UPDATE SET A.EVAL_GRADE = #evalGrade#
         WHEN NOT MATCHED THEN
                INSERT (YEAR, EVAL_DEGREE_ID, EVAL_MEMB_EMPN, EVAL_MEMB_EMPN_SEQ, ASSESSOR_EMPN, EVAL_ITEM_ID, EVAL_GRADE)
                VALUES (#year#, #evalDegreeId#, #evalMembEmpn#, #evalMembEmpnSeq#, #assessorEmpn#, #evalItemId#, #evalGrade#)
	</insert>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가등급 삭제
	  #	기능	: MERGE INTO
	  #	TABLE	: PRS_MNG_EVAL_GRADE
	==================================================================
	-->
	<delete id="deleteEvalGrade" parameterClass="hashMap">
        DELETE FROM PRS_MNG_EVAL_GRADE A
        WHERE A.YEAR = #year# 
        AND A.EVAL_DEGREE_ID = #evalDegreeId#
	    AND A.EVAL_MEMB_EMPN = #evalMembEmpn#
	    AND A.EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq# 
	    AND A.ASSESSOR_EMPN = #assessorEmpn# 
	    AND A.EVAL_ITEM_ID = #evalItemId#
	</delete>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가제출
	  #	기능	: UPDATE
	  #	TABLE	: PRS_MNG_EVAL_GRP_ASSESSOR
	==================================================================
	-->
	<update id="updateEvalSubmitYn" parameterClass="hashMap">
		UPDATE PRS_MNG_EVAL_ASSESSOR_MAPPING A
		SET EVAL_SUBMIT_YN = #evalSubmitYn#
		WHERE YEAR                = #year#
		AND EVAL_DEGREE_ID = #evalDegreeId#
	    AND ASSESSOR_EMPN          = #assessorEmpn#
	    <!--  
	    AND EXISTS (
	       SELECT 'X'
	       FROM PRS_MNG_MEMBER S1
	       WHERE A.YEAR = S1.YEAR
	       AND A.EVAL_MEMB_EMPN = S1.EVAL_MEMB_EMPN
	       AND A.EVAL_MEMB_EMPN_SEQ = S1.EVAL_MEMB_EMPN_SEQ
	       AND S1.EVAL_GRP_ID = #evalGrpId#
	    )
	    -->
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가제출
	  #	기능	: UPDATE
	  #	TABLE	: PRS_MNG_EVAL_GRP_ASSESSOR
	==================================================================
	-->
	<update id="updateEvalSubmitYnFor" parameterClass="hashMap">
		UPDATE PRS_MNG_EVAL_ASSESSOR_MAPPING A
		SET EVAL_SUBMIT_YN = #evalSubmitYn#
		WHERE YEAR         = #year#
		AND EVAL_DEGREE_ID = #evalDegreeId#
	    AND ASSESSOR_EMPN  = #assessorEmpn#
	    AND EVAL_MEMB_EMPN = #evalMembEmpn# 
	    AND EVAL_MEMB_EMPN_SEQ = #evalMembEmpnSeq#
	    <!--  
	    AND EXISTS (
	       SELECT 'X'
	       FROM PRS_MNG_MEMBER S1
	       WHERE A.YEAR = S1.YEAR
	       AND A.EVAL_MEMB_EMPN = S1.EVAL_MEMB_EMPN
	       AND A.EVAL_MEMB_EMPN_SEQ = S1.EVAL_MEMB_EMPN_SEQ
	       AND S1.EVAL_GRP_ID = #evalGrpId#
	    )
	    -->
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가제출여부
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_GRP, BSC_ECM_GRADE_DISTRI_EVAL_ITEM
	==================================================================
	-->
	<select id="getEvalSubmitYn" remapResults="true" parameterClass="hashMap" resultClass="java.lang.String">
        <!-- 
        SELECT MAX(EVAL_SUBMIT_YN) AS EVAL_SUBMIT_YN
	    FROM PRS_MNG_EVAL_ASSESSOR_MAPPING A 
	    WHERE YEAR                = #findYear#
	    AND EVAL_DEGREE_ID = #findEvalDegreeId#
        AND ASSESSOR_EMPN         = #findAssessorEmpn#
        AND EXISTS (
           SELECT 'X'
           FROM PRS_MNG_MEMBER S1
           WHERE A.YEAR = S1.YEAR
           AND A.EVAL_MEMB_EMPN = S1.EVAL_MEMB_EMPN
           AND A.EVAL_MEMB_EMPN_SEQ = S1.EVAL_MEMB_EMPN_SEQ
           AND S1.EVAL_GRP_ID = #findEvalGrpId#
        )
        -->
        SELECT CASE WHEN MAX(SUBMIT_ALL_CNT) = MAX(SUBMIT_CNT)
                    THEN 'Y'
                    ELSE 'N'
                END AS EVAL_SUBMIT_YN
          FROM ( SELECT COUNT(*) AS SUBMIT_ALL_CNT
			          , NULL AS SUBMIT_CNT
			       FROM PRS_MNG_EVAL_ASSESSOR_MAPPING A 
			      INNER JOIN V_PRS_MNG_MEMBER B
			         ON A.YEAR = B.YEAR
			        AND A.EVAL_MEMB_EMPN  = B.EVAL_MEMB_EMPN
			        AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ
			      WHERE A.YEAR            = #findYear#
			        AND A.EVAL_DEGREE_ID  = #findEvalDegreeId#
			        AND A.ASSESSOR_EMPN   = #findAssessorEmpn#
			        AND B.EVAL_GRP_ID 	  = #findEvalGrpId#
			        AND B.PRS_YN 		  = 'Y'
			        AND B.ASSESSOR_GRP_ID = #assessorGrpId#
			      UNION ALL
			     SELECT NULL AS SUBMIT_ALL_CNT
			          , COUNT(*) AS SUBMIT_CNT
			       FROM PRS_MNG_EVAL_ASSESSOR_MAPPING A 
			      INNER JOIN V_PRS_MNG_MEMBER B
			         ON A.YEAR = B.YEAR
			        AND A.EVAL_MEMB_EMPN = B.EVAL_MEMB_EMPN
			        AND A.EVAL_MEMB_EMPN_SEQ = B.EVAL_MEMB_EMPN_SEQ
			      WHERE A.YEAR            = #findYear#
			        AND A.EVAL_DEGREE_ID  = #findEvalDegreeId#
			        AND A.ASSESSOR_EMPN   = #findAssessorEmpn#
			        AND B.EVAL_GRP_ID 	  = #findEvalGrpId#
			        AND B.PRS_YN 		  = 'Y'
			        AND B.ASSESSOR_GRP_ID = #assessorGrpId#
			        AND A.EVAL_SUBMIT_YN  = 'Y'
			     )
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 간부개인업적평가 평가자 조회
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_SCHEDULE
	==================================================================
	-->
	<select id="getEvalDegreeList" parameterClass="hashMap" resultClass="hashMap">
        SELECT 
		      CODE_ID AS EVAL_DEGREE_ID
		    , CODE_NM AS EVAL_DEGREE_NM
		FROM BSC_CODE
		WHERE CODE_GRP_ID = '228'
		  AND YEAR = #findYear#
		ORDER BY CODE_ID
	</select>
	
</sqlMap>


