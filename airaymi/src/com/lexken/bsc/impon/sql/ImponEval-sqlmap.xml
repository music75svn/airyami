<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="bsc.impon.imponEval">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: BSC_IPE_EVAL_USER_EVAL
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />
	 

	<!--
	==================================================================   
	  # 설명	: 비계량평가실시 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_IPE_EVAL_USER_EVAL
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		 SELECT A.EVAL_USER_GRP_ID,
	            A.EVAL_USER_GRP_NM,
	            B.EVAL_USER_ID,
	            C.METRIC_GRP_ID,
	            C.METRIC_GRP_NM,
	            C.ITEM_GBN,
	            D.EVAL_METHOD_ID,
	            D.EVAL_METHOD_GBN_ID,
	            F_CODE_NM('148',D.EVAL_METHOD_GBN_ID,A.YEAR) EVAL_METHOD_GBN_NM,
        		F_CODE_NM('143',NVL(E.EVAL_SUBMIT_YN,'N'),A.YEAR) EVAL_SUBMIT_YN_NM,
	            NVL(E.EVAL_SUBMIT_YN,'N') AS EVAL_SUBMIT_YN
	       FROM BSC_IPE_EVAL_USER_GRP A
	            INNER JOIN BSC_IPE_EVAL_USER B
	            ON A.YEAR = B.YEAR
	            AND A.EVAL_USER_GRP_ID = B.EVAL_USER_GRP_ID
	            AND B.EVAL_USER_ID = #findEvalUserId#
	            INNER JOIN (SELECT DISTINCT A.YEAR,
                                   A.EVAL_DEGREE_ID,
                                   A.EVAL_USER_GRP_ID,
                                   A.METRIC_GRP_ID, 
                                   B.METRIC_GRP_NM,
                                   A.ITEM_GBN
                              FROM BSC_IPE_EVAL_USER_GRP_ITEM A
                                   INNER JOIN BSC_METRIC_GRP B
                                   ON A.YEAR = B.YEAR
                                   AND A.METRIC_GRP_ID = B.METRIC_GRP_ID
                                   AND B.DELETE_DT IS NULL
                             WHERE A.YEAR = #findYear#
                               AND A.EVAL_DEGREE_ID = #findEvalDegreeId#
                               AND A.EVAL_USER_GRP_ID = #findEvalUserGrpId#
	                        ) C    
	             ON B.YEAR = C.YEAR
	             AND B.EVAL_USER_GRP_ID = C.EVAL_USER_GRP_ID 
	             INNER JOIN BSC_IPE_EVAL_USER_GRP_METHOD D
	             ON C.YEAR = D.YEAR
	             AND C.EVAL_DEGREE_ID = D.EVAL_DEGREE_ID
	             AND C.EVAL_USER_GRP_ID = D.EVAL_USER_GRP_ID
	             AND C.METRIC_GRP_ID = D.METRIC_GRP_ID
	             AND D.OLD_DEGREE_REFL_ID IS NULL
	             LEFT OUTER JOIN BSC_IPE_EVAL_USER_EVAL_STATUS E
	             ON C.YEAR = E.YEAR
	             AND C.EVAL_DEGREE_ID = E.EVAL_DEGREE_ID
	             AND C.EVAL_USER_GRP_ID = E.EVAL_USER_GRP_ID
	             AND C.METRIC_GRP_ID = E.METRIC_GRP_ID
	             AND E.EVAL_USER_ID = #findEvalUserId#
	       WHERE A.YEAR = #findYear#
	         AND A.EVAL_USER_GRP_ID = #findEvalUserGrpId#
	       ORDER BY C.METRIC_GRP_ID
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 비계량평가실시 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_IPE_EVAL_USER_EVAL
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR                  
			 , EVAL_DEGREE_ID        
			 , EVAL_USER_GRP_ID      
			 , EVAL_USER_ID          
			 , METRIC_GRP_ID         
			 , SEQ                   
			 , GRADE_ITEM_ID         
			 , ITEM_GBN              
			 , ITEM_ID               
			 , METRIC_ID             
		  FROM BSC_IPE_EVAL_USER_EVAL 
		 WHERE 1 = 1 
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND EVAL_USER_GRP_ID = #evalUserGrpId#
		   AND EVAL_USER_ID = #evalUserId#
		   AND METRIC_GRP_ID = #metricGrpId#
		   AND SEQ = #seq#	      
	</select>
	
	
	<!--
	==================================================================   
	  # 설명	: 평가차수 비계량평가 기간 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getEvalDegreeTermDetail" parameterClass="hashMap" resultClass="hashMap">
		SELECT MAX(IMPON_EVAL_START_DT) AS IMPON_EVAL_START_DT
		     , MAX(IMPON_EVAL_END_DT) AS IMPON_EVAL_END_DT
		     , NVL( MAX(CASE WHEN TO_CHAR( SYSDATE , 'YYYYMMDD') BETWEEN IMPON_EVAL_START_DT AND IMPON_EVAL_END_DT THEN 'Y' 
		            		 ELSE 'N'
		       			END)
		       	   , 'N') AS EVAL_TERM_YN
		  FROM BSC_ECM_EVAL_DEGREE
		 WHERE 1=1
		   AND YEAR = #findYear#
		   AND EVAL_DEGREE_ID = #findEvalDegreeId#
    </select>
	
	
	<!--
	==================================================================   
	  # 설명	: 평가차수 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getEvalDegreeList" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR,
               EVAL_DEGREE_ID,
               EVAL_DEGREE_NM
          FROM BSC_ECM_EVAL_DEGREE
          WHERE YEAR=#findYear#
          ORDER BY MON
    </select>
    
    <!--
	==================================================================   
	  # 설명	: 평가차수 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_IPE_EVAL_USER_GRP
	==================================================================
	-->
	<select id="getEvalUserGrpList" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR,
               EVAL_USER_GRP_ID,
               EVAL_USER_GRP_NM
          FROM BSC_IPE_EVAL_USER_GRP
          WHERE YEAR = #findYear#
          <dynamic>
		    <isNotEqual prepend="AND" property="evalUserAuthId" compareValue="01">
               EVAL_USER_GRP_ID IN (SELECT EVAL_USER_GRP_ID
									  FROM BSC_IPE_EVAL_USER
									 WHERE 1=1
									   AND YEAR = #findYear#
									   AND EVAL_USER_ID = #findEvalUserId# )
		    </isNotEqual>
	    </dynamic> 
          ORDER BY SORT_ORDER NULLS LAST, EVAL_USER_GRP_ID
    </select>
    
    <!--
	==================================================================   
	  # 설명	: 평가차수 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_IPE_EVAL_USER
	==================================================================
	-->
	<select id="getEvalUserList" parameterClass="hashMap" resultClass="hashMap">
		
		SELECT A.YEAR,
               A.EVAL_USER_ID,
               B.USER_NM AS EVAL_USER_NM
          FROM BSC_IPE_EVAL_USER A
               LEFT OUTER JOIN V_ROLE_USER B
               ON A.EVAL_USER_ID = B.USER_ID
         WHERE A.YEAR = #findYear#
           AND A.EVAL_USER_GRP_ID = #findEvalUserGrpId#
         ORDER BY B.USER_NM
            
    </select>
    
    <!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getEvalDegreeNm" parameterClass="hashMap" resultClass="java.lang.String">
		  SELECT EVAL_DEGREE_NM
            FROM BSC_ECM_EVAL_DEGREE 
           WHERE YEAR = #year#
             AND EVAL_DEGREE_ID = #evalDegreeId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: V_ROLE_USER
	==================================================================
	-->
	<select id="getEvalUserNm" parameterClass="hashMap" resultClass="java.lang.String">
		  SELECT USER_NM
            FROM V_ROLE_USER 
           WHERE USER_ID = #evalUserId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_IPE_EVAL_USER_GRP
	==================================================================
	-->
	<select id="getEvalGrpNm" parameterClass="hashMap" resultClass="java.lang.String">
		  SELECT EVAL_USER_GRP_NM
          FROM BSC_IPE_EVAL_USER_GRP
          WHERE YEAR = #findYear#
            AND EVAL_USER_GRP_ID = #evalUserGrpId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_METRIC_GRP
	==================================================================
	-->
	<select id="getEvalPoolNm" parameterClass="hashMap" resultClass="java.lang.String">
		  SELECT METRIC_GRP_NM
            FROM BSC_METRIC_GRP
           WHERE YEAR = #year#
             AND METRIC_GRP_ID = #metricGrpId#
             AND DELETE_DT IS NULL
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<select id="getEvalGradeList" parameterClass="hashMap" resultClass="hashMap">
		   SELECT A.EVAL_USER_GRP_ID,
                  B.EVAL_METHOD_ID,
                  C.EVAL_METHOD_NM,
                  C.EVAL_METHOD_GBN_ID,
                  D.GRADE_ITEM_ID,
                  D.GRADE_ITEM_NM,
                  D.GRADE_ITEM_SCORE,
                  D.GRADE_ITEM_RATE,
                  NVL(E.ITEM_DISTRI_CNT,0) ITEM_DISTRI_CNT,
                  ROW_NUMBER() OVER(ORDER BY D.SORT_ORDER) GRADE_NUM
             FROM BSC_IPE_EVAL_USER_GRP A
       INNER JOIN BSC_IPE_EVAL_USER_GRP_METHOD B
               ON A.YEAR = B.YEAR
              AND B.EVAL_DEGREE_ID 		= #evalDegreeId#
              AND A.EVAL_USER_GRP_ID 	= B.EVAL_USER_GRP_ID
              AND B.METRIC_GRP_ID 		= #metricGrpId#
       INNER JOIN BSC_ECM_EVAL_GRADE_CONVERT_TAB C
               ON B.YEAR = C.YEAR
              AND B.EVAL_METHOD_ID 		= C.EVAL_METHOD_ID
       INNER JOIN BSC_ECM_GRADE_DISTRI_EVAL_ITEM D
               ON C.YEAR = D.YEAR
              AND C.EVAL_METHOD_ID 		= D.EVAL_METHOD_ID
  LEFT OUTER JOIN BSC_ECM_GRADE_DISTRI_TAB E
               ON D.YEAR 				= E.YEAR
              AND D.EVAL_METHOD_ID 		= E.EVAL_METHOD_ID
              AND D.GRADE_ITEM_ID 		= E.GRADE_ITEM_ID
              AND E.ITEM_CNT 			= #evalItemCnts#
            WHERE A.YEAR 				= #year#
              AND A.EVAL_USER_GRP_ID 	= #evalUserGrpId#
            ORDER BY D.SORT_ORDER
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) EVAL_ITEM_ID COUNT
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<select id="getEvalItemCnt" parameterClass="hashMap" resultClass="hashMap">
	 SELECT COUNT(COUNT(EVAL_ITEM_ID)) AS EVAL_ITEM_CNT
	 FROM (
		 SELECT A.YEAR
	               ,A.EVAL_DEGREE_ID
	               ,A.EVAL_USER_GRP_ID
	               ,A.METRIC_GRP_ID
	               ,A.SEQ
	               ,A.ITEM_GBN
	               ,A.EVAL_ITEM_ID
	               ,A.EVAL_ITEM_NM
	               ,A.ITEM_ID
	               ,A.ITEM_NM
	               <iterate property="gradeIdArray">
	               ,MAX(CASE WHEN B.GRADE_ITEM_ID = '$gradeIdArray[]$' THEN C.GRADE_ITEM_ID END) $gradeIdArray[]$
	               </iterate>
	               , COUNT(ACTUAL_BASE) + COUNT(ACT_RPT_SEQ)  AS EVAL_ITEM_ID_AC
	          FROM (SELECT A.YEAR,
	                       A.EVAL_DEGREE_ID,
	                       B.EVAL_USER_GRP_ID,
	                       A.METRIC_GRP_ID,
	                       A.SEQ,
	                       A.ITEM_GBN,
	                       C.ITEM_ID,
	                       C.ITEM_NM,
	                       C.SORT_ORDER ITEM_ORDER,
	                       D.METRIC_ID,
	                       D.METRIC_NM,
	                       D.SORT_ORDER METRIC_ORDER,
	                       E.SC_DEPT_ID,
	                       E.SC_DEPT_NM,
	                       D.METRIC_ID EVAL_ITEM_ID,
	                       E.SC_DEPT_NM EVAL_ITEM_NM
	                       , AR.ACTUAL_BASE, ART.SEQ AS ACT_RPT_SEQ
	                  FROM BSC_IPE_EVAL_USER_GRP_ITEM A
	            INNER JOIN BSC_IPE_EVAL_USER_GRP B
	                    ON A.YEAR = B.YEAR
	                   AND A.EVAL_USER_GRP_ID = B.EVAL_USER_GRP_ID
	       		INNER JOIN BSC_IPE_EVAL_ITEM C
	                    ON A.YEAR = C.YEAR
	                   AND A.EVAL_DEGREE_ID = C.EVAL_DEGREE_ID
	                   AND A.METRIC_GRP_ID = C.METRIC_GRP_ID
	                   AND C.DELETE_DT IS NULL
	       		INNER JOIN BSC_METRIC D
	                    ON A.YEAR = D.YEAR
	                   AND A.METRIC_ID = D.METRIC_ID
	                   AND D.DELETE_DT IS NULL
	       LEFT OUTER JOIN BSC_SC_DEPT E
	                    ON D.YEAR = E.YEAR
	                   AND D.SC_DEPT_ID = E.SC_DEPT_ID
	                   AND E.DELETE_DT IS NULL
	       LEFT OUTER JOIN BSC_IPE_ACT_RPT AR
			            ON A.YEAR = AR.YEAR                        
			           AND A.EVAL_DEGREE_ID = AR.EVAL_DEGREE_ID                        
			           AND A.METRIC_GRP_ID = AR.METRIC_GRP_ID                        
			           AND AR.ITEM_ID = CASE WHEN AR.ITEM_GBN = '01' THEN A.METRIC_ID ELSE A.ITEM_ID END     
	       LEFT OUTER JOIN BSC_IPE_ACT_RPT_ATTACH ART
			            ON AR.YEAR = ART.YEAR                        
			           AND AR.EVAL_DEGREE_ID = ART.EVAL_DEGREE_ID                        
			           AND AR.METRIC_GRP_ID = ART.METRIC_GRP_ID
			           AND AR.ITEM_ID = ART.ITEM_ID
	                 WHERE A.YEAR = #year#
		               AND A.EVAL_DEGREE_ID = #evalDegreeId#
		               AND A.EVAL_USER_GRP_ID = #evalUserGrpId#
		               AND A.METRIC_GRP_ID = #metricGrpId#
	               ) A
	               LEFT OUTER JOIN (SELECT A.EVAL_USER_GRP_ID,
	                                       B.EVAL_METHOD_ID,
	                                       C.EVAL_METHOD_NM,
	                                       C.EVAL_METHOD_GBN_ID,
	                                       D.GRADE_ITEM_ID,
	                                       D.GRADE_ITEM_NM,
	                                       D.GRADE_ITEM_RATE,
	                                       E.ITEM_DISTRI_CNT
	                                  FROM BSC_IPE_EVAL_USER_GRP A
	                            INNER JOIN BSC_IPE_EVAL_USER_GRP_METHOD B
	                                    ON A.YEAR = B.YEAR
	                                   AND B.EVAL_DEGREE_ID = #evalDegreeId#
	                                   AND A.EVAL_USER_GRP_ID = B.EVAL_USER_GRP_ID
	                                   AND B.METRIC_GRP_ID = #metricGrpId#
	                            INNER JOIN BSC_ECM_EVAL_GRADE_CONVERT_TAB C
	                                    ON B.YEAR = C.YEAR
	                                   AND B.EVAL_METHOD_ID = C.EVAL_METHOD_ID
	                            INNER JOIN BSC_ECM_GRADE_DISTRI_EVAL_ITEM D
	                                    ON C.YEAR = D.YEAR
	                                   AND C.EVAL_METHOD_ID = D.EVAL_METHOD_ID
	                       LEFT OUTER JOIN BSC_ECM_GRADE_DISTRI_TAB E
	                                    ON D.YEAR = E.YEAR
	                                   AND D.EVAL_METHOD_ID = E.EVAL_METHOD_ID
	                                   AND D.GRADE_ITEM_ID = E.GRADE_ITEM_ID
	                                   AND E.ITEM_CNT = #totCnt#
	                                 WHERE A.YEAR = #year#
	                                   AND A.EVAL_USER_GRP_ID = #evalUserGrpId#
	                                                ) B                  
	                ON  1=1
	   LEFT OUTER JOIN BSC_IPE_EVAL_USER_EVAL C
	                ON A.YEAR = C.YEAR
	               AND A.EVAL_DEGREE_ID = C.EVAL_DEGREE_ID
	               AND A.EVAL_USER_GRP_ID = C.EVAL_USER_GRP_ID
	               AND A.METRIC_GRP_ID = C.METRIC_GRP_ID
	               AND A.ITEM_ID = C.ITEM_ID
	               AND C.EVAL_USER_ID = #evalUserId#
	                <isEqual prepend="AND" property="itemGbn" compareValue="01">
			           	A.METRIC_ID = C.METRIC_ID
				    </isEqual>
				    <isEqual prepend="AND" property="itemGbn" compareValue="02">
			           	A.ITEM_ID = C.ITEM_ID
				    </isEqual>
	                AND B.GRADE_ITEM_ID = C.GRADE_ITEM_ID
	          GROUP BY A.YEAR,
	                   A.EVAL_DEGREE_ID,
	                   A.EVAL_USER_GRP_ID,
	                   A.METRIC_GRP_ID,
	                   A.ITEM_ID,
            		   A.ITEM_NM,
	                   A.SEQ,
	                   A.ITEM_GBN,
	                   A.EVAL_ITEM_ID,
	                   A.EVAL_ITEM_NM,
	                   A.METRIC_ORDER,
	                   A.ITEM_ORDER
             )
        GROUP BY EVAL_ITEM_ID
	</select>
	
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<select id="getEvalList" parameterClass="hashMap" resultClass="hashMap" remapResults="true">
	SELECT  YEAR
	        ,EVAL_DEGREE_ID
	        ,EVAL_USER_GRP_ID
	        ,METRIC_GRP_ID
	        ,SEQ
	        ,ITEM_GBN
	        ,METRIC_GRP_ID
	        ,EVAL_ITEM_NM
	        ,EVAL_ITEM_ID
	        ,ITEM_ID
	        ,ITEM_NM
	         <iterate property="gradeIdArray">
		     ,MAX(CASE WHEN B_GRADE_ITEM_ID = '$gradeIdArray[]$' THEN C_GRADE_ITEM_ID END) $gradeIdArray[]$
		     </iterate>
	        ,EVAL_ITEM_ID_AC
	        ,COUNT (METRIC_GRP_ID)
	            OVER (PARTITION BY YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID)
	            AS EUG_ROWSPAN_CNT
	        ,ROW_NUMBER ()
	            OVER (PARTITION BY YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID
	                  ORDER BY EVAL_USER_GRP_ID,
	                           METRIC_GRP_ID,
	                           EVAL_ITEM_ID
	                           )
	            AS EUG_ROWSPAN_IDX
	         ,CASE
	            WHEN COUNT (METRIC_GRP_ID)
	                 OVER (PARTITION BY YEAR,
	                                 EVAL_DEGREE_ID,
	                                 EVAL_USER_GRP_ID,
	                                 EVAL_ITEM_ID) = 0
	            THEN 1
	            ELSE COUNT (METRIC_GRP_ID)
		               OVER (PARTITION BY YEAR,
		                               EVAL_DEGREE_ID,
		                               EVAL_USER_GRP_ID,
		                               EVAL_ITEM_ID
		                     )
		     END  AS MG_ROWSPAN_CNT
	         ,ROW_NUMBER ()
	         OVER ( PARTITION BY YEAR, EVAL_DEGREE_ID, EVAL_USER_GRP_ID, EVAL_ITEM_ID
	            ORDER BY EVAL_USER_GRP_ID,
	                     METRIC_GRP_ID,
	                     ITEM_ORDER,
	                     ITEM_NM)
	            AS MG_ROWSPAN_IDX
	            ,METRIC_ORDER
	            ,ITEM_ORDER
	    FROM(
				SELECT A.YEAR,
		               A.EVAL_DEGREE_ID,
		               A.EVAL_USER_GRP_ID,
		               A.METRIC_GRP_ID,
		               A.SEQ,
		               A.ITEM_GBN,
		               A.EVAL_ITEM_ID,
		               A.EVAL_ITEM_NM,
		               A.ITEM_ID,
		               A.ITEM_NM,
		               B.GRADE_ITEM_ID AS B_GRADE_ITEM_ID,
		               C.GRADE_ITEM_ID AS C_GRADE_ITEM_ID,
		               COUNT(ACTUAL_BASE) + COUNT(ACT_RPT_SEQ)  AS EVAL_ITEM_ID_AC,
		               A.METRIC_ORDER,
		               A.ITEM_ORDER
		          FROM (SELECT A.YEAR,
		                       A.EVAL_DEGREE_ID,
		                       B.EVAL_USER_GRP_ID,
		                       A.METRIC_GRP_ID,
		                       A.SEQ,
		                       A.ITEM_GBN,
		                       C.ITEM_ID,
		                       C.ITEM_NM,
		                       C.SORT_ORDER ITEM_ORDER,
		                       D.METRIC_ID,
		                       D.METRIC_NM,
		                       D.SORT_ORDER METRIC_ORDER,
		                       E.SC_DEPT_ID,
		                       E.SC_DEPT_NM,
		                       D.METRIC_ID EVAL_ITEM_ID,
		                       E.SC_DEPT_NM EVAL_ITEM_NM,
		                       AR.ACTUAL_BASE,
		                       ART.SEQ AS ACT_RPT_SEQ
		                  FROM BSC_IPE_EVAL_USER_GRP_ITEM A
		            INNER JOIN BSC_IPE_EVAL_USER_GRP B
		                       ON A.YEAR = B.YEAR
		                       AND A.EVAL_USER_GRP_ID = B.EVAL_USER_GRP_ID
		       		INNER JOIN BSC_IPE_EVAL_ITEM C
		                       ON A.YEAR = C.YEAR
		                       AND A.EVAL_DEGREE_ID = C.EVAL_DEGREE_ID
		                       AND A.METRIC_GRP_ID = C.METRIC_GRP_ID
		                       AND C.DELETE_DT IS NULL
		       		INNER JOIN BSC_METRIC D
		                       ON A.YEAR = D.YEAR
		                       AND A.METRIC_ID = D.METRIC_ID
		                       AND D.DELETE_DT IS NULL
		       LEFT OUTER JOIN BSC_SC_DEPT E
		                       ON D.YEAR = E.YEAR
		                       AND D.SC_DEPT_ID = E.SC_DEPT_ID
		                       AND E.DELETE_DT IS NULL
		       LEFT OUTER JOIN BSC_IPE_ACT_RPT AR
				               ON A.YEAR = AR.YEAR                        
				               AND A.EVAL_DEGREE_ID = AR.EVAL_DEGREE_ID                        
				               AND A.METRIC_GRP_ID = AR.METRIC_GRP_ID                        
				               AND AR.ITEM_ID = CASE WHEN AR.ITEM_GBN = '01' THEN A.METRIC_ID ELSE A.ITEM_ID END     
		       LEFT OUTER JOIN BSC_IPE_ACT_RPT_ATTACH ART
				               ON AR.YEAR = ART.YEAR                        
				               AND AR.EVAL_DEGREE_ID = ART.EVAL_DEGREE_ID                        
				               AND AR.METRIC_GRP_ID = ART.METRIC_GRP_ID
				               AND AR.ITEM_ID = ART.ITEM_ID
		                 WHERE A.YEAR = #year#
			               AND A.EVAL_DEGREE_ID = #evalDegreeId#
			               AND A.EVAL_USER_GRP_ID = #evalUserGrpId#
			               AND A.METRIC_GRP_ID = #metricGrpId#
		               ) A
		               LEFT OUTER JOIN (SELECT A.EVAL_USER_GRP_ID,
		                                       B.EVAL_METHOD_ID,
		                                       C.EVAL_METHOD_NM,
		                                       C.EVAL_METHOD_GBN_ID,
		                                       D.GRADE_ITEM_ID,
		                                       D.GRADE_ITEM_NM,
		                                       D.GRADE_ITEM_RATE,
		                                       E.ITEM_DISTRI_CNT
		                                  FROM BSC_IPE_EVAL_USER_GRP A
		                            INNER JOIN BSC_IPE_EVAL_USER_GRP_METHOD B
		                                       ON A.YEAR = B.YEAR
		                                       AND B.EVAL_DEGREE_ID = #evalDegreeId#
		                                       AND A.EVAL_USER_GRP_ID = B.EVAL_USER_GRP_ID
		                                       AND B.METRIC_GRP_ID = #metricGrpId#
		                       		INNER JOIN BSC_ECM_EVAL_GRADE_CONVERT_TAB C
		                                       ON B.YEAR = C.YEAR
		                                       AND B.EVAL_METHOD_ID = C.EVAL_METHOD_ID
		                       		INNER JOIN BSC_ECM_GRADE_DISTRI_EVAL_ITEM D
		                                       ON C.YEAR = D.YEAR
		                                       AND C.EVAL_METHOD_ID = D.EVAL_METHOD_ID
		                       LEFT OUTER JOIN BSC_ECM_GRADE_DISTRI_TAB E
		                                       ON D.YEAR = E.YEAR
		                                       AND D.EVAL_METHOD_ID = E.EVAL_METHOD_ID
		                                       AND D.GRADE_ITEM_ID = E.GRADE_ITEM_ID
		                                       AND E.ITEM_CNT = #totCnt#
		                                 WHERE A.YEAR = #year#
		                                   AND A.EVAL_USER_GRP_ID = #evalUserGrpId#
		                                                ) B                  
		                ON  1=1
		                LEFT OUTER JOIN BSC_IPE_EVAL_USER_EVAL C
		                ON A.YEAR = C.YEAR
		                AND A.EVAL_DEGREE_ID = C.EVAL_DEGREE_ID
		                AND A.EVAL_USER_GRP_ID = C.EVAL_USER_GRP_ID
		                AND A.METRIC_GRP_ID = C.METRIC_GRP_ID
		                AND A.ITEM_ID = C.ITEM_ID
		                AND C.EVAL_USER_ID = #evalUserId#
		                <isEqual prepend="AND" property="itemGbn" compareValue="01">
				           	A.METRIC_ID = C.METRIC_ID
					    </isEqual>
					    <isEqual prepend="AND" property="itemGbn" compareValue="02">
				           	A.ITEM_ID = C.ITEM_ID
					    </isEqual>
		                AND B.GRADE_ITEM_ID = C.GRADE_ITEM_ID
		          GROUP BY A.YEAR,
		                   A.EVAL_DEGREE_ID,
		                   A.EVAL_USER_GRP_ID,
		                   A.METRIC_GRP_ID,
		                   A.SEQ,
		                   A.ITEM_GBN,
		                   A.EVAL_ITEM_ID,
		                   A.EVAL_ITEM_NM,
		                   A.METRIC_ORDER,
		                   A.ITEM_ORDER,
		                   A.ITEM_ID,
		        		   A.ITEM_NM, 
		        		   B.GRADE_ITEM_ID,
              			   C.GRADE_ITEM_ID,
              			   A.METRIC_ORDER,
              			   A.ITEM_ORDER 
		          ORDER BY A.METRIC_ORDER, A.ITEM_ORDER, ITEM_NM
		       )
		       GROUP BY YEAR,
			            EVAL_DEGREE_ID,
			            EVAL_USER_GRP_ID,
			            METRIC_GRP_ID,
			            SEQ,
			            ITEM_GBN,
			            EVAL_ITEM_ID,
			            EVAL_ITEM_NM,
			            EVAL_ITEM_ID_AC,
			            ITEM_ID,
			            ITEM_NM,
			            ITEM_ORDER,
         				METRIC_ORDER 
         	ORDER BY EVAL_ITEM_ID,
         			 ITEM_ORDER,
         			 ITEM_NM
         	
			</select>
	    
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<select id="getTotCnt" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT COUNT(1) TOT_CNT
          FROM BSC_IPE_EVAL_USER_GRP A
    INNER JOIN BSC_IPE_EVAL_USER_GRP_ITEM B
               ON A.YEAR = B.YEAR
               AND B.EVAL_DEGREE_ID = #evalDegreeId#
               AND A.EVAL_USER_GRP_ID = B.EVAL_USER_GRP_ID
               AND B.METRIC_GRP_ID = #metricGrpId#
       INNER JOIN BSC_IPE_EVAL_ITEM C
        		ON A.YEAR = C.YEAR                
            	AND C.EVAL_DEGREE_ID = #evalDegreeId#                
            	AND C.METRIC_GRP_ID = #metricGrpId#
            	AND C.DELETE_DT IS NULL
        WHERE A.YEAR = #year#
            AND A.EVAL_USER_GRP_ID = #evalUserGrpId#
	</select>
	
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<select id="getEvalItemCnts" parameterClass="hashMap" resultClass="java.lang.String">
<!--
		SELECT COUNT(COUNT(B.METRIC_ID))   
          FROM BSC_IPE_EVAL_USER_GRP A
    INNER JOIN BSC_IPE_EVAL_USER_GRP_ITEM B
               ON A.YEAR = B.YEAR
               AND B.EVAL_DEGREE_ID = #evalDegreeId#
               AND A.EVAL_USER_GRP_ID = B.EVAL_USER_GRP_ID
               AND B.METRIC_GRP_ID = #metricGrpId#
       INNER JOIN BSC_IPE_EVAL_ITEM C
        		ON A.YEAR = C.YEAR                
            	AND C.EVAL_DEGREE_ID = #evalDegreeId#                
            	AND C.METRIC_GRP_ID = #metricGrpId#
            	AND C.DELETE_DT IS NULL
        WHERE A.YEAR = #year#
            AND A.EVAL_USER_GRP_ID = #evalUserGrpId#
           GROUP BY B.METRIC_ID
-->           
           
		SELECT NVL (CNT1, 1) * NVL (CNT2, 1)
		  FROM (  SELECT COUNT (COUNT (B.METRIC_ID)) CNT1
		            FROM BSC_IPE_EVAL_USER_GRP A
		                 INNER JOIN BSC_IPE_EVAL_USER_GRP_ITEM B
		                    ON A.YEAR = B.YEAR
		                   AND B.EVAL_DEGREE_ID = #evalDegreeId#
		                   AND A.EVAL_USER_GRP_ID = B.EVAL_USER_GRP_ID
		                   AND B.METRIC_GRP_ID = #metricGrpId#
		                 INNER JOIN BSC_IPE_EVAL_ITEM C
		                    ON A.YEAR = C.YEAR
		                   AND C.EVAL_DEGREE_ID = #evalDegreeId#
		                   AND C.METRIC_GRP_ID = #metricGrpId#
		                   AND C.DELETE_DT IS NULL
		           WHERE A.YEAR = #year#
		             AND A.EVAL_USER_GRP_ID = #evalUserGrpId#
		        GROUP BY B.METRIC_ID) A
		     , (SELECT COUNT (*) CNT2
		          FROM BSC_IPE_EVAL_ITEM
		         WHERE YEAR = #year#
		           AND EVAL_DEGREE_ID = #evalDegreeId#
		           AND METRIC_GRP_ID = #metricGrpId#
		           AND DELETE_DT IS NULL) B
	</select>
	

	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<select id="getEvalCnt" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT COUNT(1) MEMB_CNT
          FROM BSC_IPE_EVAL_USER_GRP A
               INNER JOIN BSC_IPE_EVAL_USER_EVAL B
               ON A.YEAR = B.YEAR
               AND B.EVAL_DEGREE_ID = #evalDegreeId#
               AND A.EVAL_USER_GRP_ID = B.EVAL_USER_GRP_ID
               AND B.EVAL_USER_ID = #evalUserId#
               AND B.METRIC_GRP_ID = #metricGrpId#
               AND (B.GRADE_ITEM_ID != '' OR B.GRADE_ITEM_ID IS NOT NULL) 
       WHERE A.YEAR = #year#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가진행현황 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<select id="getCloseYn" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT IMPON_EVAL_CLOSING_YN     
		  FROM BSC_IPE_EVAL_CLOSING A
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#	      
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가진행현황 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->
	<select id="getConfirmYn" parameterClass="hashMap" resultClass="java.lang.String">
		SELECT IMPON_EVAL_CONFIRM_YN     
		  FROM BSC_IPE_EVAL_CLOSING A
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#	   	 	      
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 삭제
	  #	기능	: UPDATE
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->	
	<update id="deleteSubmitData" parameterClass="hashMap">
		DELETE FROM BSC_IPE_EVAL_USER_EVAL_STATUS 
		 WHERE 1 = 1 
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND EVAL_USER_GRP_ID = #evalUserGrpId#
		   AND EVAL_USER_ID = #evalUserId#
		   AND METRIC_GRP_ID = #metricGrpId#
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 등록
	  #	기능	: INSERT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->	
	<insert id="insertSubmitData" parameterClass="hashMap">
		INSERT INTO BSC_IPE_EVAL_USER_EVAL_STATUS( 
			   YEAR
			 , EVAL_DEGREE_ID
			 , EVAL_USER_GRP_ID
			 , EVAL_USER_ID
			 , METRIC_GRP_ID
			 , EVAL_SUBMIT_YN
			 , CREATE_DT
			 ) VALUES ( 
			   #year#
			 , #evalDegreeId#
			 , #evalUserGrpId#
			 , #evalUserId#
			 , #metricGrpId#
			 , #evalSubmitYn#
			 , SYSDATE
			 )
	</insert>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 삭제
	  #	기능	: UPDATE
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->	
	<update id="submitUpdateData" parameterClass="hashMap">
		UPDATE PRS_EVAL_USER 
		   SET EVAL_SUBMIT_YN = #evalSubmitYn#
		 WHERE 1 = 1 
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND EVAL_GRP_ID = #evalGrpId#
		   AND EVAL_USER_ID = #evalUserId#
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 등록
	  #	기능	: INSERT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->	
	<insert id="insert01Data" parameterClass="hashMap">
		INSERT INTO BSC_IPE_EVAL_USER_EVAL( 
			   YEAR
			 , EVAL_DEGREE_ID
			 , EVAL_USER_GRP_ID
			 , EVAL_USER_ID
			 , METRIC_GRP_ID
			 , SEQ
			 , GRADE_ITEM_ID
			 , ITEM_ID
			 , ITEM_GBN
			 , METRIC_ID
			 , CREATE_DT
			 ) VALUES ( 
			   #year#
			 , #evalDegreeId#
			 , #evalUserGrpId#
			 , #evalUserId#
			 , #metricGrpId#
			 , #seq#
			 , #gradeId#
			 , #ipeItemId#
			 , #itemGbn#
			 , #itemId#
			 , SYSDATE
			 )
	</insert>
	
	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 등록
	  #	기능	: INSERT
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->	
	<insert id="insert02Data" parameterClass="hashMap">
		INSERT INTO BSC_IPE_EVAL_USER_EVAL( 
			   YEAR
			 , EVAL_DEGREE_ID
			 , EVAL_USER_GRP_ID
			 , EVAL_USER_ID
			 , METRIC_GRP_ID
			 , SEQ
			 , GRADE_ITEM_ID
			 , ITEM_GBN
			 , ITEM_ID
			 , CREATE_DT
			 ) VALUES ( 
			   #year#
			 , #evalDegreeId#
			 , #evalUserGrpId#
			 , #evalUserId#
			 , #metricGrpId#
			 , #seq#
			 , #gradeId#
			 , #itemGbn#
			 , #itemId#
			 , SYSDATE
			 )
	</insert>	

	<!--
	==================================================================   
	  # 설명	: 개인평가 평가실시 (현황) 삭제
	  #	기능	: UPDATE
	  #	TABLE	: PRS_EVAL_USER
	==================================================================
	-->	
	<update id="deleteData" parameterClass="hashMap">
		DELETE FROM BSC_IPE_EVAL_USER_EVAL 
		 WHERE 1 = 1 
		   AND YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND EVAL_USER_GRP_ID = #evalUserGrpId#
		   AND EVAL_USER_ID = #evalUserId#
		   AND METRIC_GRP_ID = #metricGrpId#
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 평가자별 파일 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_IPE_ACT_RPT_ATTACH
	==================================================================
	-->
	<select id="getFileList" parameterClass="hashMap" resultClass="hashMap">
 		SELECT A.YEAR
	         , A.EVAL_DEGREE_ID
	         , A.METRIC_GRP_ID
	         , A.ITEM_ID
	         , A.SEQ
	         , A.ATTACH_FILE_NM
	         , A.ATTACH_FILE_FNM
	         , A.ATTACH_FILE_SUFFIX
	         , F_ENCRYPT(A.ATTACH_FILE_PATH, #encryptionCode#) ATTACH_FILE_PATH
         FROM BSC_IPE_EVAL_FEED_USER A
        WHERE A.YEAR = #findYear#
		   AND A.EVAL_DEGREE_ID = #findEvalDegreeId#
		   AND A.METRIC_GRP_ID = 'T999999' <!-- 평가자별 평가의견 첨부파일은 고정 -->
		   AND A.EVAL_USER_GRP_ID = #findEvalUserGrpId#
		   AND A.EVAL_USER_ID = #findEvalUserId#
		   AND A.ITEM_ID = 'M999999' <!-- 평가자별 평가의견 첨부파일은 고정 -->	 
  	</select>
  	
	<!--
	==================================================================   
	  # 설명	: 평가자별 첨부파일 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_IPE_EVAL_FEED
	==================================================================
	-->	
	<insert id="insertFileInfo" parameterClass="hashMap">
		<selectKey resultClass="java.lang.String" keyProperty="SEQ" >
			SELECT NVL(MAX(SEQ)+1,1)  
			  FROM BSC_IPE_EVAL_FEED_USER 
			 WHERE YEAR = #year# 
			   AND EVAL_DEGREE_ID = #evalDegreeId# 
			   AND METRIC_GRP_ID = 'T999999' 
			   AND EVAL_USER_GRP_ID = #evalUserGrpId# 
			   AND EVAL_USER_ID = #evalUserId# 
			   AND ITEM_ID = 'M999999'  
		</selectKey> 
		INSERT INTO BSC_IPE_EVAL_FEED_USER (
               YEAR
             , EVAL_DEGREE_ID
             , METRIC_GRP_ID
             , EVAL_USER_GRP_ID
             , EVAL_USER_ID
             , ITEM_ID
             , SEQ
             , ITEM_GBN
             , ATTACH_FILE_NM
             , ATTACH_FILE_FNM
             , ATTACH_FILE_SUFFIX
             , ATTACH_FILE_PATH
             , CREATE_DT
           ) VALUES (
               #year#
             , #evalDegreeId#
             , 'T999999' <!-- 평가자별 평가의견 첨부파일은 고정 -->
             , #evalUserGrpId#
             , #evalUserId#
             , 'M999999' <!-- 평가자별 평가의견 첨부파일은 고정 -->
             , #SEQ#
             , '01'
             , #attachFileNm#
             , #attachFileFnm#
             , #attachFileSuffix#
             , #attachFilePath#
             , SYSDATE
    	   )       
	</insert>
	
	<!--
	==================================================================   
	  # 설명	: 평가자별 첨부파일 삭제
	  #	기능	: INSERT
	  #	TABLE	: BSC_IPE_EVAL_FEED
	==================================================================
	-->	
	<delete id="deleteFileInfo" parameterClass="hashMap">
		DELETE FROM BSC_IPE_EVAL_FEED_USER
		   WHERE YEAR = #findYear#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND METRIC_GRP_ID = 'T999999' <!-- 평가자별 평가의견 첨부파일은 고정 -->
		   AND EVAL_USER_GRP_ID = #evalUserGrpId#
		   AND EVAL_USER_ID = #evalUserId#
		   AND ITEM_ID = 'M999999' <!-- 평가자별 평가의견 첨부파일은 고정 -->
		   AND SEQ = '1' <!-- 평가자별 평가의견 첨부파일은 고정 -->
	</delete>
	
	<!--
	==================================================================   
	  # 설명	: 비계량평가실시 전체 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_IPE_EVAL_USER_EVAL
	==================================================================
	-->
	<select id="getEvalAllList" parameterClass="hashMap" resultClass="hashMap">
		 SELECT A.YEAR
	          , A.EVAL_DEGREE_ID
	          , A.EVAL_USER_GRP_ID
	          , A.EVAL_USER_ID
	          , D.USER_NM
	          , F.SC_DEPT_ID
	          , F.SC_DEPT_NM
	          , A.METRIC_GRP_ID
	          , A.METRIC_ID
	          , C.METRIC_NM
	          , A.ITEM_ID
	          , E.ITEM_NM
	          , A.GRADE_ITEM_ID
	          , B.GRADE_ITEM_NM
	          , B.GRADE_ITEM_SCORE
	       FROM BSC_IPE_EVAL_USER_EVAL A
	       LEFT OUTER JOIN BSC_ECM_GRADE_DISTRI_EVAL_ITEM B
	         ON A.YEAR = B.YEAR
	        AND A.GRADE_ITEM_ID = B.GRADE_ITEM_ID
	        AND B.EVAL_METHOD_ID = 'G000004'
	       LEFT OUTER JOIN BSC_METRIC C 
	         ON A.YEAR = C.YEAR
	        AND A.METRIC_ID = C.METRIC_ID 
	       LEFT OUTER JOIN BSC_USERINFO D
	         ON A.EVAL_USER_ID = D.USER_ID
	       LEFT OUTER JOIN BSC_IPE_EVAL_ITEM E
	         ON A.YEAR = E.YEAR
	        AND A.EVAL_DEGREE_ID = E.EVAL_DEGREE_ID
	        AND A.METRIC_GRP_ID = E.METRIC_GRP_ID
	        AND A.ITEM_ID = E.ITEM_ID
	       LEFT OUTER JOIN BSC_SC_DEPT F
	         ON C.YEAR = F.YEAR
	        AND C.SC_DEPT_ID = F.SC_DEPT_ID
 	      WHERE A.YEAR = #findYear#
	      ORDER BY A.YEAR 
	          , D.USER_NM
	          , F.SORT_ORDER
	          , C.SORT_ORDER
	          , E.ITEM_NM
	</select>
	
</sqlMap>


