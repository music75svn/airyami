<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="cbe.excep.excepReport">

	<!--
	==================================================================   
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	: BSC_SPE_EVAL_BASE
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />
	 

	<!--
	==================================================================   
	  # 설명	: 별도평가근거 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_SPE_EVAL_BASE
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.YEAR,
               A.EVAL_DEGREE_ID,
               A.SC_DEPT_ID,
               B.SC_DEPT_NM,
               A.EVAL_BASE_CHARGE_USER_ID,
              (SELECT USER_NM FROM V_ROLE_USER WHERE USER_ID=A.EVAL_BASE_CHARGE_USER_ID) EVAL_BASE_CHARGE_USER_NM,
              (SELECT EMAIL FROM V_ROLE_USER WHERE USER_ID=A.EVAL_BASE_CHARGE_USER_ID) EMAIL,
              C.EVAL_BASE,
              CASE WHEN COUNT(SEQ) OVER (PARTITION BY D.YEAR, D.EVAL_DEGREE_ID, D.SC_DEPT_ID)=0 THEN 1 ELSE COUNT(SEQ) OVER (PARTITION BY D.YEAR, D.EVAL_DEGREE_ID, D.SC_DEPT_ID) END FCOUNT,
              CASE WHEN D.SEQ IS NULL THEN 1 ELSE ROW_NUMBER()  OVER (PARTITION BY D.YEAR, D.EVAL_DEGREE_ID, D.SC_DEPT_ID ORDER BY D.SEQ) END SEQ,
              D.ATTACH_FILE_NM ,
              D.ATTACH_FILE_FNM ,
              D.ATTACH_FILE_SUFFIX,
              NVL(A.EVAL_SUBMIT_YN,'N') AS EVAL_SUBMIT_YN,
              CASE WHEN D.ATTACH_FILE_PATH IS NULL THEN D.ATTACH_FILE_PATH ELSE F_ENCRYPT(D.ATTACH_FILE_PATH,#encryptionCode#)  END ATTACH_FILE_PATH
         FROM BSC_SPE_EVAL_DEPT A
         INNER JOIN(
                     SELECT YEAR,
                            SC_DEPT_ID,
                            SUBSTR(SYS_CONNECT_BY_PATH(SC_DEPT_NM,'>'),2, length(SYS_CONNECT_BY_PATH(SC_DEPT_NM,'>')))SC_DEPT_NM                                 
                       FROM ( SELECT * FROM BSC_SC_DEPT WHERE YEAR = #findYear#)         
                      WHERE DELETE_DT IS NULL                                
                      START WITH UP_SC_DEPT_ID IS NULL                        
                      CONNECT BY PRIOR SC_DEPT_ID = UP_SC_DEPT_ID) B ON A.YEAR=B.YEAR AND A.SC_DEPT_ID=B.SC_DEPT_ID
           LEFT OUTER JOIN BSC_SPE_EVAL_BASE C ON A.YEAR=C.YEAR AND A.EVAL_DEGREE_ID=C.EVAL_DEGREE_ID AND A.SC_DEPT_ID=C.SC_DEPT_ID   
           LEFT OUTER JOIN BSC_SPE_EVAL_BASE_ATTACH D ON A.YEAR=D.YEAR AND A.EVAL_DEGREE_ID=D.EVAL_DEGREE_ID AND A.SC_DEPT_ID=D.SC_DEPT_ID         
         WHERE A.YEAR=#findYear#
          AND A.EVAL_DEGREE_ID=#findEvalDegreeId#
          <isNotEmpty property="findEvalBaseChargeId" prepend="AND">
       			A.EVAL_BASE_CHARGE_USER_ID = #findEvalBaseChargeId#
       	  </isNotEmpty> 
        ORDER BY A.SORT_ORDER, D.SEQ  
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 별도평가근거 상세 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_SPE_EVAL_BASE
	==================================================================
	-->
	<select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR                  
			 , EVAL_DEGREE_ID        
			 , SC_DEPT_ID            
			 , EVAL_BASE             
		  FROM BSC_SPE_EVAL_BASE 
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND SC_DEPT_ID = #scDeptId#	      
	</select>
	
	 <!--
	==================================================================   
	  # 설명	: 평가근거담당자 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getUserList" parameterClass="hashMap" resultClass="hashMap">
		SELECT A.EVAL_BASE_CHARGE_USER_ID,
               B.USER_NM AS EVAL_BASE_CHARGE_USER_NM
		  FROM BSC_SPE_EVAL_DEPT A
		  LEFT OUTER JOIN V_ROLE_USER B ON A.EVAL_BASE_CHARGE_USER_ID=B.USER_ID
		 WHERE A.YEAR=#findYear#
		   AND A.EVAL_DEGREE_ID=#findEvalDegreeId#
    </select>
	
	<!--
	==================================================================   
	  # 설명	: 별도평가근거 등록
	  #	기능	: INSERT
	  #	TABLE	: BSC_SPE_EVAL_BASE
	==================================================================
	-->	
	<insert id="insertData" parameterClass="hashMap">
		INSERT INTO BSC_SPE_EVAL_BASE ( 
			   YEAR
			 , EVAL_DEGREE_ID
			 , SC_DEPT_ID
			 , EVAL_BASE
			 , CREATE_DT
			 ) VALUES ( 
			   #year#
			 , #evalDegreeId#
			 , #scDeptId#
			 , #evalBase#
			 , SYSDATE
			 )
	</insert>	
	
	<!--
	==================================================================   
	  # 설명	: 별도평가근거 수정
	  #	기능	: UPDATE
	  #	TABLE	: BSC_SPE_EVAL_BASE
	==================================================================
	-->	
	<update id="updateData" parameterClass="hashMap">
		UPDATE BSC_SPE_EVAL_BASE 
		   SET EVAL_BASE              = #evalBase# 
			 , MODIFY_DT              = SYSDATE 
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND SC_DEPT_ID = #scDeptId#		
	</update>	
	

	<!--
	==================================================================   
	  # 설명	: 별도평가근거 삭제
	  #	기능	: UPDATE
	  #	TABLE	: BSC_SPE_EVAL_BASE
	==================================================================
	-->	
	<update id="deleteData" parameterClass="hashMap">
		DELETE FROM BSC_SPE_EVAL_BASE 
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND SC_DEPT_ID = #scDeptId#
	</update>
	
	<!--
	==================================================================   
	  # 설명	: 평가근거 등록기한 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getEvalPeriodYn" parameterClass="hashMap" resultClass="java.lang.String">
		  SELECT CASE WHEN TO_CHAR( SYSDATE , 'YYYYMMDD') BETWEEN  SEPA_EVAL_BASE_REG_START_DT AND SEPA_EVAL_BASE_REG_END_DT THEN 'Y' ELSE 'N' END AS EVAL_PERIOD_YN      
            FROM BSC_ECM_EVAL_DEGREE 
           WHERE YEAR = #findYear#
             AND EVAL_DEGREE_ID = #findEvalDegreeId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 평가구분
	  #	기능	: SELECT
	  #	TABLE	: BSC_ECM_EVAL_DEGREE
	==================================================================
	-->
	<select id="getDetailGubun" parameterClass="hashMap" resultClass="hashMap">
		SELECT YEAR                  
			 , EVAL_DEGREE_ID        
			 , EVAL_DEGREE_NM         
		  FROM BSC_ECM_EVAL_DEGREE 
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 실적담당자
	  #	기능	: SELECT
	  #	TABLE	: V_ROLE_USER
	==================================================================
	-->
	<select id="getDetailUser" parameterClass="hashMap" resultClass="hashMap">
		SELECT USER_NM         
		  FROM V_ROLE_USER 
		 WHERE USER_ID=#insertUserId#
	</select>
	
	<!--
	==================================================================   
	  # 설명	: 파일 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: BSC_SPE_EVAL_BASE_ATTACH
	==================================================================
	-->
	<select id="getFileList" parameterClass="hashMap" resultClass="hashMap">
 		SELECT A.YEAR
	         , A.EVAL_DEGREE_ID
	         , A.SC_DEPT_ID
	         , A.SEQ
	         , A.ATTACH_FILE_NM
	         , A.ATTACH_FILE_FNM
	         , A.ATTACH_FILE_SUFFIX
	         , F_ENCRYPT(A.ATTACH_FILE_PATH, #encryptionCode#) ATTACH_FILE_PATH
         FROM BSC_SPE_EVAL_BASE_ATTACH A
        WHERE A.YEAR = #year#
		   AND A.EVAL_DEGREE_ID = #evalDegreeId#
		   AND A.SC_DEPT_ID = #scDeptId#
  	</select>
	
	<!--
	==================================================================   
	  # 설명	: 첨부파일 등록
	  #	기능	: INSERT
	  #	TABLE	: PRS_EVAL_BASE
	==================================================================
	-->	
	<insert id="insertFileInfo" parameterClass="hashMap">
		<selectKey resultClass="java.lang.String" keyProperty="SEQ" >
			SELECT NVL(MAX(SEQ)+1,1)  FROM BSC_SPE_EVAL_BASE_ATTACH WHERE YEAR = #year# AND EVAL_DEGREE_ID=#evalDegreeId# AND SC_DEPT_ID=#scDeptId#  
		</selectKey> 
		INSERT INTO BSC_SPE_EVAL_BASE_ATTACH (
               YEAR
             , EVAL_DEGREE_ID
             , SC_DEPT_ID
             , SEQ
             , ATTACH_FILE_NM
             , ATTACH_FILE_FNM
             , ATTACH_FILE_SUFFIX
             , ATTACH_FILE_PATH
             , CREATE_DT
           ) VALUES (
               #year#
             , #evalDegreeId#
             , #scDeptId#
             , #SEQ#
             , #attachFileNm#
             , #attachFileFnm#
             , #attachFileSuffix#
             , #attachFilePath#
             , SYSDATE
    	   )       
	</insert>
	
	<!--
	==================================================================   
	  # 설명	: 첨부파일 삭제
	  #	기능	: INSERT
	  #	TABLE	: PRS_EVAL_BASE
	==================================================================
	-->	
	<delete id="deleteFileInfo" parameterClass="hashMap">
		DELETE FROM BSC_SPE_EVAL_BASE_ATTACH
		 WHERE YEAR = #year#
		   AND EVAL_DEGREE_ID = #evalDegreeId#
		   AND SC_DEPT_ID = #scDeptId#
		   AND SEQ = #seq#
	</delete>
	
	
</sqlMap>


