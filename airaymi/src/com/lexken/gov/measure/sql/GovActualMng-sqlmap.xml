<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="gov.measure.govActualMng">

	<!--
	==================================================================
	  # 설명	: typeAlias 선언
	  #	기능	: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<typeAlias alias="hashMap" 			type="java.util.HashMap" />


	<!--
	==================================================================
	  # 설명	: 계량실적입력 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: GOV_METRIC
	==================================================================
	-->
	<select id="getList" parameterClass="hashMap" resultClass="hashMap" remapResults="true">
		SELECT GML.YEAR
			 , GML.GOV_METRIC_ID
			 , GML.GOV_METRIC_NM
<!--
			 , GML.ITEM_CD
			 , GML.URL
-->
		     , GML.ACT_CAL_TYPE_COL_ID
		     , GML.ACT_CAL_TYPE_COL_NM
		     , CAL_TYPE_UNIT_ID
		     , GML.CAL_TYPE_UNIT_NM
		     , ROUND(GA.ACT_CAL_TYPE_COL_VAL_01, 3) AS ACT_CAL_TYPE_COL_VAL_01
		     , ROUND(GA.ACT_CAL_TYPE_COL_VAL_02, 3) AS ACT_CAL_TYPE_COL_VAL_02
		     , ROUND(GA.ACT_CAL_TYPE_COL_VAL_03, 3) AS ACT_CAL_TYPE_COL_VAL_03
		     , ROUND(GA.ACT_CAL_TYPE_COL_VAL_04, 3) AS ACT_CAL_TYPE_COL_VAL_04
		     , ROUND(GA.ACT_CAL_TYPE_COL_VAL_05, 3) AS ACT_CAL_TYPE_COL_VAL_05
		     , ROUND(GA.ACT_CAL_TYPE_COL_VAL_06, 3) AS ACT_CAL_TYPE_COL_VAL_06
		     , ROUND(GA.ACT_CAL_TYPE_COL_VAL_07, 3) AS ACT_CAL_TYPE_COL_VAL_07
		     , ROUND(GA.ACT_CAL_TYPE_COL_VAL_08, 3) AS ACT_CAL_TYPE_COL_VAL_08
		     , ROUND(GA.ACT_CAL_TYPE_COL_VAL_09, 3) AS ACT_CAL_TYPE_COL_VAL_09
		     , ROUND(GA.ACT_CAL_TYPE_COL_VAL_10, 3) AS ACT_CAL_TYPE_COL_VAL_10
		     , ROUND(GA.ACT_CAL_TYPE_COL_VAL_11, 3) AS ACT_CAL_TYPE_COL_VAL_11
		     , ROUND(GA.ACT_CAL_TYPE_COL_VAL_12, 3) AS ACT_CAL_TYPE_COL_VAL_12
		     , GML.SC_DEPT_ID
		     , GML.SC_DEPT_NM
		     , GML.INSERT_USER_ID
		     , GML.INSERT_USER_NM
		     , COUNT(GML.GOV_METRIC_ID) OVER(PARTITION BY GML.YEAR, GML.GOV_METRIC_ID) AS GM_CNT
		     , ROW_NUMBER() OVER(PARTITION BY GML.YEAR
		     , GML.GOV_METRIC_ID
	  ORDER BY GML.GM_SORT_ORDER
	  		 , GML.GOV_METRIC_NM
	  		 , GML.ACT_CAL_TYPE_COL_ID ) AS GM_INDEX
		     , CASE WHEN GML.ACT_CAL_TYPE_COL_ID = 'ZZZ' THEN 'NONE'
		     		WHEN NVL(GML.SUB_CAL_CNT, 0) = 0 THEN 'INPUT' ELSE 'NONE'
		       END IS_INPUT_YN
		     , REPLACE(ACT_CAL_TYPE_COL_NM, 'ACTUAL', '실적') AS ACT_CAL_TYPE_COL_NM_EXCEL
		  FROM
		    (SELECT YEAR
		          , GOV_METRIC_ID, GOV_METRIC_NM
		          , SC_DEPT_ID, SC_DEPT_NM
		          , INSERT_USER_ID, INSERT_USER_NM
		          , ACT_CAL_TYPE_COL_ID, ACT_CAL_TYPE_COL_NM
		          , CAL_TYPE_UNIT_ID
		          , F_CODE_NM('013' , CAL_TYPE_UNIT_ID, YEAR) AS CAL_TYPE_UNIT_NM
		          , GM_SORT_ORDER
		          , SUB_CAL_CNT
		      FROM
		        (SELECT YEAR
		              , GOV_METRIC_NM
<!--
		              , ITEM_CD
		              , URL
-->
		              , SC_DEPT_ID, SC_DEPT_NM
		              , INSERT_USER_ID
		              , INSERT_USER_NM
		              , ACUTAL_UNIT_ID
		              , GM_SORT_ORDER
		              , GOV_METRIC_ID
		              , NVL(ACT_CAL_TYPE_COL_ID, 'ZZZ') AS ACT_CAL_TYPE_COL_ID
		              , NVL(ACT_CAL_TYPE_COL_NM, 'ACTUAL') AS ACT_CAL_TYPE_COL_NM
		              , CASE WHEN ACT_CAL_TYPE_COL_ID IS NULL THEN ACUTAL_UNIT_ID ELSE CAL_TYPE_UNIT_ID END AS CAL_TYPE_UNIT_ID
		              , SUB_CAL_CNT
		           FROM
		            (SELECT GM.YEAR
		            	 , GM.GOV_METRIC_ID
		            	 , GM.GOV_METRIC_NM
		                 , GCTC.ITEM_CD
		                 , BSI.URL
		                 , GM.UNIT AS ACUTAL_UNIT_ID
		                 , GM.SC_DEPT_ID, SD.SC_DEPT_NM
		                 , GM.INSERT_USER_ID
		                 , UI.USER_NM AS INSERT_USER_NM
		                 , GCTC.ACT_CAL_TYPE_COL_ID
		                 , GCTC.ACT_CAL_TYPE_COL_NM
		                 , GCTC.UNIT AS CAL_TYPE_UNIT_ID
		                 , GM.SORT_ORDER AS GM_SORT_ORDER
		                 , GSCM.SUB_CAL_CNT
		              FROM GOV_METRIC GM
		   LEFT OUTER JOIN GOV_CAL_TYPE_COL GCTC ON GM.YEAR = GCTC.YEAR
		               AND GM.GOV_METRIC_ID = GCTC.GOV_METRIC_ID
		    LEFT OUTER JOIN BSC_SYSTEM_ITEM BSI
                       ON GM.YEAR = BSI.YEAR
                       AND GCTC.ITEM_CD = BSI.ITEM_CD
		   LEFT OUTER JOIN BSC_SC_DEPT SD ON GM.YEAR = SD.YEAR AND GM.SC_DEPT_ID = SD.SC_DEPT_ID
		   LEFT OUTER JOIN BSC_USERINFO UI ON GM.INSERT_USER_ID = UI.USER_ID
		   LEFT OUTER JOIN (SELECT YEAR
		   						 , GOV_METRIC_ID
		   						 , ACT_CAL_TYPE_COL_ID
		   						 , COUNT(*) AS SUB_CAL_CNT
		                      FROM GOV_SUB_CAL_MAPPING
		                     WHERE 1=1
		                       AND YEAR = #findYear#
		                     GROUP BY YEAR
		                     	 , GOV_METRIC_ID
		                     	 , ACT_CAL_TYPE_COL_ID )GSCM
		                ON GCTC.YEAR = GSCM.YEAR
                       AND GCTC.GOV_METRIC_ID = GSCM.GOV_METRIC_ID
                       AND GCTC.ACT_CAL_TYPE_COL_ID = GSCM.ACT_CAL_TYPE_COL_ID
		             WHERE 1=1
		               AND GM.YEAR = #findYear#
		               <dynamic prepend="AND">
		               		<isNotEmpty property="findGovMetricId">
				               GM.GOV_METRIC_ID = #findGovMetricId#
		               		</isNotEmpty>
		               </dynamic>
		               AND GM.GBN_ID = '01'
		               AND GM.DELETE_DT IS NULL
		               <dynamic prepend="AND">
		               		<isNotEmpty property="findInsertUserId">
		               			GM.INSERT_USER_ID = #findInsertUserId#
		               		</isNotEmpty>
		               </dynamic>
		               <dynamic prepend="AND">
		               		<isNotEmpty property="findEvalCatGrp">
		               			GM.EVAL_CAT_GRP_ID = #findEvalCatGrp#
		               		</isNotEmpty>
		               </dynamic>
		               <!--
		               AND (GM.YEAR, GM.GOV_METRIC_ID, GCTC.ACT_CAL_TYPE_COL_ID) NOT IN
		                   (SELECT YEAR, GOV_METRIC_ID, ACT_CAL_TYPE_COL_ID
		                      FROM GOV_SUB_CAL_MAPPING
		                     WHERE 1=1
		                       AND YEAR = #findYear#)
		               -->
		            )
		          GROUP BY YEAR
		          	  , GOV_METRIC_NM
		              , SC_DEPT_ID, SC_DEPT_NM
		              , INSERT_USER_ID, INSERT_USER_NM
		              , ACUTAL_UNIT_ID
		              , GM_SORT_ORDER
		              , ROLLUP(GOV_METRIC_ID, ACT_CAL_TYPE_COL_ID, ACT_CAL_TYPE_COL_NM, SUB_CAL_CNT, CAL_TYPE_UNIT_ID)
		        )
		     WHERE 1=1
		       AND GOV_METRIC_ID IS NOT NULL
		       AND CAL_TYPE_UNIT_ID IS NOT NULL
		    ) GML
		    LEFT OUTER JOIN
		    (SELECT YEAR, GOV_METRIC_ID, ACT_CAL_TYPE_COL_ID
			     , MAX( CASE WHEN MON = '01' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_01
			     , MAX( CASE WHEN MON = '02' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_02
			     , MAX( CASE WHEN MON = '03' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_03
			     , MAX( CASE WHEN MON = '04' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_04
			     , MAX( CASE WHEN MON = '05' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_05
			     , MAX( CASE WHEN MON = '06' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_06
			     , MAX( CASE WHEN MON = '07' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_07
			     , MAX( CASE WHEN MON = '08' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_08
			     , MAX( CASE WHEN MON = '09' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_09
			     , MAX( CASE WHEN MON = '10' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_10
			     , MAX( CASE WHEN MON = '11' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_11
			     , MAX( CASE WHEN MON = '12' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_12
			  FROM
			    (SELECT YEAR, MON
			    	  , GOV_METRIC_ID
			    	  , ACT_CAL_TYPE_COL_ID
			    	  , CAL_TYPE_COL_ACTUAL
			      FROM GOV_CAL_TYPE_COL_ACTUAL
			     WHERE 1=1
			       AND YEAR = #findYear#
			       <dynamic prepend="AND">
	               		<isNotEmpty property="findGovMetricId">
			               GOV_METRIC_ID = #findGovMetricId#
	               		</isNotEmpty>
	               </dynamic>
			     UNION ALL
                SELECT YEAR, MON
                	 , GOV_METRIC_ID,'ZZZ' AS ACT_CAL_TYPE_COL_ID
                	 , ACTUAL
                  FROM GOV_ACTUAL
                 WHERE 1=1
                   AND YEAR = #findYear#
                   <dynamic prepend="AND">
	               		<isNotEmpty property="findGovMetricId">
			               GOV_METRIC_ID = #findGovMetricId#
	               		</isNotEmpty>
	               </dynamic>
			    )
			 GROUP BY YEAR
			 	 , GOV_METRIC_ID
			 	 , ACT_CAL_TYPE_COL_ID
		    ) GA
		    ON GML.YEAR = GA.YEAR
		   AND GML.GOV_METRIC_ID = GA.GOV_METRIC_ID
		   AND GML.ACT_CAL_TYPE_COL_ID = GA.ACT_CAL_TYPE_COL_ID
		 ORDER BY GML.GM_SORT_ORDER
		 	    , GML.GOV_METRIC_NM
		 	    , GML.ACT_CAL_TYPE_COL_ID

	</select>

    <!--
    ==================================================================   
      # 설명  : 경평지표관리 상세 보기
      # 기능  : SELECT
      # TABLE   : GOV_METRIC
    ==================================================================
    -->
    <select id="getDetail" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.YEAR                  
             , A.GOV_METRIC_ID     
             , A.GOV_METRIC_GRP_ID    
             , A.GOV_METRIC_NM         
             , A.CONTENT               
             , A.GBN_ID                
             , A.DIREC_ID              
             , A.EVAL_METHOD_ID        
             , A.UNIT                  
             , A.ACT_CAL_TYPE
             , A.DETAIL_EVAL_SUMMARY_COMMENT
             , A.SC_DEPT_ID  
             , B.SC_DEPT_NM          
             , A.INSERT_USER_ID  
             , C.USER_NM AS INSERT_USER_NM      
             , A.BASE_VALUE            
             , A.BEST_TARGET           
             , A.LOWEST_TARGET         
             , A.STAD_CONST            
             , A.SORT_ORDER            
             , A.WEIGHT                
             , A.SIMULATION_YN         
             , A.UNMEAS_BEST_TARGET    
             , A.MAIN_METRIC_YN        
             , A.UP_METRIC_ID  
             , CASE WHEN A.DELETE_DT IS NULL THEN 'Y' ELSE 'N' END AS USER_YN       
             , A.BEST_TARGET_3YEAR
             , A.LOWEST_TARGET_3YEAR
             , A.ACTUAL_3YEAR
             , A.RATE_YEAR
          FROM GOV_METRIC A
          LEFT OUTER JOIN BSC_SC_DEPT B ON   A.YEAR = B.YEAR AND A.SC_DEPT_ID = B.SC_DEPT_ID                               
          LEFT OUTER JOIN BSC_USERINFO C ON A.INSERT_USER_ID = C.USER_ID                        
         WHERE A.YEAR = #findYear#
           AND A.GOV_METRIC_ID =#findGovMetricId#
    </select>

    <!--
    ==================================================================   
      # 설명  : 경평지표관리 상세 보기
      # 기능  : SELECT
      # TABLE   : GOV_METRIC
    ==================================================================
    -->
    <select id="getScore" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.YEAR, B.MON, A.GOV_METRIC_ID
        , ROUND(A.BEST_TARGET, 3) AS TARGET
        , ROUND(C.ACTUAL, 3) AS ACTUAL
        , ROUND(C.SCORE, 3) AS SCORE
        , C.STATUS_ID
        FROM GOV_METRIC A
        LEFT OUTER JOIN (SELECT LPAD(TO_CHAR(ROWNUM),2,'0') AS MON FROM DUAL CONNECT BY ROWNUM &lt;= 12) B ON 1=1
        LEFT OUTER JOIN GOV_ACTUAL C
            ON A.YEAR = C.YEAR
            AND B.MON = C.MON
            AND A.GOV_METRIC_ID = C.GOV_METRIC_ID
        WHERE A.YEAR = #findYear#
        AND A.GOV_METRIC_ID =#findGovMetricId#
        ORDER BY YEAR, MON        
    </select>
    
    <!--
	==================================================================
	  # 설명	: 계량실적입력 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: GOV_METRIC
	==================================================================
	-->
	<select id="getPopList" parameterClass="hashMap" resultClass="hashMap" remapResults="true">
		SELECT GML.YEAR
			 , GML.GOV_METRIC_ID
			 , GML.GOV_METRIC_NM
			 , GML.METRIC_ID
		     , GML.ACT_CAL_TYPE_COL_ID
		     , GML.ACT_CAL_TYPE_COL_NM
<!--
		     , GML.ITEM_CD
		     , GML.URL
-->
		     , GI.ITEM_CD
		     , GI.URL
		     , GML.RESTRICTED
		     , CAL_TYPE_UNIT_ID
		     , GML.CAL_TYPE_UNIT_NM
		     , GA.ACT_CAL_TYPE_COL_VAL_01
		     , GA.ACT_CAL_TYPE_COL_VAL_02
		     , GA.ACT_CAL_TYPE_COL_VAL_03
		     , GA.ACT_CAL_TYPE_COL_VAL_04
		     , GA.ACT_CAL_TYPE_COL_VAL_05
		     , GA.ACT_CAL_TYPE_COL_VAL_06
		     , GA.ACT_CAL_TYPE_COL_VAL_07
		     , GA.ACT_CAL_TYPE_COL_VAL_08
		     , GA.ACT_CAL_TYPE_COL_VAL_09
		     , GA.ACT_CAL_TYPE_COL_VAL_10
		     , GA.ACT_CAL_TYPE_COL_VAL_11
		     , GA.ACT_CAL_TYPE_COL_VAL_12
		     , GML.SC_DEPT_ID
		     , GML.SC_DEPT_NM
		     , GML.INSERT_USER_ID
		     , GML.INSERT_USER_NM
		     , COUNT(GML.GOV_METRIC_ID) OVER(PARTITION BY GML.YEAR, GML.GOV_METRIC_ID) AS GM_CNT
		     , ROW_NUMBER() OVER(PARTITION BY GML.YEAR, GML.GOV_METRIC_ID
		                             ORDER BY GML.GM_SORT_ORDER, GML.GOV_METRIC_NM, GML.ACT_CAL_TYPE_COL_ID ) AS GM_INDEX
		     , CASE WHEN GML.ACT_CAL_TYPE_COL_ID = 'ZZZ' THEN 'NONE'
		     		WHEN NVL(GML.SUB_CAL_CNT, 0) = 0 THEN 'INPUT' ELSE 'NONE'
		       END IS_INPUT_YN
		     , REPLACE(ACT_CAL_TYPE_COL_NM, 'ACTUAL', '실적') AS ACT_CAL_TYPE_COL_NM_EXCEL
		  FROM
		    (SELECT YEAR
		          , GOV_METRIC_ID
		          , GOV_METRIC_NM
		          , METRIC_ID
		          , SC_DEPT_ID
		          , SC_DEPT_NM
		          , INSERT_USER_ID
		          , INSERT_USER_NM
		          , ACT_CAL_TYPE_COL_ID
		          , ACT_CAL_TYPE_COL_NM
<!--
		          , ITEM_CD
		          , URL
-->
		          , RESTRICTED
		          , CAL_TYPE_UNIT_ID
		          , F_CODE_NM('013' , CAL_TYPE_UNIT_ID, YEAR) AS CAL_TYPE_UNIT_NM
		          , GM_SORT_ORDER
		          , SUB_CAL_CNT
		      FROM
		        (SELECT YEAR
		              , GOV_METRIC_NM
		              , METRIC_ID
		              , SC_DEPT_ID
		              , SC_DEPT_NM
		              , INSERT_USER_ID
		              , INSERT_USER_NM
		              , ACUTAL_UNIT_ID
		              , GM_SORT_ORDER
		              , GOV_METRIC_ID
<!--
		              , ITEM_CD
		              , URL
-->
		              , RESTRICTED
		              , NVL(ACT_CAL_TYPE_COL_ID, 'ZZZ') AS ACT_CAL_TYPE_COL_ID
		              , NVL(ACT_CAL_TYPE_COL_NM, 'ACTUAL') AS ACT_CAL_TYPE_COL_NM
		              , CASE WHEN ACT_CAL_TYPE_COL_ID IS NULL THEN ACUTAL_UNIT_ID ELSE CAL_TYPE_UNIT_ID END AS CAL_TYPE_UNIT_ID
		              , SUB_CAL_CNT
		           FROM
		            (SELECT GM.YEAR
		            	 , GM.GOV_METRIC_ID
		            	 , BM.METRIC_ID
		            	 , GM.GOV_METRIC_NM
		                 , GM.UNIT AS ACUTAL_UNIT_ID
		                 , GM.SC_DEPT_ID, SD.SC_DEPT_NM
		                 , GM.INSERT_USER_ID
		                 , UI.USER_NM AS INSERT_USER_NM
<!--		                 
		                 , GCTC.ITEM_CD
		                 , BSI.URL
-->
		                 , BSI.RESTRICTED
		                 , GCTC.ACT_CAL_TYPE_COL_ID
		                 , GCTC.ACT_CAL_TYPE_COL_NM
		                 , GCTC.UNIT AS CAL_TYPE_UNIT_ID
		                 , GM.SORT_ORDER AS GM_SORT_ORDER
		                 , GSCM.SUB_CAL_CNT
		              FROM GOV_METRIC GM
<!--
		   LEFT OUTER JOIN GOV_METRIC_MAPPING GMM
-->
           LEFT OUTER JOIN (  SELECT YEAR, GOV_METRIC_ID, MAX (METRIC_ID) METRIC_ID
                                FROM GOV_METRIC_MAPPING
                            GROUP BY YEAR, GOV_METRIC_ID) GMM
		   				ON GM.YEAR = GMM.YEAR
		   				AND GM.GOV_METRIC_ID = GMM.GOV_METRIC_ID
		   LEFT OUTER JOIN BSC_METRIC BM
		   				ON GM.YEAR = BM.YEAR
		   				AND GMM.METRIC_ID = BM.METRIC_ID
		   LEFT OUTER JOIN GOV_CAL_TYPE_COL GCTC
		            	ON GM.YEAR = GCTC.YEAR
		               AND GM.GOV_METRIC_ID = GCTC.GOV_METRIC_ID
		   LEFT OUTER JOIN BSC_SYSTEM_ITEM BSI
		   				ON GM.YEAR = BSI.YEAR
		   				AND GCTC.ITEM_CD = BSI.ITEM_CD
		   LEFT OUTER JOIN BSC_SC_DEPT SD
		   				ON GM.YEAR = SD.YEAR
		   			   AND GM.SC_DEPT_ID = SD.SC_DEPT_ID
		   LEFT OUTER JOIN BSC_USERINFO UI
		   				ON GM.INSERT_USER_ID = UI.USER_ID
		   LEFT OUTER JOIN (SELECT YEAR
		   						 , GOV_METRIC_ID
		   						 , ACT_CAL_TYPE_COL_ID
		   						 , COUNT(*) AS SUB_CAL_CNT
		                      FROM GOV_SUB_CAL_MAPPING
		                     WHERE 1=1
		                       AND YEAR = #findYear#
		                  GROUP BY YEAR
		                  		 , GOV_METRIC_ID
		                  		 , ACT_CAL_TYPE_COL_ID )GSCM
		                   	 	ON GCTC.YEAR = GSCM.YEAR
                          	   AND GCTC.GOV_METRIC_ID = GSCM.GOV_METRIC_ID
                          	   AND GCTC.ACT_CAL_TYPE_COL_ID = GSCM.ACT_CAL_TYPE_COL_ID
		             WHERE 1=1
		               AND GM.YEAR = #findYear#
		               AND GM.GBN_ID = '01'
		               AND GM.DELETE_DT IS NULL
		               AND GM.GOV_METRIC_ID = #findGovMetricId#
		            )
		          GROUP BY YEAR
		          	  , GOV_METRIC_NM
		          	  , METRIC_ID
		              , SC_DEPT_ID
		              , SC_DEPT_NM
<!--
		              , ITEM_CD
		              , URL
-->
		              , RESTRICTED
		              , INSERT_USER_ID
		              , INSERT_USER_NM
		              , ACUTAL_UNIT_ID
		              , GM_SORT_ORDER
		              , ROLLUP(GOV_METRIC_ID, ACT_CAL_TYPE_COL_ID, ACT_CAL_TYPE_COL_NM, SUB_CAL_CNT, CAL_TYPE_UNIT_ID)
		        )
		     WHERE 1=1
		       AND GOV_METRIC_ID IS NOT NULL
		       AND CAL_TYPE_UNIT_ID IS NOT NULL
		    ) GML
		    LEFT OUTER JOIN
		    (SELECT YEAR, GOV_METRIC_ID, ACT_CAL_TYPE_COL_ID
			     , MAX( CASE WHEN MON = '01' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_01
			     , MAX( CASE WHEN MON = '02' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_02
			     , MAX( CASE WHEN MON = '03' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_03
			     , MAX( CASE WHEN MON = '04' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_04
			     , MAX( CASE WHEN MON = '05' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_05
			     , MAX( CASE WHEN MON = '06' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_06
			     , MAX( CASE WHEN MON = '07' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_07
			     , MAX( CASE WHEN MON = '08' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_08
			     , MAX( CASE WHEN MON = '09' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_09
			     , MAX( CASE WHEN MON = '10' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_10
			     , MAX( CASE WHEN MON = '11' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_11
			     , MAX( CASE WHEN MON = '12' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END ) AS ACT_CAL_TYPE_COL_VAL_12
			  FROM
			    (SELECT YEAR
			    	  , MON
			    	  , GOV_METRIC_ID
			    	  , ACT_CAL_TYPE_COL_ID
			    	  , CAL_TYPE_COL_ACTUAL
			      FROM GOV_CAL_TYPE_COL_ACTUAL
			     WHERE 1=1
			       AND YEAR = #findYear#
			     UNION ALL
                SELECT YEAR
                	 , MON
                	 , GOV_METRIC_ID
                	 ,'ZZZ' AS ACT_CAL_TYPE_COL_ID
                	 , ACTUAL
                  FROM GOV_ACTUAL
                 WHERE 1=1
                   AND YEAR = #findYear#
			    )
			 GROUP BY YEAR
			 		, GOV_METRIC_ID
			 		, ACT_CAL_TYPE_COL_ID
		    ) GA
		    ON GML.YEAR = GA.YEAR
		   AND GML.GOV_METRIC_ID = GA.GOV_METRIC_ID
		   AND GML.ACT_CAL_TYPE_COL_ID = GA.ACT_CAL_TYPE_COL_ID
         LEFT OUTER JOIN (SELECT A.YEAR
                               , GOV_METRIC_ID
                               , ACT_CAL_TYPE_COL_ID
                               , A.ITEM_CD
                               , URL
                            FROM GOV_CAL_TYPE_COL A, BSC_SYSTEM_ITEM B
                           WHERE A.YEAR = #findYear#
                             AND A.ITEM_CD IS NOT NULL
                             AND A.YEAR = B.YEAR
                             AND A.ITEM_CD = B.ITEM_CD) GI
            ON GML.YEAR = GI.YEAR
           AND GML.GOV_METRIC_ID = GI.GOV_METRIC_ID
           AND GML.ACT_CAL_TYPE_COL_ID = GI.ACT_CAL_TYPE_COL_ID
		 ORDER BY GML.GM_SORT_ORDER
		 		, GML.GOV_METRIC_NM
		 		, GML.ACT_CAL_TYPE_COL_ID

	</select>


	<!--
	==================================================================
	  # 설명	: 계량실적입력 담당자(조회조건) 목록
	  #	기능	: SELECT
	  #	TABLE	: GOV_METRIC
	==================================================================
	-->
	<select id="getInsertUserList" parameterClass="hashMap" resultClass="hashMap">
			SELECT GM.INSERT_USER_ID
				 , UI.USER_NM AS INSERT_USER_NM
			  FROM GOV_METRIC GM
   LEFT OUTER JOIN GOV_CAL_TYPE_COL GCTC
			    ON GM.YEAR = GCTC.YEAR
			   AND GM.GOV_METRIC_ID = GCTC.GOV_METRIC_ID
   LEFT OUTER JOIN BSC_SC_DEPT SD
   				ON GM.YEAR = SD.YEAR
   			   AND GM.SC_DEPT_ID = SD.SC_DEPT_ID
   LEFT OUTER JOIN BSC_USERINFO UI
   				ON GM.INSERT_USER_ID = UI.USER_ID
			 WHERE 1=1
			   AND GM.YEAR = #findYear#
			   AND GM.GBN_ID = '01'
			   AND GM.DELETE_DT IS NULL
			   <!--
			   AND (GM.YEAR, GM.GOV_METRIC_ID, GCTC.ACT_CAL_TYPE_COL_ID) NOT IN
			       (SELECT YEAR, GOV_METRIC_ID, ACT_CAL_TYPE_COL_ID
			          FROM GOV_SUB_CAL_MAPPING
			         WHERE 1=1
			           AND YEAR = #findYear#)
			   -->
			 GROUP BY GM.INSERT_USER_ID
			 		, UI.USER_NM
			 ORDER BY UI.USER_NM
	</select>


	<!--
	==================================================================
	  # 설명	: 계량실적입력 평가범주(조회조건) 목록
	  #	기능	: SELECT
	  #	TABLE	: GOV_EVAL_CAT_GRP
	==================================================================
	-->
	<select id="getEvalCatGrpList" parameterClass="hashMap" resultClass="hashMap">
		SELECT ECG.EVAL_CAT_GRP_ID
		 	 , ECG.EVAL_CAT_GRP_NM
		  FROM GOV_EVAL_CAT_GRP ECG
	INNER JOIN (SELECT A.EVAL_CAT_GRP_ID
		          FROM GOV_EVAL_CAT_GRP A
		    INNER JOIN GOV_METRIC B
		           ON  A.EVAL_CAT_GRP_ID = B.EVAL_CAT_GRP_ID
		           AND B.GBN_ID 		 = '01'
		           AND B.DELETE_DT IS NULL
		         WHERE 1=1
		           AND A.YEAR 			 = #findYear#
		      GROUP BY A.EVAL_CAT_GRP_ID) C
		    ON ECG.EVAL_CAT_GRP_ID = C.EVAL_CAT_GRP_ID
	  ORDER BY ECG.SORT_ORDER NULLS LAST
			 , ECG.EVAL_CAT_GRP_ID
	</select>

	<!--
	==================================================================
	  # 설명	: 계량실적입력 등록
	  #	기능	: INSERT
	  #	TABLE	: GOV_CAL_TYPE_COL_ACTUAL
	==================================================================
	-->
	<insert id="insertData" parameterClass="hashMap">
		INSERT INTO GOV_CAL_TYPE_COL_ACTUAL (
					  YEAR, MON
					, GOV_METRIC_ID
					, ACT_CAL_TYPE_COL_ID
					, CAL_TYPE_COL_ACTUAL
					, CREATE_DT
		   ) VALUES ( #year#
		 		    , #mon#
		 		    , #govMetricId#
		 		    , #govCalTypeColId#
<!--		 		    , DECODE(#govCalTypeColActual#, 0, NULL,#govCalTypeColActual#) -->
		 		    , DECODE(#govCalTypeColActual#, 0, 0,#govCalTypeColActual#)
		 		    , SYSDATE
		   )
	</insert>

	<!--
	==================================================================
	  # 설명	: 계량실적입력 삭제
	  #	기능	: UPDATE
	  #	TABLE	: GOV_CAL_TYPE_COL_ACTUAL
	==================================================================
	-->
	<update id="deleteData" parameterClass="hashMap">
		DELETE FROM GOV_CAL_TYPE_COL_ACTUAL
		 WHERE 1 = 1
		   AND YEAR = #year#
		   AND MON 	= #mon#
		   AND GOV_METRIC_ID 		= #govMetricId#
		   AND ACT_CAL_TYPE_COL_ID 	= #govCalTypeColId#
	</update>





	<!--
	==================================================================
	  # 설명	: 파라미터 맵
	  #	기능	: SETTING
	  #	TABLE	:
	==================================================================
	-->
	<parameterMap id="paramMap" class="java.util.HashMap">
		<parameter property="year" 			jdbcType="VARCHAR"  javaType="java.lang.String" mode="IN"/>
	</parameterMap>



	<!--
	==================================================================
	  # 설명	: 데이터집계관리 프로시저 호출
	  #	기능	: CALL PROCEDURE
	  #	TABLE	:
	==================================================================
	-->
	<procedure id="callSpGovActualProc"  parameterMap="paramMap">
		{CALL  SP_GOV_ACTUAL_KGS(? )}
	</procedure>
	
	
	<!--
	==================================================================
	  # 설명	: 계량실적입력 목록 보기
	  #	기능	: SELECT
	  #	TABLE	: GOV_METRIC
	==================================================================
	-->
	<select id="getPopListPop" parameterClass="hashMap" resultClass="hashMap" remapResults="true">
	  SELECT A.YEAR
	       , A.GOV_METRIC_ID
	       , A.GOV_METRIC_NM
	       , A.ITEM_CD
	       , A.ACT_CAL_TYPE_COL_ID
	       , A.ACT_CAL_TYPE_COL_NM
	       , A.CAL_TYPE_UNIT_ID
	       , F_CODE_NM ('013', A.CAL_TYPE_UNIT_ID, A.YEAR) AS CAL_TYPE_UNIT_NM
	       , ROUND(A.MON01, 3) AS MON01
	       , ROUND(A.MON02, 3) AS MON02
	       , ROUND(A.MON03, 3) AS MON03
	       , ROUND(A.MON04, 3) AS MON04
	       , ROUND(A.MON05, 3) AS MON05
	       , ROUND(A.MON06, 3) AS MON06
	       , ROUND(A.MON07, 3) AS MON07
	       , ROUND(A.MON08, 3) AS MON08
	       , ROUND(A.MON09, 3) AS MON09
	       , ROUND(A.MON10, 3) AS MON10
	       , ROUND(A.MON11, 3) AS MON11
	       , ROUND(A.MON12, 3) AS MON12
	       , A.SC_DEPT_ID
	       , B.RESTRICTED
	       , B.URL
	       , (SELECT SC_DEPT_NM
	            FROM BSC_SC_DEPT
	           WHERE A.YEAR = YEAR
	             AND A.SC_DEPT_ID = SC_DEPT_ID)
	            SC_DEPT_NM
	       , INSERT_USER_ID
	       , (SELECT USER_NM
	            FROM V_ROLE_USER
	           WHERE INSERT_USER_ID = USER_ID)
	            INSERT_USER_NM
	       , COUNT (*) OVER (PARTITION BY A.YEAR, A.GOV_METRIC_ID) GM_CNT
	       , ROW_NUMBER () OVER (PARTITION BY A.YEAR, A.GOV_METRIC_ID ORDER BY A.YEAR, A.GOV_METRIC_ID, ACT_CAL_TYPE_COL_ID) GM_INDEX
		    FROM    (SELECT A.*
		                  , B.MON01
		                  , B.MON02
		                  , B.MON03
		                  , B.MON04
		                  , B.MON05
		                  , B.MON06
		                  , B.MON07
		                  , B.MON08
		                  , B.MON09
		                  , B.MON10
		                  , B.MON11
		                  , B.MON12
		               FROM    (SELECT GM.YEAR
		                             , GM.GOV_METRIC_ID
		                             , GM.GOV_METRIC_NM
		                             , GM.SC_DEPT_ID
		                             , GM.INSERT_USER_ID
		                             , GCTC.ACT_CAL_TYPE_COL_ID
		                             , GCTC.ACT_CAL_TYPE_COL_NM
		                             , GCTC.UNIT AS CAL_TYPE_UNIT_ID
		                             , GCTC.ITEM_CD
		                          FROM    GOV_METRIC GM
		                               LEFT OUTER JOIN
		                                  GOV_CAL_TYPE_COL GCTC
		                               ON GM.YEAR = GCTC.YEAR
		                              AND GM.GOV_METRIC_ID = GCTC.GOV_METRIC_ID
		                         WHERE 1 = 1
		                           AND GM.YEAR = #findYear#
		                           AND GM.GBN_ID = '01'
		                           AND GM.DELETE_DT IS NULL
		                           AND GM.GOV_METRIC_ID = #findGovMetricId#
		                        UNION ALL
		                        SELECT YEAR
		                             , GOV_METRIC_ID
		                             , GOV_METRIC_NM
		                             , SC_DEPT_ID
		                             , INSERT_USER_ID
		                             , 'ZZZ' ACT_CAL_TYPE_COL_ID
		                             , '실적' ACT_CAL_TYPE_COL_NM
		                             , UNIT AS CAL_TYPE_UNIT_ID
		                             , '' ITEM_CD
		                          FROM GOV_METRIC
		                         WHERE 1 = 1
		                           AND YEAR = #findYear#
		                           AND GBN_ID = '01'
		                           AND DELETE_DT IS NULL
		                           AND GOV_METRIC_ID = #findGovMetricId#) A
		                    LEFT OUTER JOIN
		                       (  SELECT YEAR
		                               , GOV_METRIC_ID
		                               , ACT_CAL_TYPE_COL_ID
		                               , MAX (MON01) MON01
		                               , MAX (MON02) MON02
		                               , MAX (MON03) MON03
		                               , MAX (MON04) MON04
		                               , MAX (MON05) MON05
		                               , MAX (MON06) MON06
		                               , MAX (MON07) MON07
		                               , MAX (MON08) MON08
		                               , MAX (MON09) MON09
		                               , MAX (MON10) MON10
		                               , MAX (MON11) MON11
		                               , MAX (MON12) MON12
		                            FROM (SELECT YEAR
		                                       , GOV_METRIC_ID
		                                       , ACT_CAL_TYPE_COL_ID
		                                       , CASE WHEN MON = '01' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END MON01
		                                       , CASE WHEN MON = '02' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END MON02
		                                       , CASE WHEN MON = '03' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END MON03
		                                       , CASE WHEN MON = '04' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END MON04
		                                       , CASE WHEN MON = '05' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END MON05
		                                       , CASE WHEN MON = '06' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END MON06
		                                       , CASE WHEN MON = '07' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END MON07
		                                       , CASE WHEN MON = '08' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END MON08
		                                       , CASE WHEN MON = '09' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END MON09
		                                       , CASE WHEN MON = '10' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END MON10
		                                       , CASE WHEN MON = '11' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END MON11
		                                       , CASE WHEN MON = '12' THEN CAL_TYPE_COL_ACTUAL ELSE NULL END MON12
		                                    FROM GOV_CAL_TYPE_COL_ACTUAL A
		                                   WHERE YEAR = #findYear#
		                                     AND GOV_METRIC_ID = #findGovMetricId#)
		                        GROUP BY YEAR, GOV_METRIC_ID, ACT_CAL_TYPE_COL_ID
		                        UNION ALL
		                          SELECT YEAR
		                               , GOV_METRIC_ID
		                               , ACT_CAL_TYPE_COL_ID
		                               , MAX (MON01) MON01
		                               , MAX (MON02) MON02
		                               , MAX (MON03) MON03
		                               , MAX (MON04) MON04
		                               , MAX (MON05) MON05
		                               , MAX (MON06) MON06
		                               , MAX (MON07) MON07
		                               , MAX (MON08) MON08
		                               , MAX (MON09) MON09
		                               , MAX (MON10) MON10
		                               , MAX (MON11) MON11
		                               , MAX (MON12) MON12
		                            FROM (SELECT YEAR
		                                       , GOV_METRIC_ID
		                                       , 'ZZZ' ACT_CAL_TYPE_COL_ID
		                                       , CASE WHEN MON = '01' THEN ACTUAL ELSE NULL END MON01
		                                       , CASE WHEN MON = '02' THEN ACTUAL ELSE NULL END MON02
		                                       , CASE WHEN MON = '03' THEN ACTUAL ELSE NULL END MON03
		                                       , CASE WHEN MON = '04' THEN ACTUAL ELSE NULL END MON04
		                                       , CASE WHEN MON = '05' THEN ACTUAL ELSE NULL END MON05
		                                       , CASE WHEN MON = '06' THEN ACTUAL ELSE NULL END MON06
		                                       , CASE WHEN MON = '07' THEN ACTUAL ELSE NULL END MON07
		                                       , CASE WHEN MON = '08' THEN ACTUAL ELSE NULL END MON08
		                                       , CASE WHEN MON = '09' THEN ACTUAL ELSE NULL END MON09
		                                       , CASE WHEN MON = '10' THEN ACTUAL ELSE NULL END MON10
		                                       , CASE WHEN MON = '11' THEN ACTUAL ELSE NULL END MON11
		                                       , CASE WHEN MON = '12' THEN ACTUAL ELSE NULL END MON12
		                                    FROM GOV_ACTUAL A
		                                   WHERE YEAR = #findYear#
		                                     AND GOV_METRIC_ID = #findGovMetricId#)
		                        GROUP BY YEAR, GOV_METRIC_ID, ACT_CAL_TYPE_COL_ID) B
		                    ON A.YEAR = B.YEAR
		                   AND A.GOV_METRIC_ID = B.GOV_METRIC_ID
		                   AND A.ACT_CAL_TYPE_COL_ID = B.ACT_CAL_TYPE_COL_ID) A
		         LEFT OUTER JOIN
		            BSC_SYSTEM_ITEM B
		         ON A.YEAR = B.YEAR
		        AND A.ITEM_CD = B.ITEM_CD
		ORDER BY GOV_METRIC_ID, ACT_CAL_TYPE_COL_ID
	</select>
    
	<!--
    ==================================================================
      # 설명  : 미진사유 조회
      # 기능  : SELECT
      # TABLE   : BSC_CAUSE
    ==================================================================
    -->
    <select id="getCause" parameterClass="hashMap" resultClass="hashMap">
        SELECT A.YEAR
             , A.MON
             , A.METRIC_ID
             , A.CAUSE_DESC
             , A.CATCH_UP
             , A.INSERT_USER_ID     
             , A.OPNION
             , A.OPNION_USER_ID
         FROM BSC_CAUSE A
        WHERE A.YEAR = #findYear#
          AND A.MON = #findMon#
          AND A.METRIC_ID = #findGovMetricId#
    </select>
    
    <!--
    ==================================================================
      # 설명  : 의견 입력
      # 기능  : UPDATE
      # TABLE   : BSC_CAUSE
    ==================================================================
    -->
    <insert id="updateOpnionDB" parameterClass="hashMap">
        MERGE INTO BSC_CAUSE A
        USING (SELECT #findYear# AS YEAR, #findMon# AS MON, #findGovMetricId# AS METRIC_ID FROM DUAL ) AA
           ON (A.YEAR = AA.YEAR
          AND A.MON = AA.MON
          AND A.METRIC_ID = AA.METRIC_ID)
        WHEN MATCHED THEN
             UPDATE SET A.OPNION = #opnion#
                      , A.OPNION_USER_ID = #userId#
                      , A.UPDATE_DT = SYSDATE
        WHEN NOT MATCHED THEN     
             INSERT (A.YEAR, A.MON, A.METRIC_ID, A.CREATE_DT, A.OPNION, A.OPNION_USER_ID)
             VALUES (AA.YEAR, AA.MON, AA.METRIC_ID, SYSDATE, #opnion#, #userId#)
    </insert>
    
    <!--
    ==================================================================
      # 설명  : 담당자 조회
      # 기능  : SELECT
      # TABLE   : 
    ==================================================================
    -->
    <select id="getUserList" parameterClass="hashMap" resultClass="hashMap">
        SELECT DISTINCT CASE WHEN GRP_ID = 1 THEN INSERT_USER_ID
                             WHEN GRP_ID = 2 THEN MANAGER_USER_ID
                             WHEN GRP_ID = 3 THEN ETC1
                             WHEN GRP_ID = 4 THEN ETC2 END SEND_USER
        FROM (
        SELECT A.INSERT_USER_ID, B.MANAGER_USER_ID
        , (SELECT ETC1 FROM BSC_CODE WHERE CODE_GRP_ID = '203' AND CODE_ID = '01') AS ETC1
        , (SELECT ETC2 FROM BSC_CODE WHERE CODE_GRP_ID = '203' AND CODE_ID = '01') AS ETC2
        FROM GOV_METRIC A
        LEFT OUTER JOIN BSC_SC_DEPT B
            ON A.YEAR = B.YEAR
            AND A.SC_DEPT_ID = B.SC_DEPT_ID
        WHERE A.YEAR = #findYear#
        AND A.GOV_METRIC_ID = #findGovMetricId#
        ) A
        INNER JOIN (SELECT ROWNUM GRP_ID FROM DUAL CONNECT BY LEVEL &lt; 5) B ON 1=1
    </select>
</sqlMap>


